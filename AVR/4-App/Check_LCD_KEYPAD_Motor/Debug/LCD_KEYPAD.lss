
LCD_KEYPAD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002734  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00002734  000027c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800088  00800088  000027f0  2**0
                  ALLOC
  3 .stab         0000207c  00000000  00000000  000027f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001039  00000000  00000000  0000486c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000058a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00005a05  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00005b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00007bd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00008cda  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00009c5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00009ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000a09e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a92c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e3       	ldi	r30, 0x34	; 52
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 38       	cpi	r26, 0x89	; 137
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 54 12 	call	0x24a8	; 0x24a8 <main>
      8a:	0c 94 98 13 	jmp	0x2730	; 0x2730 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1c 13 	jmp	0x2638	; 0x2638 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 38 13 	jmp	0x2670	; 0x2670 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 28 13 	jmp	0x2650	; 0x2650 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 44 13 	jmp	0x2688	; 0x2688 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 28 13 	jmp	0x2650	; 0x2650 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 44 13 	jmp	0x2688	; 0x2688 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1c 13 	jmp	0x2638	; 0x2638 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 38 13 	jmp	0x2670	; 0x2670 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 40 13 	jmp	0x2680	; 0x2680 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 28 13 	jmp	0x2650	; 0x2650 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 44 13 	jmp	0x2688	; 0x2688 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 28 13 	jmp	0x2650	; 0x2650 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 44 13 	jmp	0x2688	; 0x2688 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 28 13 	jmp	0x2650	; 0x2650 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 44 13 	jmp	0x2688	; 0x2688 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 2c 13 	jmp	0x2658	; 0x2658 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 48 13 	jmp	0x2690	; 0x2690 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <CLCD_voidSendCmnd>:
#include "CLCD_private.h"
#include "CLCD_config.h"


void CLCD_voidSendCmnd(u8 Copy_u8Cmnd)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	69 97       	sbiw	r28, 0x19	; 25
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
     cb2:	89 8f       	std	Y+25, r24	; 0x19
	/* RS = 0 */
	DIO_EnuSetPinValue (CLCD_RS_PORT , CLCD_RS_PIN , DIO_PIN_LOW);
     cb4:	82 e0       	ldi	r24, 0x02	; 2
     cb6:	60 e0       	ldi	r22, 0x00	; 0
     cb8:	40 e0       	ldi	r20, 0x00	; 0
     cba:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <DIO_EnuSetPinValue>
	/* RW = 0 */
	DIO_EnuSetPinValue (CLCD_RW_PORT , CLCD_RW_PIN , DIO_PIN_LOW);
     cbe:	82 e0       	ldi	r24, 0x02	; 2
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	40 e0       	ldi	r20, 0x00	; 0
     cc4:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <DIO_EnuSetPinValue>

	/* write command */
#if (CLCD_MODE  == EIGHT_BIT_MODE)
	CLCD_voidSetValue(Copy_u8Cmnd);
     cc8:	89 8d       	ldd	r24, Y+25	; 0x19
     cca:	0e 94 01 0b 	call	0x1602	; 0x1602 <CLCD_voidSetValue>
	DIO_EnuSetPinValue (CLCD_E_PORT , CLCD_E_PIN , DIO_PIN_LOW);
	CLCD_voidSetValue((Copy_u8Cmnd<<4) & 0xf0);

#endif
	/* Enable pulse = 1 */
	DIO_EnuSetPinValue (CLCD_E_PORT , CLCD_E_PIN , DIO_PIN_HIGH);
     cce:	82 e0       	ldi	r24, 0x02	; 2
     cd0:	62 e0       	ldi	r22, 0x02	; 2
     cd2:	41 e0       	ldi	r20, 0x01	; 1
     cd4:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <DIO_EnuSetPinValue>
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e8       	ldi	r26, 0x80	; 128
     cde:	bf e3       	ldi	r27, 0x3F	; 63
     ce0:	8d 8b       	std	Y+21, r24	; 0x15
     ce2:	9e 8b       	std	Y+22, r25	; 0x16
     ce4:	af 8b       	std	Y+23, r26	; 0x17
     ce6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     ce8:	6d 89       	ldd	r22, Y+21	; 0x15
     cea:	7e 89       	ldd	r23, Y+22	; 0x16
     cec:	8f 89       	ldd	r24, Y+23	; 0x17
     cee:	98 8d       	ldd	r25, Y+24	; 0x18
     cf0:	2b ea       	ldi	r18, 0xAB	; 171
     cf2:	3a ea       	ldi	r19, 0xAA	; 170
     cf4:	4a e2       	ldi	r20, 0x2A	; 42
     cf6:	50 e4       	ldi	r21, 0x40	; 64
     cf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cfc:	dc 01       	movw	r26, r24
     cfe:	cb 01       	movw	r24, r22
     d00:	89 8b       	std	Y+17, r24	; 0x11
     d02:	9a 8b       	std	Y+18, r25	; 0x12
     d04:	ab 8b       	std	Y+19, r26	; 0x13
     d06:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     d08:	69 89       	ldd	r22, Y+17	; 0x11
     d0a:	7a 89       	ldd	r23, Y+18	; 0x12
     d0c:	8b 89       	ldd	r24, Y+19	; 0x13
     d0e:	9c 89       	ldd	r25, Y+20	; 0x14
     d10:	20 e0       	ldi	r18, 0x00	; 0
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	40 e8       	ldi	r20, 0x80	; 128
     d16:	5f e3       	ldi	r21, 0x3F	; 63
     d18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     d1c:	88 23       	and	r24, r24
     d1e:	1c f4       	brge	.+6      	; 0xd26 <CLCD_voidSendCmnd+0x88>
		__ticks = 1;
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	88 8b       	std	Y+16, r24	; 0x10
     d24:	91 c0       	rjmp	.+290    	; 0xe48 <CLCD_voidSendCmnd+0x1aa>
	else if (__tmp > 255)
     d26:	69 89       	ldd	r22, Y+17	; 0x11
     d28:	7a 89       	ldd	r23, Y+18	; 0x12
     d2a:	8b 89       	ldd	r24, Y+19	; 0x13
     d2c:	9c 89       	ldd	r25, Y+20	; 0x14
     d2e:	20 e0       	ldi	r18, 0x00	; 0
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	4f e7       	ldi	r20, 0x7F	; 127
     d34:	53 e4       	ldi	r21, 0x43	; 67
     d36:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     d3a:	18 16       	cp	r1, r24
     d3c:	0c f0       	brlt	.+2      	; 0xd40 <CLCD_voidSendCmnd+0xa2>
     d3e:	7b c0       	rjmp	.+246    	; 0xe36 <CLCD_voidSendCmnd+0x198>
	{
		_delay_ms(__us / 1000.0);
     d40:	6d 89       	ldd	r22, Y+21	; 0x15
     d42:	7e 89       	ldd	r23, Y+22	; 0x16
     d44:	8f 89       	ldd	r24, Y+23	; 0x17
     d46:	98 8d       	ldd	r25, Y+24	; 0x18
     d48:	20 e0       	ldi	r18, 0x00	; 0
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	4a e7       	ldi	r20, 0x7A	; 122
     d4e:	54 e4       	ldi	r21, 0x44	; 68
     d50:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     d54:	dc 01       	movw	r26, r24
     d56:	cb 01       	movw	r24, r22
     d58:	8c 87       	std	Y+12, r24	; 0x0c
     d5a:	9d 87       	std	Y+13, r25	; 0x0d
     d5c:	ae 87       	std	Y+14, r26	; 0x0e
     d5e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d60:	6c 85       	ldd	r22, Y+12	; 0x0c
     d62:	7d 85       	ldd	r23, Y+13	; 0x0d
     d64:	8e 85       	ldd	r24, Y+14	; 0x0e
     d66:	9f 85       	ldd	r25, Y+15	; 0x0f
     d68:	20 e0       	ldi	r18, 0x00	; 0
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	4a ef       	ldi	r20, 0xFA	; 250
     d6e:	54 e4       	ldi	r21, 0x44	; 68
     d70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d74:	dc 01       	movw	r26, r24
     d76:	cb 01       	movw	r24, r22
     d78:	88 87       	std	Y+8, r24	; 0x08
     d7a:	99 87       	std	Y+9, r25	; 0x09
     d7c:	aa 87       	std	Y+10, r26	; 0x0a
     d7e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     d80:	68 85       	ldd	r22, Y+8	; 0x08
     d82:	79 85       	ldd	r23, Y+9	; 0x09
     d84:	8a 85       	ldd	r24, Y+10	; 0x0a
     d86:	9b 85       	ldd	r25, Y+11	; 0x0b
     d88:	20 e0       	ldi	r18, 0x00	; 0
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	40 e8       	ldi	r20, 0x80	; 128
     d8e:	5f e3       	ldi	r21, 0x3F	; 63
     d90:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     d94:	88 23       	and	r24, r24
     d96:	2c f4       	brge	.+10     	; 0xda2 <CLCD_voidSendCmnd+0x104>
		__ticks = 1;
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	9f 83       	std	Y+7, r25	; 0x07
     d9e:	8e 83       	std	Y+6, r24	; 0x06
     da0:	3f c0       	rjmp	.+126    	; 0xe20 <CLCD_voidSendCmnd+0x182>
	else if (__tmp > 65535)
     da2:	68 85       	ldd	r22, Y+8	; 0x08
     da4:	79 85       	ldd	r23, Y+9	; 0x09
     da6:	8a 85       	ldd	r24, Y+10	; 0x0a
     da8:	9b 85       	ldd	r25, Y+11	; 0x0b
     daa:	20 e0       	ldi	r18, 0x00	; 0
     dac:	3f ef       	ldi	r19, 0xFF	; 255
     dae:	4f e7       	ldi	r20, 0x7F	; 127
     db0:	57 e4       	ldi	r21, 0x47	; 71
     db2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     db6:	18 16       	cp	r1, r24
     db8:	4c f5       	brge	.+82     	; 0xe0c <CLCD_voidSendCmnd+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dba:	6c 85       	ldd	r22, Y+12	; 0x0c
     dbc:	7d 85       	ldd	r23, Y+13	; 0x0d
     dbe:	8e 85       	ldd	r24, Y+14	; 0x0e
     dc0:	9f 85       	ldd	r25, Y+15	; 0x0f
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	40 e2       	ldi	r20, 0x20	; 32
     dc8:	51 e4       	ldi	r21, 0x41	; 65
     dca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dce:	dc 01       	movw	r26, r24
     dd0:	cb 01       	movw	r24, r22
     dd2:	bc 01       	movw	r22, r24
     dd4:	cd 01       	movw	r24, r26
     dd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dda:	dc 01       	movw	r26, r24
     ddc:	cb 01       	movw	r24, r22
     dde:	9f 83       	std	Y+7, r25	; 0x07
     de0:	8e 83       	std	Y+6, r24	; 0x06
     de2:	0f c0       	rjmp	.+30     	; 0xe02 <CLCD_voidSendCmnd+0x164>
     de4:	88 ec       	ldi	r24, 0xC8	; 200
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	9d 83       	std	Y+5, r25	; 0x05
     dea:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dec:	8c 81       	ldd	r24, Y+4	; 0x04
     dee:	9d 81       	ldd	r25, Y+5	; 0x05
     df0:	01 97       	sbiw	r24, 0x01	; 1
     df2:	f1 f7       	brne	.-4      	; 0xdf0 <CLCD_voidSendCmnd+0x152>
     df4:	9d 83       	std	Y+5, r25	; 0x05
     df6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     df8:	8e 81       	ldd	r24, Y+6	; 0x06
     dfa:	9f 81       	ldd	r25, Y+7	; 0x07
     dfc:	01 97       	sbiw	r24, 0x01	; 1
     dfe:	9f 83       	std	Y+7, r25	; 0x07
     e00:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e02:	8e 81       	ldd	r24, Y+6	; 0x06
     e04:	9f 81       	ldd	r25, Y+7	; 0x07
     e06:	00 97       	sbiw	r24, 0x00	; 0
     e08:	69 f7       	brne	.-38     	; 0xde4 <CLCD_voidSendCmnd+0x146>
     e0a:	24 c0       	rjmp	.+72     	; 0xe54 <CLCD_voidSendCmnd+0x1b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e0c:	68 85       	ldd	r22, Y+8	; 0x08
     e0e:	79 85       	ldd	r23, Y+9	; 0x09
     e10:	8a 85       	ldd	r24, Y+10	; 0x0a
     e12:	9b 85       	ldd	r25, Y+11	; 0x0b
     e14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e18:	dc 01       	movw	r26, r24
     e1a:	cb 01       	movw	r24, r22
     e1c:	9f 83       	std	Y+7, r25	; 0x07
     e1e:	8e 83       	std	Y+6, r24	; 0x06
     e20:	8e 81       	ldd	r24, Y+6	; 0x06
     e22:	9f 81       	ldd	r25, Y+7	; 0x07
     e24:	9b 83       	std	Y+3, r25	; 0x03
     e26:	8a 83       	std	Y+2, r24	; 0x02
     e28:	8a 81       	ldd	r24, Y+2	; 0x02
     e2a:	9b 81       	ldd	r25, Y+3	; 0x03
     e2c:	01 97       	sbiw	r24, 0x01	; 1
     e2e:	f1 f7       	brne	.-4      	; 0xe2c <CLCD_voidSendCmnd+0x18e>
     e30:	9b 83       	std	Y+3, r25	; 0x03
     e32:	8a 83       	std	Y+2, r24	; 0x02
     e34:	0f c0       	rjmp	.+30     	; 0xe54 <CLCD_voidSendCmnd+0x1b6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     e36:	69 89       	ldd	r22, Y+17	; 0x11
     e38:	7a 89       	ldd	r23, Y+18	; 0x12
     e3a:	8b 89       	ldd	r24, Y+19	; 0x13
     e3c:	9c 89       	ldd	r25, Y+20	; 0x14
     e3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e42:	dc 01       	movw	r26, r24
     e44:	cb 01       	movw	r24, r22
     e46:	88 8b       	std	Y+16, r24	; 0x10
     e48:	88 89       	ldd	r24, Y+16	; 0x10
     e4a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     e4c:	89 81       	ldd	r24, Y+1	; 0x01
     e4e:	8a 95       	dec	r24
     e50:	f1 f7       	brne	.-4      	; 0xe4e <CLCD_voidSendCmnd+0x1b0>
     e52:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	/* Enable pulse = 0 */
	DIO_EnuSetPinValue (CLCD_E_PORT , CLCD_E_PIN , DIO_PIN_LOW);
     e54:	82 e0       	ldi	r24, 0x02	; 2
     e56:	62 e0       	ldi	r22, 0x02	; 2
     e58:	40 e0       	ldi	r20, 0x00	; 0
     e5a:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <DIO_EnuSetPinValue>
}
     e5e:	69 96       	adiw	r28, 0x19	; 25
     e60:	0f b6       	in	r0, 0x3f	; 63
     e62:	f8 94       	cli
     e64:	de bf       	out	0x3e, r29	; 62
     e66:	0f be       	out	0x3f, r0	; 63
     e68:	cd bf       	out	0x3d, r28	; 61
     e6a:	cf 91       	pop	r28
     e6c:	df 91       	pop	r29
     e6e:	08 95       	ret

00000e70 <LCD_Clear_Display>:

void LCD_Clear_Display(void)
{
     e70:	df 93       	push	r29
     e72:	cf 93       	push	r28
     e74:	cd b7       	in	r28, 0x3d	; 61
     e76:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCmnd(0x01);
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCmnd>
}
     e7e:	cf 91       	pop	r28
     e80:	df 91       	pop	r29
     e82:	08 95       	ret

00000e84 <CLCD_voidInit>:
void CLCD_voidInit()
{
     e84:	0f 93       	push	r16
     e86:	1f 93       	push	r17
     e88:	df 93       	push	r29
     e8a:	cf 93       	push	r28
     e8c:	cd b7       	in	r28, 0x3d	; 61
     e8e:	de b7       	in	r29, 0x3e	; 62
     e90:	cc 54       	subi	r28, 0x4C	; 76
     e92:	d0 40       	sbci	r29, 0x00	; 0
     e94:	0f b6       	in	r0, 0x3f	; 63
     e96:	f8 94       	cli
     e98:	de bf       	out	0x3e, r29	; 62
     e9a:	0f be       	out	0x3f, r0	; 63
     e9c:	cd bf       	out	0x3d, r28	; 61
	DIO_EnuSetPinDirection(CLCD_RS_PORT,CLCD_RS_PIN,DIO_PIN_OUTPUT);
     e9e:	82 e0       	ldi	r24, 0x02	; 2
     ea0:	60 e0       	ldi	r22, 0x00	; 0
     ea2:	41 e0       	ldi	r20, 0x01	; 1
     ea4:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <DIO_EnuSetPinDirection>
	DIO_EnuSetPinDirection(CLCD_RW_PORT,CLCD_RW_PIN,DIO_PIN_OUTPUT);
     ea8:	82 e0       	ldi	r24, 0x02	; 2
     eaa:	61 e0       	ldi	r22, 0x01	; 1
     eac:	41 e0       	ldi	r20, 0x01	; 1
     eae:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <DIO_EnuSetPinDirection>
	DIO_EnuSetPinDirection(CLCD_E_PORT,CLCD_E_PIN,DIO_PIN_OUTPUT);
     eb2:	82 e0       	ldi	r24, 0x02	; 2
     eb4:	62 e0       	ldi	r22, 0x02	; 2
     eb6:	41 e0       	ldi	r20, 0x01	; 1
     eb8:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <DIO_EnuSetPinDirection>
	DIO_EnuSetPortDirection(CLCD_DATA_PORT,DIO_PORT_OUTPUT);
     ebc:	83 e0       	ldi	r24, 0x03	; 3
     ebe:	6f ef       	ldi	r22, 0xFF	; 255
     ec0:	0e 94 6d 10 	call	0x20da	; 0x20da <DIO_EnuSetPortDirection>
     ec4:	fe 01       	movw	r30, r28
     ec6:	e7 5b       	subi	r30, 0xB7	; 183
     ec8:	ff 4f       	sbci	r31, 0xFF	; 255
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	a0 e2       	ldi	r26, 0x20	; 32
     ed0:	b2 e4       	ldi	r27, 0x42	; 66
     ed2:	80 83       	st	Z, r24
     ed4:	91 83       	std	Z+1, r25	; 0x01
     ed6:	a2 83       	std	Z+2, r26	; 0x02
     ed8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eda:	8e 01       	movw	r16, r28
     edc:	0b 5b       	subi	r16, 0xBB	; 187
     ede:	1f 4f       	sbci	r17, 0xFF	; 255
     ee0:	fe 01       	movw	r30, r28
     ee2:	e7 5b       	subi	r30, 0xB7	; 183
     ee4:	ff 4f       	sbci	r31, 0xFF	; 255
     ee6:	60 81       	ld	r22, Z
     ee8:	71 81       	ldd	r23, Z+1	; 0x01
     eea:	82 81       	ldd	r24, Z+2	; 0x02
     eec:	93 81       	ldd	r25, Z+3	; 0x03
     eee:	20 e0       	ldi	r18, 0x00	; 0
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	4a ef       	ldi	r20, 0xFA	; 250
     ef4:	54 e4       	ldi	r21, 0x44	; 68
     ef6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     efa:	dc 01       	movw	r26, r24
     efc:	cb 01       	movw	r24, r22
     efe:	f8 01       	movw	r30, r16
     f00:	80 83       	st	Z, r24
     f02:	91 83       	std	Z+1, r25	; 0x01
     f04:	a2 83       	std	Z+2, r26	; 0x02
     f06:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f08:	fe 01       	movw	r30, r28
     f0a:	eb 5b       	subi	r30, 0xBB	; 187
     f0c:	ff 4f       	sbci	r31, 0xFF	; 255
     f0e:	60 81       	ld	r22, Z
     f10:	71 81       	ldd	r23, Z+1	; 0x01
     f12:	82 81       	ldd	r24, Z+2	; 0x02
     f14:	93 81       	ldd	r25, Z+3	; 0x03
     f16:	20 e0       	ldi	r18, 0x00	; 0
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	40 e8       	ldi	r20, 0x80	; 128
     f1c:	5f e3       	ldi	r21, 0x3F	; 63
     f1e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f22:	88 23       	and	r24, r24
     f24:	44 f4       	brge	.+16     	; 0xf36 <CLCD_voidInit+0xb2>
		__ticks = 1;
     f26:	fe 01       	movw	r30, r28
     f28:	ed 5b       	subi	r30, 0xBD	; 189
     f2a:	ff 4f       	sbci	r31, 0xFF	; 255
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	91 83       	std	Z+1, r25	; 0x01
     f32:	80 83       	st	Z, r24
     f34:	64 c0       	rjmp	.+200    	; 0xffe <CLCD_voidInit+0x17a>
	else if (__tmp > 65535)
     f36:	fe 01       	movw	r30, r28
     f38:	eb 5b       	subi	r30, 0xBB	; 187
     f3a:	ff 4f       	sbci	r31, 0xFF	; 255
     f3c:	60 81       	ld	r22, Z
     f3e:	71 81       	ldd	r23, Z+1	; 0x01
     f40:	82 81       	ldd	r24, Z+2	; 0x02
     f42:	93 81       	ldd	r25, Z+3	; 0x03
     f44:	20 e0       	ldi	r18, 0x00	; 0
     f46:	3f ef       	ldi	r19, 0xFF	; 255
     f48:	4f e7       	ldi	r20, 0x7F	; 127
     f4a:	57 e4       	ldi	r21, 0x47	; 71
     f4c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f50:	18 16       	cp	r1, r24
     f52:	0c f0       	brlt	.+2      	; 0xf56 <CLCD_voidInit+0xd2>
     f54:	43 c0       	rjmp	.+134    	; 0xfdc <CLCD_voidInit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f56:	fe 01       	movw	r30, r28
     f58:	e7 5b       	subi	r30, 0xB7	; 183
     f5a:	ff 4f       	sbci	r31, 0xFF	; 255
     f5c:	60 81       	ld	r22, Z
     f5e:	71 81       	ldd	r23, Z+1	; 0x01
     f60:	82 81       	ldd	r24, Z+2	; 0x02
     f62:	93 81       	ldd	r25, Z+3	; 0x03
     f64:	20 e0       	ldi	r18, 0x00	; 0
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	40 e2       	ldi	r20, 0x20	; 32
     f6a:	51 e4       	ldi	r21, 0x41	; 65
     f6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f70:	dc 01       	movw	r26, r24
     f72:	cb 01       	movw	r24, r22
     f74:	8e 01       	movw	r16, r28
     f76:	0d 5b       	subi	r16, 0xBD	; 189
     f78:	1f 4f       	sbci	r17, 0xFF	; 255
     f7a:	bc 01       	movw	r22, r24
     f7c:	cd 01       	movw	r24, r26
     f7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f82:	dc 01       	movw	r26, r24
     f84:	cb 01       	movw	r24, r22
     f86:	f8 01       	movw	r30, r16
     f88:	91 83       	std	Z+1, r25	; 0x01
     f8a:	80 83       	st	Z, r24
     f8c:	1f c0       	rjmp	.+62     	; 0xfcc <CLCD_voidInit+0x148>
     f8e:	fe 01       	movw	r30, r28
     f90:	ef 5b       	subi	r30, 0xBF	; 191
     f92:	ff 4f       	sbci	r31, 0xFF	; 255
     f94:	88 ec       	ldi	r24, 0xC8	; 200
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	91 83       	std	Z+1, r25	; 0x01
     f9a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f9c:	fe 01       	movw	r30, r28
     f9e:	ef 5b       	subi	r30, 0xBF	; 191
     fa0:	ff 4f       	sbci	r31, 0xFF	; 255
     fa2:	80 81       	ld	r24, Z
     fa4:	91 81       	ldd	r25, Z+1	; 0x01
     fa6:	01 97       	sbiw	r24, 0x01	; 1
     fa8:	f1 f7       	brne	.-4      	; 0xfa6 <CLCD_voidInit+0x122>
     faa:	fe 01       	movw	r30, r28
     fac:	ef 5b       	subi	r30, 0xBF	; 191
     fae:	ff 4f       	sbci	r31, 0xFF	; 255
     fb0:	91 83       	std	Z+1, r25	; 0x01
     fb2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fb4:	de 01       	movw	r26, r28
     fb6:	ad 5b       	subi	r26, 0xBD	; 189
     fb8:	bf 4f       	sbci	r27, 0xFF	; 255
     fba:	fe 01       	movw	r30, r28
     fbc:	ed 5b       	subi	r30, 0xBD	; 189
     fbe:	ff 4f       	sbci	r31, 0xFF	; 255
     fc0:	80 81       	ld	r24, Z
     fc2:	91 81       	ldd	r25, Z+1	; 0x01
     fc4:	01 97       	sbiw	r24, 0x01	; 1
     fc6:	11 96       	adiw	r26, 0x01	; 1
     fc8:	9c 93       	st	X, r25
     fca:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fcc:	fe 01       	movw	r30, r28
     fce:	ed 5b       	subi	r30, 0xBD	; 189
     fd0:	ff 4f       	sbci	r31, 0xFF	; 255
     fd2:	80 81       	ld	r24, Z
     fd4:	91 81       	ldd	r25, Z+1	; 0x01
     fd6:	00 97       	sbiw	r24, 0x00	; 0
     fd8:	d1 f6       	brne	.-76     	; 0xf8e <CLCD_voidInit+0x10a>
     fda:	24 c0       	rjmp	.+72     	; 0x1024 <CLCD_voidInit+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fdc:	8e 01       	movw	r16, r28
     fde:	0d 5b       	subi	r16, 0xBD	; 189
     fe0:	1f 4f       	sbci	r17, 0xFF	; 255
     fe2:	fe 01       	movw	r30, r28
     fe4:	eb 5b       	subi	r30, 0xBB	; 187
     fe6:	ff 4f       	sbci	r31, 0xFF	; 255
     fe8:	60 81       	ld	r22, Z
     fea:	71 81       	ldd	r23, Z+1	; 0x01
     fec:	82 81       	ldd	r24, Z+2	; 0x02
     fee:	93 81       	ldd	r25, Z+3	; 0x03
     ff0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ff4:	dc 01       	movw	r26, r24
     ff6:	cb 01       	movw	r24, r22
     ff8:	f8 01       	movw	r30, r16
     ffa:	91 83       	std	Z+1, r25	; 0x01
     ffc:	80 83       	st	Z, r24
     ffe:	fe 01       	movw	r30, r28
    1000:	ed 5b       	subi	r30, 0xBD	; 189
    1002:	ff 4f       	sbci	r31, 0xFF	; 255
    1004:	80 81       	ld	r24, Z
    1006:	91 81       	ldd	r25, Z+1	; 0x01
    1008:	fe 01       	movw	r30, r28
    100a:	ff 96       	adiw	r30, 0x3f	; 63
    100c:	91 83       	std	Z+1, r25	; 0x01
    100e:	80 83       	st	Z, r24
    1010:	fe 01       	movw	r30, r28
    1012:	ff 96       	adiw	r30, 0x3f	; 63
    1014:	80 81       	ld	r24, Z
    1016:	91 81       	ldd	r25, Z+1	; 0x01
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	f1 f7       	brne	.-4      	; 0x1018 <CLCD_voidInit+0x194>
    101c:	fe 01       	movw	r30, r28
    101e:	ff 96       	adiw	r30, 0x3f	; 63
    1020:	91 83       	std	Z+1, r25	; 0x01
    1022:	80 83       	st	Z, r24

#if (CLCD_MODE == EIGHT_BIT_MODE)
	{
		_delay_ms(40);
		CLCD_voidSendCmnd(0x38);    //function set
    1024:	88 e3       	ldi	r24, 0x38	; 56
    1026:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCmnd>
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	a0 e2       	ldi	r26, 0x20	; 32
    1030:	b2 e4       	ldi	r27, 0x42	; 66
    1032:	8b af       	std	Y+59, r24	; 0x3b
    1034:	9c af       	std	Y+60, r25	; 0x3c
    1036:	ad af       	std	Y+61, r26	; 0x3d
    1038:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    103a:	6b ad       	ldd	r22, Y+59	; 0x3b
    103c:	7c ad       	ldd	r23, Y+60	; 0x3c
    103e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1040:	9e ad       	ldd	r25, Y+62	; 0x3e
    1042:	2b ea       	ldi	r18, 0xAB	; 171
    1044:	3a ea       	ldi	r19, 0xAA	; 170
    1046:	4a e2       	ldi	r20, 0x2A	; 42
    1048:	50 e4       	ldi	r21, 0x40	; 64
    104a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    104e:	dc 01       	movw	r26, r24
    1050:	cb 01       	movw	r24, r22
    1052:	8f ab       	std	Y+55, r24	; 0x37
    1054:	98 af       	std	Y+56, r25	; 0x38
    1056:	a9 af       	std	Y+57, r26	; 0x39
    1058:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    105a:	6f a9       	ldd	r22, Y+55	; 0x37
    105c:	78 ad       	ldd	r23, Y+56	; 0x38
    105e:	89 ad       	ldd	r24, Y+57	; 0x39
    1060:	9a ad       	ldd	r25, Y+58	; 0x3a
    1062:	20 e0       	ldi	r18, 0x00	; 0
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	40 e8       	ldi	r20, 0x80	; 128
    1068:	5f e3       	ldi	r21, 0x3F	; 63
    106a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    106e:	88 23       	and	r24, r24
    1070:	1c f4       	brge	.+6      	; 0x1078 <CLCD_voidInit+0x1f4>
		__ticks = 1;
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	8e ab       	std	Y+54, r24	; 0x36
    1076:	91 c0       	rjmp	.+290    	; 0x119a <CLCD_voidInit+0x316>
	else if (__tmp > 255)
    1078:	6f a9       	ldd	r22, Y+55	; 0x37
    107a:	78 ad       	ldd	r23, Y+56	; 0x38
    107c:	89 ad       	ldd	r24, Y+57	; 0x39
    107e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1080:	20 e0       	ldi	r18, 0x00	; 0
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	4f e7       	ldi	r20, 0x7F	; 127
    1086:	53 e4       	ldi	r21, 0x43	; 67
    1088:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    108c:	18 16       	cp	r1, r24
    108e:	0c f0       	brlt	.+2      	; 0x1092 <CLCD_voidInit+0x20e>
    1090:	7b c0       	rjmp	.+246    	; 0x1188 <CLCD_voidInit+0x304>
	{
		_delay_ms(__us / 1000.0);
    1092:	6b ad       	ldd	r22, Y+59	; 0x3b
    1094:	7c ad       	ldd	r23, Y+60	; 0x3c
    1096:	8d ad       	ldd	r24, Y+61	; 0x3d
    1098:	9e ad       	ldd	r25, Y+62	; 0x3e
    109a:	20 e0       	ldi	r18, 0x00	; 0
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	4a e7       	ldi	r20, 0x7A	; 122
    10a0:	54 e4       	ldi	r21, 0x44	; 68
    10a2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    10a6:	dc 01       	movw	r26, r24
    10a8:	cb 01       	movw	r24, r22
    10aa:	8a ab       	std	Y+50, r24	; 0x32
    10ac:	9b ab       	std	Y+51, r25	; 0x33
    10ae:	ac ab       	std	Y+52, r26	; 0x34
    10b0:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10b2:	6a a9       	ldd	r22, Y+50	; 0x32
    10b4:	7b a9       	ldd	r23, Y+51	; 0x33
    10b6:	8c a9       	ldd	r24, Y+52	; 0x34
    10b8:	9d a9       	ldd	r25, Y+53	; 0x35
    10ba:	20 e0       	ldi	r18, 0x00	; 0
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	4a ef       	ldi	r20, 0xFA	; 250
    10c0:	54 e4       	ldi	r21, 0x44	; 68
    10c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10c6:	dc 01       	movw	r26, r24
    10c8:	cb 01       	movw	r24, r22
    10ca:	8e a7       	std	Y+46, r24	; 0x2e
    10cc:	9f a7       	std	Y+47, r25	; 0x2f
    10ce:	a8 ab       	std	Y+48, r26	; 0x30
    10d0:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    10d2:	6e a5       	ldd	r22, Y+46	; 0x2e
    10d4:	7f a5       	ldd	r23, Y+47	; 0x2f
    10d6:	88 a9       	ldd	r24, Y+48	; 0x30
    10d8:	99 a9       	ldd	r25, Y+49	; 0x31
    10da:	20 e0       	ldi	r18, 0x00	; 0
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	40 e8       	ldi	r20, 0x80	; 128
    10e0:	5f e3       	ldi	r21, 0x3F	; 63
    10e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    10e6:	88 23       	and	r24, r24
    10e8:	2c f4       	brge	.+10     	; 0x10f4 <CLCD_voidInit+0x270>
		__ticks = 1;
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	9d a7       	std	Y+45, r25	; 0x2d
    10f0:	8c a7       	std	Y+44, r24	; 0x2c
    10f2:	3f c0       	rjmp	.+126    	; 0x1172 <CLCD_voidInit+0x2ee>
	else if (__tmp > 65535)
    10f4:	6e a5       	ldd	r22, Y+46	; 0x2e
    10f6:	7f a5       	ldd	r23, Y+47	; 0x2f
    10f8:	88 a9       	ldd	r24, Y+48	; 0x30
    10fa:	99 a9       	ldd	r25, Y+49	; 0x31
    10fc:	20 e0       	ldi	r18, 0x00	; 0
    10fe:	3f ef       	ldi	r19, 0xFF	; 255
    1100:	4f e7       	ldi	r20, 0x7F	; 127
    1102:	57 e4       	ldi	r21, 0x47	; 71
    1104:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1108:	18 16       	cp	r1, r24
    110a:	4c f5       	brge	.+82     	; 0x115e <CLCD_voidInit+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    110c:	6a a9       	ldd	r22, Y+50	; 0x32
    110e:	7b a9       	ldd	r23, Y+51	; 0x33
    1110:	8c a9       	ldd	r24, Y+52	; 0x34
    1112:	9d a9       	ldd	r25, Y+53	; 0x35
    1114:	20 e0       	ldi	r18, 0x00	; 0
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	40 e2       	ldi	r20, 0x20	; 32
    111a:	51 e4       	ldi	r21, 0x41	; 65
    111c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1120:	dc 01       	movw	r26, r24
    1122:	cb 01       	movw	r24, r22
    1124:	bc 01       	movw	r22, r24
    1126:	cd 01       	movw	r24, r26
    1128:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    112c:	dc 01       	movw	r26, r24
    112e:	cb 01       	movw	r24, r22
    1130:	9d a7       	std	Y+45, r25	; 0x2d
    1132:	8c a7       	std	Y+44, r24	; 0x2c
    1134:	0f c0       	rjmp	.+30     	; 0x1154 <CLCD_voidInit+0x2d0>
    1136:	88 ec       	ldi	r24, 0xC8	; 200
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	9b a7       	std	Y+43, r25	; 0x2b
    113c:	8a a7       	std	Y+42, r24	; 0x2a
    113e:	8a a5       	ldd	r24, Y+42	; 0x2a
    1140:	9b a5       	ldd	r25, Y+43	; 0x2b
    1142:	01 97       	sbiw	r24, 0x01	; 1
    1144:	f1 f7       	brne	.-4      	; 0x1142 <CLCD_voidInit+0x2be>
    1146:	9b a7       	std	Y+43, r25	; 0x2b
    1148:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    114a:	8c a5       	ldd	r24, Y+44	; 0x2c
    114c:	9d a5       	ldd	r25, Y+45	; 0x2d
    114e:	01 97       	sbiw	r24, 0x01	; 1
    1150:	9d a7       	std	Y+45, r25	; 0x2d
    1152:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1154:	8c a5       	ldd	r24, Y+44	; 0x2c
    1156:	9d a5       	ldd	r25, Y+45	; 0x2d
    1158:	00 97       	sbiw	r24, 0x00	; 0
    115a:	69 f7       	brne	.-38     	; 0x1136 <CLCD_voidInit+0x2b2>
    115c:	24 c0       	rjmp	.+72     	; 0x11a6 <CLCD_voidInit+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    115e:	6e a5       	ldd	r22, Y+46	; 0x2e
    1160:	7f a5       	ldd	r23, Y+47	; 0x2f
    1162:	88 a9       	ldd	r24, Y+48	; 0x30
    1164:	99 a9       	ldd	r25, Y+49	; 0x31
    1166:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    116a:	dc 01       	movw	r26, r24
    116c:	cb 01       	movw	r24, r22
    116e:	9d a7       	std	Y+45, r25	; 0x2d
    1170:	8c a7       	std	Y+44, r24	; 0x2c
    1172:	8c a5       	ldd	r24, Y+44	; 0x2c
    1174:	9d a5       	ldd	r25, Y+45	; 0x2d
    1176:	99 a7       	std	Y+41, r25	; 0x29
    1178:	88 a7       	std	Y+40, r24	; 0x28
    117a:	88 a5       	ldd	r24, Y+40	; 0x28
    117c:	99 a5       	ldd	r25, Y+41	; 0x29
    117e:	01 97       	sbiw	r24, 0x01	; 1
    1180:	f1 f7       	brne	.-4      	; 0x117e <CLCD_voidInit+0x2fa>
    1182:	99 a7       	std	Y+41, r25	; 0x29
    1184:	88 a7       	std	Y+40, r24	; 0x28
    1186:	0f c0       	rjmp	.+30     	; 0x11a6 <CLCD_voidInit+0x322>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1188:	6f a9       	ldd	r22, Y+55	; 0x37
    118a:	78 ad       	ldd	r23, Y+56	; 0x38
    118c:	89 ad       	ldd	r24, Y+57	; 0x39
    118e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1190:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1194:	dc 01       	movw	r26, r24
    1196:	cb 01       	movw	r24, r22
    1198:	8e ab       	std	Y+54, r24	; 0x36
    119a:	8e a9       	ldd	r24, Y+54	; 0x36
    119c:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    119e:	8f a1       	ldd	r24, Y+39	; 0x27
    11a0:	8a 95       	dec	r24
    11a2:	f1 f7       	brne	.-4      	; 0x11a0 <CLCD_voidInit+0x31c>
    11a4:	8f a3       	std	Y+39, r24	; 0x27
		_delay_ms(2);
		CLCD_voidSendCmnd(0x28);    //function set
		_delay_ms(2);
	}
#endif
	CLCD_voidSendCmnd(0x0c);    //display on/off control
    11a6:	8c e0       	ldi	r24, 0x0C	; 12
    11a8:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCmnd>
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	a0 e2       	ldi	r26, 0x20	; 32
    11b2:	b2 e4       	ldi	r27, 0x42	; 66
    11b4:	8b a3       	std	Y+35, r24	; 0x23
    11b6:	9c a3       	std	Y+36, r25	; 0x24
    11b8:	ad a3       	std	Y+37, r26	; 0x25
    11ba:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    11bc:	6b a1       	ldd	r22, Y+35	; 0x23
    11be:	7c a1       	ldd	r23, Y+36	; 0x24
    11c0:	8d a1       	ldd	r24, Y+37	; 0x25
    11c2:	9e a1       	ldd	r25, Y+38	; 0x26
    11c4:	2b ea       	ldi	r18, 0xAB	; 171
    11c6:	3a ea       	ldi	r19, 0xAA	; 170
    11c8:	4a e2       	ldi	r20, 0x2A	; 42
    11ca:	50 e4       	ldi	r21, 0x40	; 64
    11cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11d0:	dc 01       	movw	r26, r24
    11d2:	cb 01       	movw	r24, r22
    11d4:	8f 8f       	std	Y+31, r24	; 0x1f
    11d6:	98 a3       	std	Y+32, r25	; 0x20
    11d8:	a9 a3       	std	Y+33, r26	; 0x21
    11da:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    11dc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    11de:	78 a1       	ldd	r23, Y+32	; 0x20
    11e0:	89 a1       	ldd	r24, Y+33	; 0x21
    11e2:	9a a1       	ldd	r25, Y+34	; 0x22
    11e4:	20 e0       	ldi	r18, 0x00	; 0
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	40 e8       	ldi	r20, 0x80	; 128
    11ea:	5f e3       	ldi	r21, 0x3F	; 63
    11ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    11f0:	88 23       	and	r24, r24
    11f2:	1c f4       	brge	.+6      	; 0x11fa <CLCD_voidInit+0x376>
		__ticks = 1;
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	8e 8f       	std	Y+30, r24	; 0x1e
    11f8:	91 c0       	rjmp	.+290    	; 0x131c <CLCD_voidInit+0x498>
	else if (__tmp > 255)
    11fa:	6f 8d       	ldd	r22, Y+31	; 0x1f
    11fc:	78 a1       	ldd	r23, Y+32	; 0x20
    11fe:	89 a1       	ldd	r24, Y+33	; 0x21
    1200:	9a a1       	ldd	r25, Y+34	; 0x22
    1202:	20 e0       	ldi	r18, 0x00	; 0
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	4f e7       	ldi	r20, 0x7F	; 127
    1208:	53 e4       	ldi	r21, 0x43	; 67
    120a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    120e:	18 16       	cp	r1, r24
    1210:	0c f0       	brlt	.+2      	; 0x1214 <CLCD_voidInit+0x390>
    1212:	7b c0       	rjmp	.+246    	; 0x130a <CLCD_voidInit+0x486>
	{
		_delay_ms(__us / 1000.0);
    1214:	6b a1       	ldd	r22, Y+35	; 0x23
    1216:	7c a1       	ldd	r23, Y+36	; 0x24
    1218:	8d a1       	ldd	r24, Y+37	; 0x25
    121a:	9e a1       	ldd	r25, Y+38	; 0x26
    121c:	20 e0       	ldi	r18, 0x00	; 0
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	4a e7       	ldi	r20, 0x7A	; 122
    1222:	54 e4       	ldi	r21, 0x44	; 68
    1224:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1228:	dc 01       	movw	r26, r24
    122a:	cb 01       	movw	r24, r22
    122c:	8a 8f       	std	Y+26, r24	; 0x1a
    122e:	9b 8f       	std	Y+27, r25	; 0x1b
    1230:	ac 8f       	std	Y+28, r26	; 0x1c
    1232:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1234:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1236:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1238:	8c 8d       	ldd	r24, Y+28	; 0x1c
    123a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    123c:	20 e0       	ldi	r18, 0x00	; 0
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	4a ef       	ldi	r20, 0xFA	; 250
    1242:	54 e4       	ldi	r21, 0x44	; 68
    1244:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1248:	dc 01       	movw	r26, r24
    124a:	cb 01       	movw	r24, r22
    124c:	8e 8b       	std	Y+22, r24	; 0x16
    124e:	9f 8b       	std	Y+23, r25	; 0x17
    1250:	a8 8f       	std	Y+24, r26	; 0x18
    1252:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1254:	6e 89       	ldd	r22, Y+22	; 0x16
    1256:	7f 89       	ldd	r23, Y+23	; 0x17
    1258:	88 8d       	ldd	r24, Y+24	; 0x18
    125a:	99 8d       	ldd	r25, Y+25	; 0x19
    125c:	20 e0       	ldi	r18, 0x00	; 0
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	40 e8       	ldi	r20, 0x80	; 128
    1262:	5f e3       	ldi	r21, 0x3F	; 63
    1264:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1268:	88 23       	and	r24, r24
    126a:	2c f4       	brge	.+10     	; 0x1276 <CLCD_voidInit+0x3f2>
		__ticks = 1;
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	9d 8b       	std	Y+21, r25	; 0x15
    1272:	8c 8b       	std	Y+20, r24	; 0x14
    1274:	3f c0       	rjmp	.+126    	; 0x12f4 <CLCD_voidInit+0x470>
	else if (__tmp > 65535)
    1276:	6e 89       	ldd	r22, Y+22	; 0x16
    1278:	7f 89       	ldd	r23, Y+23	; 0x17
    127a:	88 8d       	ldd	r24, Y+24	; 0x18
    127c:	99 8d       	ldd	r25, Y+25	; 0x19
    127e:	20 e0       	ldi	r18, 0x00	; 0
    1280:	3f ef       	ldi	r19, 0xFF	; 255
    1282:	4f e7       	ldi	r20, 0x7F	; 127
    1284:	57 e4       	ldi	r21, 0x47	; 71
    1286:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    128a:	18 16       	cp	r1, r24
    128c:	4c f5       	brge	.+82     	; 0x12e0 <CLCD_voidInit+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    128e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1290:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1292:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1294:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	40 e2       	ldi	r20, 0x20	; 32
    129c:	51 e4       	ldi	r21, 0x41	; 65
    129e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12a2:	dc 01       	movw	r26, r24
    12a4:	cb 01       	movw	r24, r22
    12a6:	bc 01       	movw	r22, r24
    12a8:	cd 01       	movw	r24, r26
    12aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ae:	dc 01       	movw	r26, r24
    12b0:	cb 01       	movw	r24, r22
    12b2:	9d 8b       	std	Y+21, r25	; 0x15
    12b4:	8c 8b       	std	Y+20, r24	; 0x14
    12b6:	0f c0       	rjmp	.+30     	; 0x12d6 <CLCD_voidInit+0x452>
    12b8:	88 ec       	ldi	r24, 0xC8	; 200
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	9b 8b       	std	Y+19, r25	; 0x13
    12be:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12c0:	8a 89       	ldd	r24, Y+18	; 0x12
    12c2:	9b 89       	ldd	r25, Y+19	; 0x13
    12c4:	01 97       	sbiw	r24, 0x01	; 1
    12c6:	f1 f7       	brne	.-4      	; 0x12c4 <CLCD_voidInit+0x440>
    12c8:	9b 8b       	std	Y+19, r25	; 0x13
    12ca:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12cc:	8c 89       	ldd	r24, Y+20	; 0x14
    12ce:	9d 89       	ldd	r25, Y+21	; 0x15
    12d0:	01 97       	sbiw	r24, 0x01	; 1
    12d2:	9d 8b       	std	Y+21, r25	; 0x15
    12d4:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12d6:	8c 89       	ldd	r24, Y+20	; 0x14
    12d8:	9d 89       	ldd	r25, Y+21	; 0x15
    12da:	00 97       	sbiw	r24, 0x00	; 0
    12dc:	69 f7       	brne	.-38     	; 0x12b8 <CLCD_voidInit+0x434>
    12de:	24 c0       	rjmp	.+72     	; 0x1328 <CLCD_voidInit+0x4a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12e0:	6e 89       	ldd	r22, Y+22	; 0x16
    12e2:	7f 89       	ldd	r23, Y+23	; 0x17
    12e4:	88 8d       	ldd	r24, Y+24	; 0x18
    12e6:	99 8d       	ldd	r25, Y+25	; 0x19
    12e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ec:	dc 01       	movw	r26, r24
    12ee:	cb 01       	movw	r24, r22
    12f0:	9d 8b       	std	Y+21, r25	; 0x15
    12f2:	8c 8b       	std	Y+20, r24	; 0x14
    12f4:	8c 89       	ldd	r24, Y+20	; 0x14
    12f6:	9d 89       	ldd	r25, Y+21	; 0x15
    12f8:	99 8b       	std	Y+17, r25	; 0x11
    12fa:	88 8b       	std	Y+16, r24	; 0x10
    12fc:	88 89       	ldd	r24, Y+16	; 0x10
    12fe:	99 89       	ldd	r25, Y+17	; 0x11
    1300:	01 97       	sbiw	r24, 0x01	; 1
    1302:	f1 f7       	brne	.-4      	; 0x1300 <CLCD_voidInit+0x47c>
    1304:	99 8b       	std	Y+17, r25	; 0x11
    1306:	88 8b       	std	Y+16, r24	; 0x10
    1308:	0f c0       	rjmp	.+30     	; 0x1328 <CLCD_voidInit+0x4a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    130a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    130c:	78 a1       	ldd	r23, Y+32	; 0x20
    130e:	89 a1       	ldd	r24, Y+33	; 0x21
    1310:	9a a1       	ldd	r25, Y+34	; 0x22
    1312:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1316:	dc 01       	movw	r26, r24
    1318:	cb 01       	movw	r24, r22
    131a:	8e 8f       	std	Y+30, r24	; 0x1e
    131c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    131e:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1320:	8f 85       	ldd	r24, Y+15	; 0x0f
    1322:	8a 95       	dec	r24
    1324:	f1 f7       	brne	.-4      	; 0x1322 <CLCD_voidInit+0x49e>
    1326:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40);
	CLCD_voidSendCmnd(0x01);    //display clear
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCmnd>
    132e:	80 e0       	ldi	r24, 0x00	; 0
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	a0 e0       	ldi	r26, 0x00	; 0
    1334:	b0 e4       	ldi	r27, 0x40	; 64
    1336:	8b 87       	std	Y+11, r24	; 0x0b
    1338:	9c 87       	std	Y+12, r25	; 0x0c
    133a:	ad 87       	std	Y+13, r26	; 0x0d
    133c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    133e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1340:	7c 85       	ldd	r23, Y+12	; 0x0c
    1342:	8d 85       	ldd	r24, Y+13	; 0x0d
    1344:	9e 85       	ldd	r25, Y+14	; 0x0e
    1346:	20 e0       	ldi	r18, 0x00	; 0
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	4a ef       	ldi	r20, 0xFA	; 250
    134c:	54 e4       	ldi	r21, 0x44	; 68
    134e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1352:	dc 01       	movw	r26, r24
    1354:	cb 01       	movw	r24, r22
    1356:	8f 83       	std	Y+7, r24	; 0x07
    1358:	98 87       	std	Y+8, r25	; 0x08
    135a:	a9 87       	std	Y+9, r26	; 0x09
    135c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    135e:	6f 81       	ldd	r22, Y+7	; 0x07
    1360:	78 85       	ldd	r23, Y+8	; 0x08
    1362:	89 85       	ldd	r24, Y+9	; 0x09
    1364:	9a 85       	ldd	r25, Y+10	; 0x0a
    1366:	20 e0       	ldi	r18, 0x00	; 0
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	40 e8       	ldi	r20, 0x80	; 128
    136c:	5f e3       	ldi	r21, 0x3F	; 63
    136e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1372:	88 23       	and	r24, r24
    1374:	2c f4       	brge	.+10     	; 0x1380 <CLCD_voidInit+0x4fc>
		__ticks = 1;
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	9e 83       	std	Y+6, r25	; 0x06
    137c:	8d 83       	std	Y+5, r24	; 0x05
    137e:	3f c0       	rjmp	.+126    	; 0x13fe <CLCD_voidInit+0x57a>
	else if (__tmp > 65535)
    1380:	6f 81       	ldd	r22, Y+7	; 0x07
    1382:	78 85       	ldd	r23, Y+8	; 0x08
    1384:	89 85       	ldd	r24, Y+9	; 0x09
    1386:	9a 85       	ldd	r25, Y+10	; 0x0a
    1388:	20 e0       	ldi	r18, 0x00	; 0
    138a:	3f ef       	ldi	r19, 0xFF	; 255
    138c:	4f e7       	ldi	r20, 0x7F	; 127
    138e:	57 e4       	ldi	r21, 0x47	; 71
    1390:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1394:	18 16       	cp	r1, r24
    1396:	4c f5       	brge	.+82     	; 0x13ea <CLCD_voidInit+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1398:	6b 85       	ldd	r22, Y+11	; 0x0b
    139a:	7c 85       	ldd	r23, Y+12	; 0x0c
    139c:	8d 85       	ldd	r24, Y+13	; 0x0d
    139e:	9e 85       	ldd	r25, Y+14	; 0x0e
    13a0:	20 e0       	ldi	r18, 0x00	; 0
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	40 e2       	ldi	r20, 0x20	; 32
    13a6:	51 e4       	ldi	r21, 0x41	; 65
    13a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ac:	dc 01       	movw	r26, r24
    13ae:	cb 01       	movw	r24, r22
    13b0:	bc 01       	movw	r22, r24
    13b2:	cd 01       	movw	r24, r26
    13b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13b8:	dc 01       	movw	r26, r24
    13ba:	cb 01       	movw	r24, r22
    13bc:	9e 83       	std	Y+6, r25	; 0x06
    13be:	8d 83       	std	Y+5, r24	; 0x05
    13c0:	0f c0       	rjmp	.+30     	; 0x13e0 <CLCD_voidInit+0x55c>
    13c2:	88 ec       	ldi	r24, 0xC8	; 200
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	9c 83       	std	Y+4, r25	; 0x04
    13c8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13ca:	8b 81       	ldd	r24, Y+3	; 0x03
    13cc:	9c 81       	ldd	r25, Y+4	; 0x04
    13ce:	01 97       	sbiw	r24, 0x01	; 1
    13d0:	f1 f7       	brne	.-4      	; 0x13ce <CLCD_voidInit+0x54a>
    13d2:	9c 83       	std	Y+4, r25	; 0x04
    13d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13d6:	8d 81       	ldd	r24, Y+5	; 0x05
    13d8:	9e 81       	ldd	r25, Y+6	; 0x06
    13da:	01 97       	sbiw	r24, 0x01	; 1
    13dc:	9e 83       	std	Y+6, r25	; 0x06
    13de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13e0:	8d 81       	ldd	r24, Y+5	; 0x05
    13e2:	9e 81       	ldd	r25, Y+6	; 0x06
    13e4:	00 97       	sbiw	r24, 0x00	; 0
    13e6:	69 f7       	brne	.-38     	; 0x13c2 <CLCD_voidInit+0x53e>
    13e8:	14 c0       	rjmp	.+40     	; 0x1412 <CLCD_voidInit+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13ea:	6f 81       	ldd	r22, Y+7	; 0x07
    13ec:	78 85       	ldd	r23, Y+8	; 0x08
    13ee:	89 85       	ldd	r24, Y+9	; 0x09
    13f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13f6:	dc 01       	movw	r26, r24
    13f8:	cb 01       	movw	r24, r22
    13fa:	9e 83       	std	Y+6, r25	; 0x06
    13fc:	8d 83       	std	Y+5, r24	; 0x05
    13fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1400:	9e 81       	ldd	r25, Y+6	; 0x06
    1402:	9a 83       	std	Y+2, r25	; 0x02
    1404:	89 83       	std	Y+1, r24	; 0x01
    1406:	89 81       	ldd	r24, Y+1	; 0x01
    1408:	9a 81       	ldd	r25, Y+2	; 0x02
    140a:	01 97       	sbiw	r24, 0x01	; 1
    140c:	f1 f7       	brne	.-4      	; 0x140a <CLCD_voidInit+0x586>
    140e:	9a 83       	std	Y+2, r25	; 0x02
    1410:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	CLCD_voidSendCmnd(0x06);
    1412:	86 e0       	ldi	r24, 0x06	; 6
    1414:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCmnd>
}
    1418:	c4 5b       	subi	r28, 0xB4	; 180
    141a:	df 4f       	sbci	r29, 0xFF	; 255
    141c:	0f b6       	in	r0, 0x3f	; 63
    141e:	f8 94       	cli
    1420:	de bf       	out	0x3e, r29	; 62
    1422:	0f be       	out	0x3f, r0	; 63
    1424:	cd bf       	out	0x3d, r28	; 61
    1426:	cf 91       	pop	r28
    1428:	df 91       	pop	r29
    142a:	1f 91       	pop	r17
    142c:	0f 91       	pop	r16
    142e:	08 95       	ret

00001430 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
    1430:	df 93       	push	r29
    1432:	cf 93       	push	r28
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
    1438:	69 97       	sbiw	r28, 0x19	; 25
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	f8 94       	cli
    143e:	de bf       	out	0x3e, r29	; 62
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	cd bf       	out	0x3d, r28	; 61
    1444:	89 8f       	std	Y+25, r24	; 0x19
	/* RS = 1 */
	DIO_EnuSetPinValue (CLCD_RS_PORT , CLCD_RS_PIN , DIO_PIN_HIGH);
    1446:	82 e0       	ldi	r24, 0x02	; 2
    1448:	60 e0       	ldi	r22, 0x00	; 0
    144a:	41 e0       	ldi	r20, 0x01	; 1
    144c:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <DIO_EnuSetPinValue>
	/* RW = 0 */
	DIO_EnuSetPinValue (CLCD_RW_PORT , CLCD_RW_PIN , DIO_PIN_LOW);
    1450:	82 e0       	ldi	r24, 0x02	; 2
    1452:	61 e0       	ldi	r22, 0x01	; 1
    1454:	40 e0       	ldi	r20, 0x00	; 0
    1456:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <DIO_EnuSetPinValue>

	/* write Data */
#if (CLCD_MODE == EIGHT_BIT_MODE)
	{
		CLCD_voidSetValue(Copy_u8Data);
    145a:	89 8d       	ldd	r24, Y+25	; 0x19
    145c:	0e 94 01 0b 	call	0x1602	; 0x1602 <CLCD_voidSetValue>
		_delay_us(1);
		CLCD_voidSetValue(Copy_u8Data << 4);
	}
#endif
	/* Enable pulse = 1 */
	DIO_EnuSetPinValue (CLCD_E_PORT , CLCD_E_PIN , DIO_PIN_HIGH);
    1460:	82 e0       	ldi	r24, 0x02	; 2
    1462:	62 e0       	ldi	r22, 0x02	; 2
    1464:	41 e0       	ldi	r20, 0x01	; 1
    1466:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <DIO_EnuSetPinValue>
    146a:	80 e0       	ldi	r24, 0x00	; 0
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	a0 e8       	ldi	r26, 0x80	; 128
    1470:	bf e3       	ldi	r27, 0x3F	; 63
    1472:	8d 8b       	std	Y+21, r24	; 0x15
    1474:	9e 8b       	std	Y+22, r25	; 0x16
    1476:	af 8b       	std	Y+23, r26	; 0x17
    1478:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    147a:	6d 89       	ldd	r22, Y+21	; 0x15
    147c:	7e 89       	ldd	r23, Y+22	; 0x16
    147e:	8f 89       	ldd	r24, Y+23	; 0x17
    1480:	98 8d       	ldd	r25, Y+24	; 0x18
    1482:	2b ea       	ldi	r18, 0xAB	; 171
    1484:	3a ea       	ldi	r19, 0xAA	; 170
    1486:	4a e2       	ldi	r20, 0x2A	; 42
    1488:	50 e4       	ldi	r21, 0x40	; 64
    148a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    148e:	dc 01       	movw	r26, r24
    1490:	cb 01       	movw	r24, r22
    1492:	89 8b       	std	Y+17, r24	; 0x11
    1494:	9a 8b       	std	Y+18, r25	; 0x12
    1496:	ab 8b       	std	Y+19, r26	; 0x13
    1498:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    149a:	69 89       	ldd	r22, Y+17	; 0x11
    149c:	7a 89       	ldd	r23, Y+18	; 0x12
    149e:	8b 89       	ldd	r24, Y+19	; 0x13
    14a0:	9c 89       	ldd	r25, Y+20	; 0x14
    14a2:	20 e0       	ldi	r18, 0x00	; 0
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	40 e8       	ldi	r20, 0x80	; 128
    14a8:	5f e3       	ldi	r21, 0x3F	; 63
    14aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14ae:	88 23       	and	r24, r24
    14b0:	1c f4       	brge	.+6      	; 0x14b8 <CLCD_voidSendData+0x88>
		__ticks = 1;
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	88 8b       	std	Y+16, r24	; 0x10
    14b6:	91 c0       	rjmp	.+290    	; 0x15da <CLCD_voidSendData+0x1aa>
	else if (__tmp > 255)
    14b8:	69 89       	ldd	r22, Y+17	; 0x11
    14ba:	7a 89       	ldd	r23, Y+18	; 0x12
    14bc:	8b 89       	ldd	r24, Y+19	; 0x13
    14be:	9c 89       	ldd	r25, Y+20	; 0x14
    14c0:	20 e0       	ldi	r18, 0x00	; 0
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	4f e7       	ldi	r20, 0x7F	; 127
    14c6:	53 e4       	ldi	r21, 0x43	; 67
    14c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14cc:	18 16       	cp	r1, r24
    14ce:	0c f0       	brlt	.+2      	; 0x14d2 <CLCD_voidSendData+0xa2>
    14d0:	7b c0       	rjmp	.+246    	; 0x15c8 <CLCD_voidSendData+0x198>
	{
		_delay_ms(__us / 1000.0);
    14d2:	6d 89       	ldd	r22, Y+21	; 0x15
    14d4:	7e 89       	ldd	r23, Y+22	; 0x16
    14d6:	8f 89       	ldd	r24, Y+23	; 0x17
    14d8:	98 8d       	ldd	r25, Y+24	; 0x18
    14da:	20 e0       	ldi	r18, 0x00	; 0
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	4a e7       	ldi	r20, 0x7A	; 122
    14e0:	54 e4       	ldi	r21, 0x44	; 68
    14e2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    14e6:	dc 01       	movw	r26, r24
    14e8:	cb 01       	movw	r24, r22
    14ea:	8c 87       	std	Y+12, r24	; 0x0c
    14ec:	9d 87       	std	Y+13, r25	; 0x0d
    14ee:	ae 87       	std	Y+14, r26	; 0x0e
    14f0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14f2:	6c 85       	ldd	r22, Y+12	; 0x0c
    14f4:	7d 85       	ldd	r23, Y+13	; 0x0d
    14f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    14f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    14fa:	20 e0       	ldi	r18, 0x00	; 0
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	4a ef       	ldi	r20, 0xFA	; 250
    1500:	54 e4       	ldi	r21, 0x44	; 68
    1502:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1506:	dc 01       	movw	r26, r24
    1508:	cb 01       	movw	r24, r22
    150a:	88 87       	std	Y+8, r24	; 0x08
    150c:	99 87       	std	Y+9, r25	; 0x09
    150e:	aa 87       	std	Y+10, r26	; 0x0a
    1510:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1512:	68 85       	ldd	r22, Y+8	; 0x08
    1514:	79 85       	ldd	r23, Y+9	; 0x09
    1516:	8a 85       	ldd	r24, Y+10	; 0x0a
    1518:	9b 85       	ldd	r25, Y+11	; 0x0b
    151a:	20 e0       	ldi	r18, 0x00	; 0
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	40 e8       	ldi	r20, 0x80	; 128
    1520:	5f e3       	ldi	r21, 0x3F	; 63
    1522:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1526:	88 23       	and	r24, r24
    1528:	2c f4       	brge	.+10     	; 0x1534 <CLCD_voidSendData+0x104>
		__ticks = 1;
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	9f 83       	std	Y+7, r25	; 0x07
    1530:	8e 83       	std	Y+6, r24	; 0x06
    1532:	3f c0       	rjmp	.+126    	; 0x15b2 <CLCD_voidSendData+0x182>
	else if (__tmp > 65535)
    1534:	68 85       	ldd	r22, Y+8	; 0x08
    1536:	79 85       	ldd	r23, Y+9	; 0x09
    1538:	8a 85       	ldd	r24, Y+10	; 0x0a
    153a:	9b 85       	ldd	r25, Y+11	; 0x0b
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	3f ef       	ldi	r19, 0xFF	; 255
    1540:	4f e7       	ldi	r20, 0x7F	; 127
    1542:	57 e4       	ldi	r21, 0x47	; 71
    1544:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1548:	18 16       	cp	r1, r24
    154a:	4c f5       	brge	.+82     	; 0x159e <CLCD_voidSendData+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    154c:	6c 85       	ldd	r22, Y+12	; 0x0c
    154e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1550:	8e 85       	ldd	r24, Y+14	; 0x0e
    1552:	9f 85       	ldd	r25, Y+15	; 0x0f
    1554:	20 e0       	ldi	r18, 0x00	; 0
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	40 e2       	ldi	r20, 0x20	; 32
    155a:	51 e4       	ldi	r21, 0x41	; 65
    155c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1560:	dc 01       	movw	r26, r24
    1562:	cb 01       	movw	r24, r22
    1564:	bc 01       	movw	r22, r24
    1566:	cd 01       	movw	r24, r26
    1568:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    156c:	dc 01       	movw	r26, r24
    156e:	cb 01       	movw	r24, r22
    1570:	9f 83       	std	Y+7, r25	; 0x07
    1572:	8e 83       	std	Y+6, r24	; 0x06
    1574:	0f c0       	rjmp	.+30     	; 0x1594 <CLCD_voidSendData+0x164>
    1576:	88 ec       	ldi	r24, 0xC8	; 200
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	9d 83       	std	Y+5, r25	; 0x05
    157c:	8c 83       	std	Y+4, r24	; 0x04
    157e:	8c 81       	ldd	r24, Y+4	; 0x04
    1580:	9d 81       	ldd	r25, Y+5	; 0x05
    1582:	01 97       	sbiw	r24, 0x01	; 1
    1584:	f1 f7       	brne	.-4      	; 0x1582 <CLCD_voidSendData+0x152>
    1586:	9d 83       	std	Y+5, r25	; 0x05
    1588:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    158a:	8e 81       	ldd	r24, Y+6	; 0x06
    158c:	9f 81       	ldd	r25, Y+7	; 0x07
    158e:	01 97       	sbiw	r24, 0x01	; 1
    1590:	9f 83       	std	Y+7, r25	; 0x07
    1592:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1594:	8e 81       	ldd	r24, Y+6	; 0x06
    1596:	9f 81       	ldd	r25, Y+7	; 0x07
    1598:	00 97       	sbiw	r24, 0x00	; 0
    159a:	69 f7       	brne	.-38     	; 0x1576 <CLCD_voidSendData+0x146>
    159c:	24 c0       	rjmp	.+72     	; 0x15e6 <CLCD_voidSendData+0x1b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    159e:	68 85       	ldd	r22, Y+8	; 0x08
    15a0:	79 85       	ldd	r23, Y+9	; 0x09
    15a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    15a4:	9b 85       	ldd	r25, Y+11	; 0x0b
    15a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15aa:	dc 01       	movw	r26, r24
    15ac:	cb 01       	movw	r24, r22
    15ae:	9f 83       	std	Y+7, r25	; 0x07
    15b0:	8e 83       	std	Y+6, r24	; 0x06
    15b2:	8e 81       	ldd	r24, Y+6	; 0x06
    15b4:	9f 81       	ldd	r25, Y+7	; 0x07
    15b6:	9b 83       	std	Y+3, r25	; 0x03
    15b8:	8a 83       	std	Y+2, r24	; 0x02
    15ba:	8a 81       	ldd	r24, Y+2	; 0x02
    15bc:	9b 81       	ldd	r25, Y+3	; 0x03
    15be:	01 97       	sbiw	r24, 0x01	; 1
    15c0:	f1 f7       	brne	.-4      	; 0x15be <CLCD_voidSendData+0x18e>
    15c2:	9b 83       	std	Y+3, r25	; 0x03
    15c4:	8a 83       	std	Y+2, r24	; 0x02
    15c6:	0f c0       	rjmp	.+30     	; 0x15e6 <CLCD_voidSendData+0x1b6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    15c8:	69 89       	ldd	r22, Y+17	; 0x11
    15ca:	7a 89       	ldd	r23, Y+18	; 0x12
    15cc:	8b 89       	ldd	r24, Y+19	; 0x13
    15ce:	9c 89       	ldd	r25, Y+20	; 0x14
    15d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d4:	dc 01       	movw	r26, r24
    15d6:	cb 01       	movw	r24, r22
    15d8:	88 8b       	std	Y+16, r24	; 0x10
    15da:	88 89       	ldd	r24, Y+16	; 0x10
    15dc:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    15de:	89 81       	ldd	r24, Y+1	; 0x01
    15e0:	8a 95       	dec	r24
    15e2:	f1 f7       	brne	.-4      	; 0x15e0 <CLCD_voidSendData+0x1b0>
    15e4:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	/* Enable pulse = 0 */
	DIO_EnuSetPinValue (CLCD_E_PORT , CLCD_E_PIN , DIO_PIN_LOW);
    15e6:	82 e0       	ldi	r24, 0x02	; 2
    15e8:	62 e0       	ldi	r22, 0x02	; 2
    15ea:	40 e0       	ldi	r20, 0x00	; 0
    15ec:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <DIO_EnuSetPinValue>

}
    15f0:	69 96       	adiw	r28, 0x19	; 25
    15f2:	0f b6       	in	r0, 0x3f	; 63
    15f4:	f8 94       	cli
    15f6:	de bf       	out	0x3e, r29	; 62
    15f8:	0f be       	out	0x3f, r0	; 63
    15fa:	cd bf       	out	0x3d, r28	; 61
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	08 95       	ret

00001602 <CLCD_voidSetValue>:

static void CLCD_voidSetValue(u8 Copy_u8Value)
{
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	0f 92       	push	r0
    1608:	cd b7       	in	r28, 0x3d	; 61
    160a:	de b7       	in	r29, 0x3e	; 62
    160c:	89 83       	std	Y+1, r24	; 0x01
	if (CLCD_MODE == EIGHT_BIT_MODE)
	{
		DIO_EnuSetPinValue (CLCD_D0_PORT , CLCD_D0_PIN , GET_BIT(Copy_u8Value , 0));
    160e:	89 81       	ldd	r24, Y+1	; 0x01
    1610:	98 2f       	mov	r25, r24
    1612:	91 70       	andi	r25, 0x01	; 1
    1614:	83 e0       	ldi	r24, 0x03	; 3
    1616:	60 e0       	ldi	r22, 0x00	; 0
    1618:	49 2f       	mov	r20, r25
    161a:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <DIO_EnuSetPinValue>
		DIO_EnuSetPinValue (CLCD_D1_PORT , CLCD_D1_PIN , GET_BIT(Copy_u8Value , 1));
    161e:	89 81       	ldd	r24, Y+1	; 0x01
    1620:	86 95       	lsr	r24
    1622:	98 2f       	mov	r25, r24
    1624:	91 70       	andi	r25, 0x01	; 1
    1626:	83 e0       	ldi	r24, 0x03	; 3
    1628:	61 e0       	ldi	r22, 0x01	; 1
    162a:	49 2f       	mov	r20, r25
    162c:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <DIO_EnuSetPinValue>
		DIO_EnuSetPinValue (CLCD_D2_PORT , CLCD_D2_PIN , GET_BIT(Copy_u8Value , 2));
    1630:	89 81       	ldd	r24, Y+1	; 0x01
    1632:	86 95       	lsr	r24
    1634:	86 95       	lsr	r24
    1636:	98 2f       	mov	r25, r24
    1638:	91 70       	andi	r25, 0x01	; 1
    163a:	83 e0       	ldi	r24, 0x03	; 3
    163c:	62 e0       	ldi	r22, 0x02	; 2
    163e:	49 2f       	mov	r20, r25
    1640:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <DIO_EnuSetPinValue>
		DIO_EnuSetPinValue (CLCD_D3_PORT , CLCD_D3_PIN , GET_BIT(Copy_u8Value , 3));
    1644:	89 81       	ldd	r24, Y+1	; 0x01
    1646:	86 95       	lsr	r24
    1648:	86 95       	lsr	r24
    164a:	86 95       	lsr	r24
    164c:	98 2f       	mov	r25, r24
    164e:	91 70       	andi	r25, 0x01	; 1
    1650:	83 e0       	ldi	r24, 0x03	; 3
    1652:	63 e0       	ldi	r22, 0x03	; 3
    1654:	49 2f       	mov	r20, r25
    1656:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <DIO_EnuSetPinValue>
		DIO_EnuSetPinValue (CLCD_D4_PORT , CLCD_D4_PIN , GET_BIT(Copy_u8Value , 4));
    165a:	89 81       	ldd	r24, Y+1	; 0x01
    165c:	82 95       	swap	r24
    165e:	8f 70       	andi	r24, 0x0F	; 15
    1660:	98 2f       	mov	r25, r24
    1662:	91 70       	andi	r25, 0x01	; 1
    1664:	83 e0       	ldi	r24, 0x03	; 3
    1666:	64 e0       	ldi	r22, 0x04	; 4
    1668:	49 2f       	mov	r20, r25
    166a:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <DIO_EnuSetPinValue>
		DIO_EnuSetPinValue (CLCD_D5_PORT , CLCD_D5_PIN , GET_BIT(Copy_u8Value , 5));
    166e:	89 81       	ldd	r24, Y+1	; 0x01
    1670:	82 95       	swap	r24
    1672:	86 95       	lsr	r24
    1674:	87 70       	andi	r24, 0x07	; 7
    1676:	98 2f       	mov	r25, r24
    1678:	91 70       	andi	r25, 0x01	; 1
    167a:	83 e0       	ldi	r24, 0x03	; 3
    167c:	65 e0       	ldi	r22, 0x05	; 5
    167e:	49 2f       	mov	r20, r25
    1680:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <DIO_EnuSetPinValue>
		DIO_EnuSetPinValue (CLCD_D6_PORT , CLCD_D6_PIN , GET_BIT(Copy_u8Value , 6));
    1684:	89 81       	ldd	r24, Y+1	; 0x01
    1686:	82 95       	swap	r24
    1688:	86 95       	lsr	r24
    168a:	86 95       	lsr	r24
    168c:	83 70       	andi	r24, 0x03	; 3
    168e:	98 2f       	mov	r25, r24
    1690:	91 70       	andi	r25, 0x01	; 1
    1692:	83 e0       	ldi	r24, 0x03	; 3
    1694:	66 e0       	ldi	r22, 0x06	; 6
    1696:	49 2f       	mov	r20, r25
    1698:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <DIO_EnuSetPinValue>
		DIO_EnuSetPinValue (CLCD_D7_PORT , CLCD_D7_PIN , GET_BIT(Copy_u8Value , 7));
    169c:	89 81       	ldd	r24, Y+1	; 0x01
    169e:	98 2f       	mov	r25, r24
    16a0:	99 1f       	adc	r25, r25
    16a2:	99 27       	eor	r25, r25
    16a4:	99 1f       	adc	r25, r25
    16a6:	83 e0       	ldi	r24, 0x03	; 3
    16a8:	67 e0       	ldi	r22, 0x07	; 7
    16aa:	49 2f       	mov	r20, r25
    16ac:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <DIO_EnuSetPinValue>
		DIO_EnuSetPinValue (CLCD_D4_PORT , CLCD_D4_PIN , GET_BIT(Copy_u8Value , 4));
		DIO_EnuSetPinValue (CLCD_D5_PORT , CLCD_D5_PIN , GET_BIT(Copy_u8Value , 5));
		DIO_EnuSetPinValue (CLCD_D6_PORT , CLCD_D6_PIN , GET_BIT(Copy_u8Value , 6));
		DIO_EnuSetPinValue (CLCD_D7_PORT , CLCD_D7_PIN , GET_BIT(Copy_u8Value , 7));
	}
}
    16b0:	0f 90       	pop	r0
    16b2:	cf 91       	pop	r28
    16b4:	df 91       	pop	r29
    16b6:	08 95       	ret

000016b8 <CLCD_voidWriteString>:

void CLCD_voidWriteString(u8 *Copy_pu8Data)
{
    16b8:	df 93       	push	r29
    16ba:	cf 93       	push	r28
    16bc:	00 d0       	rcall	.+0      	; 0x16be <CLCD_voidWriteString+0x6>
    16be:	0f 92       	push	r0
    16c0:	cd b7       	in	r28, 0x3d	; 61
    16c2:	de b7       	in	r29, 0x3e	; 62
    16c4:	9b 83       	std	Y+3, r25	; 0x03
    16c6:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0 ;
    16c8:	19 82       	std	Y+1, r1	; 0x01
    16ca:	0e c0       	rjmp	.+28     	; 0x16e8 <CLCD_voidWriteString+0x30>
	while (Copy_pu8Data[i] != '\0')
	{
		CLCD_voidSendData(Copy_pu8Data[i]);
    16cc:	89 81       	ldd	r24, Y+1	; 0x01
    16ce:	28 2f       	mov	r18, r24
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	8a 81       	ldd	r24, Y+2	; 0x02
    16d4:	9b 81       	ldd	r25, Y+3	; 0x03
    16d6:	fc 01       	movw	r30, r24
    16d8:	e2 0f       	add	r30, r18
    16da:	f3 1f       	adc	r31, r19
    16dc:	80 81       	ld	r24, Z
    16de:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
		i++;
    16e2:	89 81       	ldd	r24, Y+1	; 0x01
    16e4:	8f 5f       	subi	r24, 0xFF	; 255
    16e6:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_voidWriteString(u8 *Copy_pu8Data)
{
	u8 i=0 ;
	while (Copy_pu8Data[i] != '\0')
    16e8:	89 81       	ldd	r24, Y+1	; 0x01
    16ea:	28 2f       	mov	r18, r24
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	8a 81       	ldd	r24, Y+2	; 0x02
    16f0:	9b 81       	ldd	r25, Y+3	; 0x03
    16f2:	fc 01       	movw	r30, r24
    16f4:	e2 0f       	add	r30, r18
    16f6:	f3 1f       	adc	r31, r19
    16f8:	80 81       	ld	r24, Z
    16fa:	88 23       	and	r24, r24
    16fc:	39 f7       	brne	.-50     	; 0x16cc <CLCD_voidWriteString+0x14>
	{
		CLCD_voidSendData(Copy_pu8Data[i]);
		i++;
	}

}
    16fe:	0f 90       	pop	r0
    1700:	0f 90       	pop	r0
    1702:	0f 90       	pop	r0
    1704:	cf 91       	pop	r28
    1706:	df 91       	pop	r29
    1708:	08 95       	ret

0000170a <CLCD_GoToXY>:
/* location of cursor */
void CLCD_GoToXY (u8 CopyRowNb , u8 CopyColNb)
{
    170a:	df 93       	push	r29
    170c:	cf 93       	push	r28
    170e:	00 d0       	rcall	.+0      	; 0x1710 <CLCD_GoToXY+0x6>
    1710:	00 d0       	rcall	.+0      	; 0x1712 <CLCD_GoToXY+0x8>
    1712:	cd b7       	in	r28, 0x3d	; 61
    1714:	de b7       	in	r29, 0x3e	; 62
    1716:	89 83       	std	Y+1, r24	; 0x01
    1718:	6a 83       	std	Y+2, r22	; 0x02
	/*u8 arr[5]={0x80,0xc0};
	CLCD_voidSendCmnd(arr[CopyRowNb-1] + CopyColNb -1);
	_delay_us(100);*/
	switch (CopyRowNb)
    171a:	89 81       	ldd	r24, Y+1	; 0x01
    171c:	28 2f       	mov	r18, r24
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	3c 83       	std	Y+4, r19	; 0x04
    1722:	2b 83       	std	Y+3, r18	; 0x03
    1724:	8b 81       	ldd	r24, Y+3	; 0x03
    1726:	9c 81       	ldd	r25, Y+4	; 0x04
    1728:	00 97       	sbiw	r24, 0x00	; 0
    172a:	31 f0       	breq	.+12     	; 0x1738 <CLCD_GoToXY+0x2e>
    172c:	2b 81       	ldd	r18, Y+3	; 0x03
    172e:	3c 81       	ldd	r19, Y+4	; 0x04
    1730:	21 30       	cpi	r18, 0x01	; 1
    1732:	31 05       	cpc	r19, r1
    1734:	31 f0       	breq	.+12     	; 0x1742 <CLCD_GoToXY+0x38>
    1736:	0a c0       	rjmp	.+20     	; 0x174c <CLCD_GoToXY+0x42>
	{
	case(0):
			{
		CLCD_voidSendCmnd(CopyColNb | 0x80);
    1738:	8a 81       	ldd	r24, Y+2	; 0x02
    173a:	80 68       	ori	r24, 0x80	; 128
    173c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCmnd>
    1740:	05 c0       	rjmp	.+10     	; 0x174c <CLCD_GoToXY+0x42>
		break;
			}
	case(1):
	    	{
		CLCD_voidSendCmnd((CopyColNb + 0x40)|0x80);
    1742:	8a 81       	ldd	r24, Y+2	; 0x02
    1744:	80 5c       	subi	r24, 0xC0	; 192
    1746:	80 68       	ori	r24, 0x80	; 128
    1748:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCmnd>
		break;
	    	}
	}
}
    174c:	0f 90       	pop	r0
    174e:	0f 90       	pop	r0
    1750:	0f 90       	pop	r0
    1752:	0f 90       	pop	r0
    1754:	cf 91       	pop	r28
    1756:	df 91       	pop	r29
    1758:	08 95       	ret

0000175a <LCD_Num>:
void LCD_Num(u16 num)
{
    175a:	df 93       	push	r29
    175c:	cf 93       	push	r28
    175e:	cd b7       	in	r28, 0x3d	; 61
    1760:	de b7       	in	r29, 0x3e	; 62
    1762:	66 97       	sbiw	r28, 0x16	; 22
    1764:	0f b6       	in	r0, 0x3f	; 63
    1766:	f8 94       	cli
    1768:	de bf       	out	0x3e, r29	; 62
    176a:	0f be       	out	0x3f, r0	; 63
    176c:	cd bf       	out	0x3d, r28	; 61
    176e:	9e 8b       	std	Y+22, r25	; 0x16
    1770:	8d 8b       	std	Y+21, r24	; 0x15


}*/

u8 buff[20];
itoa(num,buff,10);
    1772:	8d 89       	ldd	r24, Y+21	; 0x15
    1774:	9e 89       	ldd	r25, Y+22	; 0x16
    1776:	9e 01       	movw	r18, r28
    1778:	2f 5f       	subi	r18, 0xFF	; 255
    177a:	3f 4f       	sbci	r19, 0xFF	; 255
    177c:	b9 01       	movw	r22, r18
    177e:	4a e0       	ldi	r20, 0x0A	; 10
    1780:	50 e0       	ldi	r21, 0x00	; 0
    1782:	0e 94 53 13 	call	0x26a6	; 0x26a6 <itoa>
CLCD_voidWriteString(buff);
    1786:	ce 01       	movw	r24, r28
    1788:	01 96       	adiw	r24, 0x01	; 1
    178a:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <CLCD_voidWriteString>

}
    178e:	66 96       	adiw	r28, 0x16	; 22
    1790:	0f b6       	in	r0, 0x3f	; 63
    1792:	f8 94       	cli
    1794:	de bf       	out	0x3e, r29	; 62
    1796:	0f be       	out	0x3f, r0	; 63
    1798:	cd bf       	out	0x3d, r28	; 61
    179a:	cf 91       	pop	r28
    179c:	df 91       	pop	r29
    179e:	08 95       	ret

000017a0 <LCD_Hamoksha>:




void LCD_Hamoksha (char num)
{
    17a0:	df 93       	push	r29
    17a2:	cf 93       	push	r28
    17a4:	cd b7       	in	r28, 0x3d	; 61
    17a6:	de b7       	in	r29, 0x3e	; 62
    17a8:	2f 97       	sbiw	r28, 0x0f	; 15
    17aa:	0f b6       	in	r0, 0x3f	; 63
    17ac:	f8 94       	cli
    17ae:	de bf       	out	0x3e, r29	; 62
    17b0:	0f be       	out	0x3f, r0	; 63
    17b2:	cd bf       	out	0x3d, r28	; 61
    17b4:	8f 87       	std	Y+15, r24	; 0x0f
	if (num==1)
    17b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    17b8:	81 30       	cpi	r24, 0x01	; 1
    17ba:	11 f5       	brne	.+68     	; 0x1800 <LCD_Hamoksha+0x60>
	{
		/*set CGRAM address */
		CLCD_voidSendCmnd(0b01000000);
    17bc:	80 e4       	ldi	r24, 0x40	; 64
    17be:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCmnd>
		CLCD_voidSendData(0b00001110);
    17c2:	8e e0       	ldi	r24, 0x0E	; 14
    17c4:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
		CLCD_voidSendData(0b00001110);
    17c8:	8e e0       	ldi	r24, 0x0E	; 14
    17ca:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
		CLCD_voidSendData(0b00000100);
    17ce:	84 e0       	ldi	r24, 0x04	; 4
    17d0:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
		CLCD_voidSendData(0b00011110);
    17d4:	8e e1       	ldi	r24, 0x1E	; 30
    17d6:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
		CLCD_voidSendData(0b00010110);
    17da:	86 e1       	ldi	r24, 0x16	; 22
    17dc:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
		CLCD_voidSendData(0b00000100);
    17e0:	84 e0       	ldi	r24, 0x04	; 4
    17e2:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
		CLCD_voidSendData(0b00001010);
    17e6:	8a e0       	ldi	r24, 0x0A	; 10
    17e8:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
		CLCD_voidSendData(0b00010001);
    17ec:	81 e1       	ldi	r24, 0x11	; 17
    17ee:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>

		/*set address of DDRAM */
		CLCD_voidSendCmnd(0xc5);
    17f2:	85 ec       	ldi	r24, 0xC5	; 197
    17f4:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCmnd>
		CLCD_voidSendData(0);
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
    17fe:	bc c0       	rjmp	.+376    	; 0x1978 <LCD_Hamoksha+0x1d8>
	}
	else if (num==0)
    1800:	8f 85       	ldd	r24, Y+15	; 0x0f
    1802:	88 23       	and	r24, r24
    1804:	11 f5       	brne	.+68     	; 0x184a <LCD_Hamoksha+0xaa>
	{
		/*set CGRAM address */
		CLCD_voidSendCmnd(0b01000000);
    1806:	80 e4       	ldi	r24, 0x40	; 64
    1808:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCmnd>
		CLCD_voidSendData(0b00001110);
    180c:	8e e0       	ldi	r24, 0x0E	; 14
    180e:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
		CLCD_voidSendData(0b00001110);
    1812:	8e e0       	ldi	r24, 0x0E	; 14
    1814:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
		CLCD_voidSendData(0b00010100);
    1818:	84 e1       	ldi	r24, 0x14	; 20
    181a:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
		CLCD_voidSendData(0b00011110);
    181e:	8e e1       	ldi	r24, 0x1E	; 30
    1820:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
		CLCD_voidSendData(0b00000110);
    1824:	86 e0       	ldi	r24, 0x06	; 6
    1826:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
		CLCD_voidSendData(0b00000100);
    182a:	84 e0       	ldi	r24, 0x04	; 4
    182c:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
		CLCD_voidSendData(0b00001010);
    1830:	8a e0       	ldi	r24, 0x0A	; 10
    1832:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
		CLCD_voidSendData(0b00010001);
    1836:	81 e1       	ldi	r24, 0x11	; 17
    1838:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>

		/*set address of DDRAM */
		CLCD_voidSendCmnd(0xc8);
    183c:	88 ec       	ldi	r24, 0xC8	; 200
    183e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCmnd>
		CLCD_voidSendData(0);
    1842:	80 e0       	ldi	r24, 0x00	; 0
    1844:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
    1848:	97 c0       	rjmp	.+302    	; 0x1978 <LCD_Hamoksha+0x1d8>
	}
	else if(num ==2)
    184a:	8f 85       	ldd	r24, Y+15	; 0x0f
    184c:	82 30       	cpi	r24, 0x02	; 2
    184e:	09 f0       	breq	.+2      	; 0x1852 <LCD_Hamoksha+0xb2>
    1850:	93 c0       	rjmp	.+294    	; 0x1978 <LCD_Hamoksha+0x1d8>
	{
		/*set CGRAM address */
		CLCD_voidSendCmnd(0b01000000);
    1852:	80 e4       	ldi	r24, 0x40	; 64
    1854:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCmnd>
		CLCD_voidSendData(0b00010001);
    1858:	81 e1       	ldi	r24, 0x11	; 17
    185a:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
		CLCD_voidSendData(0b00011111);
    185e:	8f e1       	ldi	r24, 0x1F	; 31
    1860:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
		CLCD_voidSendData(0b00011111);
    1864:	8f e1       	ldi	r24, 0x1F	; 31
    1866:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
		CLCD_voidSendData(0b00010101);
    186a:	85 e1       	ldi	r24, 0x15	; 21
    186c:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
		CLCD_voidSendData(0b00011111);
    1870:	8f e1       	ldi	r24, 0x1F	; 31
    1872:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
		CLCD_voidSendData(0b00000100);
    1876:	84 e0       	ldi	r24, 0x04	; 4
    1878:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
		CLCD_voidSendData(0b00001010);
    187c:	8a e0       	ldi	r24, 0x0A	; 10
    187e:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
		CLCD_voidSendData(0b00010001);
    1882:	81 e1       	ldi	r24, 0x11	; 17
    1884:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
		/*set address of DDRAM */
		CLCD_voidSendCmnd(0xc9);
    1888:	89 ec       	ldi	r24, 0xC9	; 201
    188a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCmnd>
		CLCD_voidSendData(8);
    188e:	88 e0       	ldi	r24, 0x08	; 8
    1890:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
    1894:	80 e0       	ldi	r24, 0x00	; 0
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	a8 e4       	ldi	r26, 0x48	; 72
    189a:	b3 e4       	ldi	r27, 0x43	; 67
    189c:	8b 87       	std	Y+11, r24	; 0x0b
    189e:	9c 87       	std	Y+12, r25	; 0x0c
    18a0:	ad 87       	std	Y+13, r26	; 0x0d
    18a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    18a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    18a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    18aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	4a ef       	ldi	r20, 0xFA	; 250
    18b2:	54 e4       	ldi	r21, 0x44	; 68
    18b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b8:	dc 01       	movw	r26, r24
    18ba:	cb 01       	movw	r24, r22
    18bc:	8f 83       	std	Y+7, r24	; 0x07
    18be:	98 87       	std	Y+8, r25	; 0x08
    18c0:	a9 87       	std	Y+9, r26	; 0x09
    18c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18c4:	6f 81       	ldd	r22, Y+7	; 0x07
    18c6:	78 85       	ldd	r23, Y+8	; 0x08
    18c8:	89 85       	ldd	r24, Y+9	; 0x09
    18ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    18cc:	20 e0       	ldi	r18, 0x00	; 0
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	40 e8       	ldi	r20, 0x80	; 128
    18d2:	5f e3       	ldi	r21, 0x3F	; 63
    18d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18d8:	88 23       	and	r24, r24
    18da:	2c f4       	brge	.+10     	; 0x18e6 <LCD_Hamoksha+0x146>
		__ticks = 1;
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	9e 83       	std	Y+6, r25	; 0x06
    18e2:	8d 83       	std	Y+5, r24	; 0x05
    18e4:	3f c0       	rjmp	.+126    	; 0x1964 <LCD_Hamoksha+0x1c4>
	else if (__tmp > 65535)
    18e6:	6f 81       	ldd	r22, Y+7	; 0x07
    18e8:	78 85       	ldd	r23, Y+8	; 0x08
    18ea:	89 85       	ldd	r24, Y+9	; 0x09
    18ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ee:	20 e0       	ldi	r18, 0x00	; 0
    18f0:	3f ef       	ldi	r19, 0xFF	; 255
    18f2:	4f e7       	ldi	r20, 0x7F	; 127
    18f4:	57 e4       	ldi	r21, 0x47	; 71
    18f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18fa:	18 16       	cp	r1, r24
    18fc:	4c f5       	brge	.+82     	; 0x1950 <LCD_Hamoksha+0x1b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1900:	7c 85       	ldd	r23, Y+12	; 0x0c
    1902:	8d 85       	ldd	r24, Y+13	; 0x0d
    1904:	9e 85       	ldd	r25, Y+14	; 0x0e
    1906:	20 e0       	ldi	r18, 0x00	; 0
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	40 e2       	ldi	r20, 0x20	; 32
    190c:	51 e4       	ldi	r21, 0x41	; 65
    190e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1912:	dc 01       	movw	r26, r24
    1914:	cb 01       	movw	r24, r22
    1916:	bc 01       	movw	r22, r24
    1918:	cd 01       	movw	r24, r26
    191a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    191e:	dc 01       	movw	r26, r24
    1920:	cb 01       	movw	r24, r22
    1922:	9e 83       	std	Y+6, r25	; 0x06
    1924:	8d 83       	std	Y+5, r24	; 0x05
    1926:	0f c0       	rjmp	.+30     	; 0x1946 <LCD_Hamoksha+0x1a6>
    1928:	88 ec       	ldi	r24, 0xC8	; 200
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	9c 83       	std	Y+4, r25	; 0x04
    192e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1930:	8b 81       	ldd	r24, Y+3	; 0x03
    1932:	9c 81       	ldd	r25, Y+4	; 0x04
    1934:	01 97       	sbiw	r24, 0x01	; 1
    1936:	f1 f7       	brne	.-4      	; 0x1934 <LCD_Hamoksha+0x194>
    1938:	9c 83       	std	Y+4, r25	; 0x04
    193a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    193c:	8d 81       	ldd	r24, Y+5	; 0x05
    193e:	9e 81       	ldd	r25, Y+6	; 0x06
    1940:	01 97       	sbiw	r24, 0x01	; 1
    1942:	9e 83       	std	Y+6, r25	; 0x06
    1944:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1946:	8d 81       	ldd	r24, Y+5	; 0x05
    1948:	9e 81       	ldd	r25, Y+6	; 0x06
    194a:	00 97       	sbiw	r24, 0x00	; 0
    194c:	69 f7       	brne	.-38     	; 0x1928 <LCD_Hamoksha+0x188>
    194e:	14 c0       	rjmp	.+40     	; 0x1978 <LCD_Hamoksha+0x1d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1950:	6f 81       	ldd	r22, Y+7	; 0x07
    1952:	78 85       	ldd	r23, Y+8	; 0x08
    1954:	89 85       	ldd	r24, Y+9	; 0x09
    1956:	9a 85       	ldd	r25, Y+10	; 0x0a
    1958:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    195c:	dc 01       	movw	r26, r24
    195e:	cb 01       	movw	r24, r22
    1960:	9e 83       	std	Y+6, r25	; 0x06
    1962:	8d 83       	std	Y+5, r24	; 0x05
    1964:	8d 81       	ldd	r24, Y+5	; 0x05
    1966:	9e 81       	ldd	r25, Y+6	; 0x06
    1968:	9a 83       	std	Y+2, r25	; 0x02
    196a:	89 83       	std	Y+1, r24	; 0x01
    196c:	89 81       	ldd	r24, Y+1	; 0x01
    196e:	9a 81       	ldd	r25, Y+2	; 0x02
    1970:	01 97       	sbiw	r24, 0x01	; 1
    1972:	f1 f7       	brne	.-4      	; 0x1970 <LCD_Hamoksha+0x1d0>
    1974:	9a 83       	std	Y+2, r25	; 0x02
    1976:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(200);
	}
}
    1978:	2f 96       	adiw	r28, 0x0f	; 15
    197a:	0f b6       	in	r0, 0x3f	; 63
    197c:	f8 94       	cli
    197e:	de bf       	out	0x3e, r29	; 62
    1980:	0f be       	out	0x3f, r0	; 63
    1982:	cd bf       	out	0x3d, r28	; 61
    1984:	cf 91       	pop	r28
    1986:	df 91       	pop	r29
    1988:	08 95       	ret

0000198a <LCD_Game1>:

void LCD_Game1(void)
{
    198a:	df 93       	push	r29
    198c:	cf 93       	push	r28
    198e:	cd b7       	in	r28, 0x3d	; 61
    1990:	de b7       	in	r29, 0x3e	; 62
	/*set CGRAM address */
	CLCD_voidSendCmnd(0b01000000);
    1992:	80 e4       	ldi	r24, 0x40	; 64
    1994:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCmnd>
	CLCD_voidSendData(0b00011000);
    1998:	88 e1       	ldi	r24, 0x18	; 24
    199a:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
	CLCD_voidSendData(0b00011000);
    199e:	88 e1       	ldi	r24, 0x18	; 24
    19a0:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
	CLCD_voidSendData(0b00011000);
    19a4:	88 e1       	ldi	r24, 0x18	; 24
    19a6:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
	CLCD_voidSendData(0b00011000);
    19aa:	88 e1       	ldi	r24, 0x18	; 24
    19ac:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
	CLCD_voidSendData(0b00011000);
    19b0:	88 e1       	ldi	r24, 0x18	; 24
    19b2:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
	CLCD_voidSendData(0b00011000);
    19b6:	88 e1       	ldi	r24, 0x18	; 24
    19b8:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
	CLCD_voidSendData(0b00011000);
    19bc:	88 e1       	ldi	r24, 0x18	; 24
    19be:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
	CLCD_voidSendData(0b00011000);
    19c2:	88 e1       	ldi	r24, 0x18	; 24
    19c4:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
	/*set address of DDRAM */
	CLCD_voidSendCmnd(0x80);
    19c8:	80 e8       	ldi	r24, 0x80	; 128
    19ca:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCmnd>
	CLCD_voidSendData(0);
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
}
    19d4:	cf 91       	pop	r28
    19d6:	df 91       	pop	r29
    19d8:	08 95       	ret

000019da <LCD_Game2>:
void LCD_Game2(void)
{
    19da:	df 93       	push	r29
    19dc:	cf 93       	push	r28
    19de:	cd b7       	in	r28, 0x3d	; 61
    19e0:	de b7       	in	r29, 0x3e	; 62
	/*set CGRAM address */
	CLCD_voidSendCmnd(0b01000000);
    19e2:	80 e4       	ldi	r24, 0x40	; 64
    19e4:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCmnd>
	CLCD_voidSendData(0b00000110);
    19e8:	86 e0       	ldi	r24, 0x06	; 6
    19ea:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
	CLCD_voidSendData(0b00000110);
    19ee:	86 e0       	ldi	r24, 0x06	; 6
    19f0:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
	CLCD_voidSendData(0b00000110);
    19f4:	86 e0       	ldi	r24, 0x06	; 6
    19f6:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
	CLCD_voidSendData(0b00000110);
    19fa:	86 e0       	ldi	r24, 0x06	; 6
    19fc:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
	CLCD_voidSendData(0b00000110);
    1a00:	86 e0       	ldi	r24, 0x06	; 6
    1a02:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
	CLCD_voidSendData(0b00000110);
    1a06:	86 e0       	ldi	r24, 0x06	; 6
    1a08:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
	CLCD_voidSendData(0b00000110);
    1a0c:	86 e0       	ldi	r24, 0x06	; 6
    1a0e:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
	CLCD_voidSendData(0b00000110);
    1a12:	86 e0       	ldi	r24, 0x06	; 6
    1a14:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
	/*set address of DDRAM */
	CLCD_voidSendCmnd(0x8F);
    1a18:	8f e8       	ldi	r24, 0x8F	; 143
    1a1a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCmnd>
	CLCD_voidSendData(0);
    1a1e:	80 e0       	ldi	r24, 0x00	; 0
    1a20:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
}
    1a24:	cf 91       	pop	r28
    1a26:	df 91       	pop	r29
    1a28:	08 95       	ret

00001a2a <LCD_Gameball>:

void LCD_Gameball(u8 add)
{
    1a2a:	df 93       	push	r29
    1a2c:	cf 93       	push	r28
    1a2e:	0f 92       	push	r0
    1a30:	cd b7       	in	r28, 0x3d	; 61
    1a32:	de b7       	in	r29, 0x3e	; 62
    1a34:	89 83       	std	Y+1, r24	; 0x01
	// if (x==1)
	// {
	/*set CGRAM address */
	CLCD_voidSendCmnd(0b01000000);
    1a36:	80 e4       	ldi	r24, 0x40	; 64
    1a38:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCmnd>
	CLCD_voidSendData(0b00000000);
    1a3c:	80 e0       	ldi	r24, 0x00	; 0
    1a3e:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
	CLCD_voidSendData(0b00000100);
    1a42:	84 e0       	ldi	r24, 0x04	; 4
    1a44:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
	CLCD_voidSendData(0b00001110);
    1a48:	8e e0       	ldi	r24, 0x0E	; 14
    1a4a:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
	CLCD_voidSendData(0b00001110);
    1a4e:	8e e0       	ldi	r24, 0x0E	; 14
    1a50:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
	CLCD_voidSendData(0b00001110);
    1a54:	8e e0       	ldi	r24, 0x0E	; 14
    1a56:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
	CLCD_voidSendData(0b00001110);
    1a5a:	8e e0       	ldi	r24, 0x0E	; 14
    1a5c:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
	CLCD_voidSendData(0b00000100);
    1a60:	84 e0       	ldi	r24, 0x04	; 4
    1a62:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
	CLCD_voidSendData(0b00000000);
    1a66:	80 e0       	ldi	r24, 0x00	; 0
    1a68:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
	/*set address of DDRAM */
	CLCD_voidSendCmnd(add);
    1a6c:	89 81       	ldd	r24, Y+1	; 0x01
    1a6e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCmnd>
	CLCD_voidSendData(0);
    1a72:	80 e0       	ldi	r24, 0x00	; 0
    1a74:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
		 			CLCD_voidSendData(0b00000000);*/
	/*set address of DDRAM */
	/*CLCD_voidSendCmnd(add);
		 			CLCD_voidSendData(0);
	 }*/
}
    1a78:	0f 90       	pop	r0
    1a7a:	cf 91       	pop	r28
    1a7c:	df 91       	pop	r29
    1a7e:	08 95       	ret

00001a80 <Delay_ms>:
#include "STD_TYPES.h"
void Delay_ms(u32 DelayValue)
{
    1a80:	df 93       	push	r29
    1a82:	cf 93       	push	r28
    1a84:	cd b7       	in	r28, 0x3d	; 61
    1a86:	de b7       	in	r29, 0x3e	; 62
    1a88:	2c 97       	sbiw	r28, 0x0c	; 12
    1a8a:	0f b6       	in	r0, 0x3f	; 63
    1a8c:	f8 94       	cli
    1a8e:	de bf       	out	0x3e, r29	; 62
    1a90:	0f be       	out	0x3f, r0	; 63
    1a92:	cd bf       	out	0x3d, r28	; 61
    1a94:	69 87       	std	Y+9, r22	; 0x09
    1a96:	7a 87       	std	Y+10, r23	; 0x0a
    1a98:	8b 87       	std	Y+11, r24	; 0x0b
    1a9a:	9c 87       	std	Y+12, r25	; 0x0c
	u32 i;
	u32 counts=370*DelayValue;
    1a9c:	89 85       	ldd	r24, Y+9	; 0x09
    1a9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa0:	ab 85       	ldd	r26, Y+11	; 0x0b
    1aa2:	bc 85       	ldd	r27, Y+12	; 0x0c
    1aa4:	22 e7       	ldi	r18, 0x72	; 114
    1aa6:	31 e0       	ldi	r19, 0x01	; 1
    1aa8:	40 e0       	ldi	r20, 0x00	; 0
    1aaa:	50 e0       	ldi	r21, 0x00	; 0
    1aac:	bc 01       	movw	r22, r24
    1aae:	cd 01       	movw	r24, r26
    1ab0:	0e 94 db 12 	call	0x25b6	; 0x25b6 <__mulsi3>
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	cb 01       	movw	r24, r22
    1ab8:	89 83       	std	Y+1, r24	; 0x01
    1aba:	9a 83       	std	Y+2, r25	; 0x02
    1abc:	ab 83       	std	Y+3, r26	; 0x03
    1abe:	bc 83       	std	Y+4, r27	; 0x04
	for(i=0;i<counts;i++)
    1ac0:	1d 82       	std	Y+5, r1	; 0x05
    1ac2:	1e 82       	std	Y+6, r1	; 0x06
    1ac4:	1f 82       	std	Y+7, r1	; 0x07
    1ac6:	18 86       	std	Y+8, r1	; 0x08
    1ac8:	0c c0       	rjmp	.+24     	; 0x1ae2 <Delay_ms+0x62>
	{
		asm("nop");
    1aca:	00 00       	nop
#include "STD_TYPES.h"
void Delay_ms(u32 DelayValue)
{
	u32 i;
	u32 counts=370*DelayValue;
	for(i=0;i<counts;i++)
    1acc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ace:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad0:	af 81       	ldd	r26, Y+7	; 0x07
    1ad2:	b8 85       	ldd	r27, Y+8	; 0x08
    1ad4:	01 96       	adiw	r24, 0x01	; 1
    1ad6:	a1 1d       	adc	r26, r1
    1ad8:	b1 1d       	adc	r27, r1
    1ada:	8d 83       	std	Y+5, r24	; 0x05
    1adc:	9e 83       	std	Y+6, r25	; 0x06
    1ade:	af 83       	std	Y+7, r26	; 0x07
    1ae0:	b8 87       	std	Y+8, r27	; 0x08
    1ae2:	2d 81       	ldd	r18, Y+5	; 0x05
    1ae4:	3e 81       	ldd	r19, Y+6	; 0x06
    1ae6:	4f 81       	ldd	r20, Y+7	; 0x07
    1ae8:	58 85       	ldd	r21, Y+8	; 0x08
    1aea:	89 81       	ldd	r24, Y+1	; 0x01
    1aec:	9a 81       	ldd	r25, Y+2	; 0x02
    1aee:	ab 81       	ldd	r26, Y+3	; 0x03
    1af0:	bc 81       	ldd	r27, Y+4	; 0x04
    1af2:	28 17       	cp	r18, r24
    1af4:	39 07       	cpc	r19, r25
    1af6:	4a 07       	cpc	r20, r26
    1af8:	5b 07       	cpc	r21, r27
    1afa:	38 f3       	brcs	.-50     	; 0x1aca <Delay_ms+0x4a>
	{
		asm("nop");
	}	
}
    1afc:	2c 96       	adiw	r28, 0x0c	; 12
    1afe:	0f b6       	in	r0, 0x3f	; 63
    1b00:	f8 94       	cli
    1b02:	de bf       	out	0x3e, r29	; 62
    1b04:	0f be       	out	0x3f, r0	; 63
    1b06:	cd bf       	out	0x3d, r28	; 61
    1b08:	cf 91       	pop	r28
    1b0a:	df 91       	pop	r29
    1b0c:	08 95       	ret

00001b0e <Delay_us>:
void Delay_us(u32 DelayValue)
{
    1b0e:	df 93       	push	r29
    1b10:	cf 93       	push	r28
    1b12:	cd b7       	in	r28, 0x3d	; 61
    1b14:	de b7       	in	r29, 0x3e	; 62
    1b16:	2c 97       	sbiw	r28, 0x0c	; 12
    1b18:	0f b6       	in	r0, 0x3f	; 63
    1b1a:	f8 94       	cli
    1b1c:	de bf       	out	0x3e, r29	; 62
    1b1e:	0f be       	out	0x3f, r0	; 63
    1b20:	cd bf       	out	0x3d, r28	; 61
    1b22:	69 87       	std	Y+9, r22	; 0x09
    1b24:	7a 87       	std	Y+10, r23	; 0x0a
    1b26:	8b 87       	std	Y+11, r24	; 0x0b
    1b28:	9c 87       	std	Y+12, r25	; 0x0c
	u32 i;
	u32 counts=(((DelayValue-47)*375)/1000);
    1b2a:	89 85       	ldd	r24, Y+9	; 0x09
    1b2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b2e:	ab 85       	ldd	r26, Y+11	; 0x0b
    1b30:	bc 85       	ldd	r27, Y+12	; 0x0c
    1b32:	27 e7       	ldi	r18, 0x77	; 119
    1b34:	31 e0       	ldi	r19, 0x01	; 1
    1b36:	40 e0       	ldi	r20, 0x00	; 0
    1b38:	50 e0       	ldi	r21, 0x00	; 0
    1b3a:	bc 01       	movw	r22, r24
    1b3c:	cd 01       	movw	r24, r26
    1b3e:	0e 94 db 12 	call	0x25b6	; 0x25b6 <__mulsi3>
    1b42:	dc 01       	movw	r26, r24
    1b44:	cb 01       	movw	r24, r22
    1b46:	89 5d       	subi	r24, 0xD9	; 217
    1b48:	94 44       	sbci	r25, 0x44	; 68
    1b4a:	a0 40       	sbci	r26, 0x00	; 0
    1b4c:	b0 40       	sbci	r27, 0x00	; 0
    1b4e:	28 ee       	ldi	r18, 0xE8	; 232
    1b50:	33 e0       	ldi	r19, 0x03	; 3
    1b52:	40 e0       	ldi	r20, 0x00	; 0
    1b54:	50 e0       	ldi	r21, 0x00	; 0
    1b56:	bc 01       	movw	r22, r24
    1b58:	cd 01       	movw	r24, r26
    1b5a:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <__udivmodsi4>
    1b5e:	da 01       	movw	r26, r20
    1b60:	c9 01       	movw	r24, r18
    1b62:	89 83       	std	Y+1, r24	; 0x01
    1b64:	9a 83       	std	Y+2, r25	; 0x02
    1b66:	ab 83       	std	Y+3, r26	; 0x03
    1b68:	bc 83       	std	Y+4, r27	; 0x04
	for(i=0;i<counts;i++)
    1b6a:	1d 82       	std	Y+5, r1	; 0x05
    1b6c:	1e 82       	std	Y+6, r1	; 0x06
    1b6e:	1f 82       	std	Y+7, r1	; 0x07
    1b70:	18 86       	std	Y+8, r1	; 0x08
    1b72:	0c c0       	rjmp	.+24     	; 0x1b8c <Delay_us+0x7e>
	{
		asm("nop");
    1b74:	00 00       	nop
}
void Delay_us(u32 DelayValue)
{
	u32 i;
	u32 counts=(((DelayValue-47)*375)/1000);
	for(i=0;i<counts;i++)
    1b76:	8d 81       	ldd	r24, Y+5	; 0x05
    1b78:	9e 81       	ldd	r25, Y+6	; 0x06
    1b7a:	af 81       	ldd	r26, Y+7	; 0x07
    1b7c:	b8 85       	ldd	r27, Y+8	; 0x08
    1b7e:	01 96       	adiw	r24, 0x01	; 1
    1b80:	a1 1d       	adc	r26, r1
    1b82:	b1 1d       	adc	r27, r1
    1b84:	8d 83       	std	Y+5, r24	; 0x05
    1b86:	9e 83       	std	Y+6, r25	; 0x06
    1b88:	af 83       	std	Y+7, r26	; 0x07
    1b8a:	b8 87       	std	Y+8, r27	; 0x08
    1b8c:	2d 81       	ldd	r18, Y+5	; 0x05
    1b8e:	3e 81       	ldd	r19, Y+6	; 0x06
    1b90:	4f 81       	ldd	r20, Y+7	; 0x07
    1b92:	58 85       	ldd	r21, Y+8	; 0x08
    1b94:	89 81       	ldd	r24, Y+1	; 0x01
    1b96:	9a 81       	ldd	r25, Y+2	; 0x02
    1b98:	ab 81       	ldd	r26, Y+3	; 0x03
    1b9a:	bc 81       	ldd	r27, Y+4	; 0x04
    1b9c:	28 17       	cp	r18, r24
    1b9e:	39 07       	cpc	r19, r25
    1ba0:	4a 07       	cpc	r20, r26
    1ba2:	5b 07       	cpc	r21, r27
    1ba4:	38 f3       	brcs	.-50     	; 0x1b74 <Delay_us+0x66>
	{
		asm("nop");
	}
    1ba6:	2c 96       	adiw	r28, 0x0c	; 12
    1ba8:	0f b6       	in	r0, 0x3f	; 63
    1baa:	f8 94       	cli
    1bac:	de bf       	out	0x3e, r29	; 62
    1bae:	0f be       	out	0x3f, r0	; 63
    1bb0:	cd bf       	out	0x3d, r28	; 61
    1bb2:	cf 91       	pop	r28
    1bb4:	df 91       	pop	r29
    1bb6:	08 95       	ret

00001bb8 <DIO_EnuSetPinDirection>:




Error_Status DIO_EnuSetPinDirection (u8 Copy_u8PortNumber , u8 Copy_u8PinNumber , u8 Copy_u8PinDirection)  //هنا كنت بعرف البناية دي انبوت ولا اوتبوت
{		
    1bb8:	df 93       	push	r29
    1bba:	cf 93       	push	r28
    1bbc:	00 d0       	rcall	.+0      	; 0x1bbe <DIO_EnuSetPinDirection+0x6>
    1bbe:	00 d0       	rcall	.+0      	; 0x1bc0 <DIO_EnuSetPinDirection+0x8>
    1bc0:	00 d0       	rcall	.+0      	; 0x1bc2 <DIO_EnuSetPinDirection+0xa>
    1bc2:	cd b7       	in	r28, 0x3d	; 61
    1bc4:	de b7       	in	r29, 0x3e	; 62
    1bc6:	8a 83       	std	Y+2, r24	; 0x02
    1bc8:	6b 83       	std	Y+3, r22	; 0x03
    1bca:	4c 83       	std	Y+4, r20	; 0x04
		Error_Status state = OK ;
    1bcc:	19 82       	std	Y+1, r1	; 0x01
		if(Copy_u8PortNumber >= DIO_PORTA && Copy_u8PortNumber <= DIO_PORTD && Copy_u8PinNumber >= DIO_PIN_0 && Copy_u8PinNumber <= DIO_PIN_7 && (Copy_u8PinDirection == DIO_PIN_OUTPUT || Copy_u8PinDirection == DIO_PIN_INPUT))
    1bce:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd0:	84 30       	cpi	r24, 0x04	; 4
    1bd2:	08 f0       	brcs	.+2      	; 0x1bd6 <DIO_EnuSetPinDirection+0x1e>
    1bd4:	dd c0       	rjmp	.+442    	; 0x1d90 <DIO_EnuSetPinDirection+0x1d8>
    1bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd8:	88 30       	cpi	r24, 0x08	; 8
    1bda:	08 f0       	brcs	.+2      	; 0x1bde <DIO_EnuSetPinDirection+0x26>
    1bdc:	d9 c0       	rjmp	.+434    	; 0x1d90 <DIO_EnuSetPinDirection+0x1d8>
    1bde:	8c 81       	ldd	r24, Y+4	; 0x04
    1be0:	81 30       	cpi	r24, 0x01	; 1
    1be2:	21 f0       	breq	.+8      	; 0x1bec <DIO_EnuSetPinDirection+0x34>
    1be4:	8c 81       	ldd	r24, Y+4	; 0x04
    1be6:	88 23       	and	r24, r24
    1be8:	09 f0       	breq	.+2      	; 0x1bec <DIO_EnuSetPinDirection+0x34>
    1bea:	d2 c0       	rjmp	.+420    	; 0x1d90 <DIO_EnuSetPinDirection+0x1d8>
		{
			switch(Copy_u8PortNumber)
    1bec:	8a 81       	ldd	r24, Y+2	; 0x02
    1bee:	28 2f       	mov	r18, r24
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	3e 83       	std	Y+6, r19	; 0x06
    1bf4:	2d 83       	std	Y+5, r18	; 0x05
    1bf6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bfa:	81 30       	cpi	r24, 0x01	; 1
    1bfc:	91 05       	cpc	r25, r1
    1bfe:	09 f4       	brne	.+2      	; 0x1c02 <DIO_EnuSetPinDirection+0x4a>
    1c00:	43 c0       	rjmp	.+134    	; 0x1c88 <DIO_EnuSetPinDirection+0xd0>
    1c02:	2d 81       	ldd	r18, Y+5	; 0x05
    1c04:	3e 81       	ldd	r19, Y+6	; 0x06
    1c06:	22 30       	cpi	r18, 0x02	; 2
    1c08:	31 05       	cpc	r19, r1
    1c0a:	2c f4       	brge	.+10     	; 0x1c16 <DIO_EnuSetPinDirection+0x5e>
    1c0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c10:	00 97       	sbiw	r24, 0x00	; 0
    1c12:	71 f0       	breq	.+28     	; 0x1c30 <DIO_EnuSetPinDirection+0x78>
    1c14:	bf c0       	rjmp	.+382    	; 0x1d94 <DIO_EnuSetPinDirection+0x1dc>
    1c16:	2d 81       	ldd	r18, Y+5	; 0x05
    1c18:	3e 81       	ldd	r19, Y+6	; 0x06
    1c1a:	22 30       	cpi	r18, 0x02	; 2
    1c1c:	31 05       	cpc	r19, r1
    1c1e:	09 f4       	brne	.+2      	; 0x1c22 <DIO_EnuSetPinDirection+0x6a>
    1c20:	5f c0       	rjmp	.+190    	; 0x1ce0 <DIO_EnuSetPinDirection+0x128>
    1c22:	8d 81       	ldd	r24, Y+5	; 0x05
    1c24:	9e 81       	ldd	r25, Y+6	; 0x06
    1c26:	83 30       	cpi	r24, 0x03	; 3
    1c28:	91 05       	cpc	r25, r1
    1c2a:	09 f4       	brne	.+2      	; 0x1c2e <DIO_EnuSetPinDirection+0x76>
    1c2c:	85 c0       	rjmp	.+266    	; 0x1d38 <DIO_EnuSetPinDirection+0x180>
    1c2e:	b2 c0       	rjmp	.+356    	; 0x1d94 <DIO_EnuSetPinDirection+0x1dc>
			{
				case DIO_PORTA :
				 if(Copy_u8PinDirection == DIO_PIN_INPUT)
    1c30:	8c 81       	ldd	r24, Y+4	; 0x04
    1c32:	88 23       	and	r24, r24
    1c34:	a9 f4       	brne	.+42     	; 0x1c60 <DIO_EnuSetPinDirection+0xa8>
				 {
					CLR_BIT(DDRA,Copy_u8PinNumber);
    1c36:	aa e3       	ldi	r26, 0x3A	; 58
    1c38:	b0 e0       	ldi	r27, 0x00	; 0
    1c3a:	ea e3       	ldi	r30, 0x3A	; 58
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	80 81       	ld	r24, Z
    1c40:	48 2f       	mov	r20, r24
    1c42:	8b 81       	ldd	r24, Y+3	; 0x03
    1c44:	28 2f       	mov	r18, r24
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	02 2e       	mov	r0, r18
    1c4e:	02 c0       	rjmp	.+4      	; 0x1c54 <DIO_EnuSetPinDirection+0x9c>
    1c50:	88 0f       	add	r24, r24
    1c52:	99 1f       	adc	r25, r25
    1c54:	0a 94       	dec	r0
    1c56:	e2 f7       	brpl	.-8      	; 0x1c50 <DIO_EnuSetPinDirection+0x98>
    1c58:	80 95       	com	r24
    1c5a:	84 23       	and	r24, r20
    1c5c:	8c 93       	st	X, r24
    1c5e:	9a c0       	rjmp	.+308    	; 0x1d94 <DIO_EnuSetPinDirection+0x1dc>
				 }
				 else
				 {
					SET_BIT(DDRA,Copy_u8PinNumber);
    1c60:	aa e3       	ldi	r26, 0x3A	; 58
    1c62:	b0 e0       	ldi	r27, 0x00	; 0
    1c64:	ea e3       	ldi	r30, 0x3A	; 58
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	80 81       	ld	r24, Z
    1c6a:	48 2f       	mov	r20, r24
    1c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6e:	28 2f       	mov	r18, r24
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	02 2e       	mov	r0, r18
    1c78:	02 c0       	rjmp	.+4      	; 0x1c7e <DIO_EnuSetPinDirection+0xc6>
    1c7a:	88 0f       	add	r24, r24
    1c7c:	99 1f       	adc	r25, r25
    1c7e:	0a 94       	dec	r0
    1c80:	e2 f7       	brpl	.-8      	; 0x1c7a <DIO_EnuSetPinDirection+0xc2>
    1c82:	84 2b       	or	r24, r20
    1c84:	8c 93       	st	X, r24
    1c86:	86 c0       	rjmp	.+268    	; 0x1d94 <DIO_EnuSetPinDirection+0x1dc>
				 }
				break; 
				case DIO_PORTB :
				 if(Copy_u8PinDirection == DIO_PIN_INPUT)
    1c88:	8c 81       	ldd	r24, Y+4	; 0x04
    1c8a:	88 23       	and	r24, r24
    1c8c:	a9 f4       	brne	.+42     	; 0x1cb8 <DIO_EnuSetPinDirection+0x100>
				 {
					CLR_BIT(DDRB,Copy_u8PinNumber);
    1c8e:	a7 e3       	ldi	r26, 0x37	; 55
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	e7 e3       	ldi	r30, 0x37	; 55
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	80 81       	ld	r24, Z
    1c98:	48 2f       	mov	r20, r24
    1c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9c:	28 2f       	mov	r18, r24
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	81 e0       	ldi	r24, 0x01	; 1
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	02 2e       	mov	r0, r18
    1ca6:	02 c0       	rjmp	.+4      	; 0x1cac <DIO_EnuSetPinDirection+0xf4>
    1ca8:	88 0f       	add	r24, r24
    1caa:	99 1f       	adc	r25, r25
    1cac:	0a 94       	dec	r0
    1cae:	e2 f7       	brpl	.-8      	; 0x1ca8 <DIO_EnuSetPinDirection+0xf0>
    1cb0:	80 95       	com	r24
    1cb2:	84 23       	and	r24, r20
    1cb4:	8c 93       	st	X, r24
    1cb6:	6e c0       	rjmp	.+220    	; 0x1d94 <DIO_EnuSetPinDirection+0x1dc>
				 }
				 else
				 {
					SET_BIT(DDRB,Copy_u8PinNumber);
    1cb8:	a7 e3       	ldi	r26, 0x37	; 55
    1cba:	b0 e0       	ldi	r27, 0x00	; 0
    1cbc:	e7 e3       	ldi	r30, 0x37	; 55
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	80 81       	ld	r24, Z
    1cc2:	48 2f       	mov	r20, r24
    1cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc6:	28 2f       	mov	r18, r24
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	02 2e       	mov	r0, r18
    1cd0:	02 c0       	rjmp	.+4      	; 0x1cd6 <DIO_EnuSetPinDirection+0x11e>
    1cd2:	88 0f       	add	r24, r24
    1cd4:	99 1f       	adc	r25, r25
    1cd6:	0a 94       	dec	r0
    1cd8:	e2 f7       	brpl	.-8      	; 0x1cd2 <DIO_EnuSetPinDirection+0x11a>
    1cda:	84 2b       	or	r24, r20
    1cdc:	8c 93       	st	X, r24
    1cde:	5a c0       	rjmp	.+180    	; 0x1d94 <DIO_EnuSetPinDirection+0x1dc>
				 }
				break;
				
				case DIO_PORTC :
				if(Copy_u8PinDirection == DIO_PIN_INPUT)
    1ce0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce2:	88 23       	and	r24, r24
    1ce4:	a9 f4       	brne	.+42     	; 0x1d10 <DIO_EnuSetPinDirection+0x158>
				{
					CLR_BIT(DDRC,Copy_u8PinNumber);
    1ce6:	a4 e3       	ldi	r26, 0x34	; 52
    1ce8:	b0 e0       	ldi	r27, 0x00	; 0
    1cea:	e4 e3       	ldi	r30, 0x34	; 52
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	48 2f       	mov	r20, r24
    1cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf4:	28 2f       	mov	r18, r24
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	02 2e       	mov	r0, r18
    1cfe:	02 c0       	rjmp	.+4      	; 0x1d04 <DIO_EnuSetPinDirection+0x14c>
    1d00:	88 0f       	add	r24, r24
    1d02:	99 1f       	adc	r25, r25
    1d04:	0a 94       	dec	r0
    1d06:	e2 f7       	brpl	.-8      	; 0x1d00 <DIO_EnuSetPinDirection+0x148>
    1d08:	80 95       	com	r24
    1d0a:	84 23       	and	r24, r20
    1d0c:	8c 93       	st	X, r24
    1d0e:	42 c0       	rjmp	.+132    	; 0x1d94 <DIO_EnuSetPinDirection+0x1dc>
				}
				else
				{
					SET_BIT(DDRC,Copy_u8PinNumber);
    1d10:	a4 e3       	ldi	r26, 0x34	; 52
    1d12:	b0 e0       	ldi	r27, 0x00	; 0
    1d14:	e4 e3       	ldi	r30, 0x34	; 52
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	80 81       	ld	r24, Z
    1d1a:	48 2f       	mov	r20, r24
    1d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1e:	28 2f       	mov	r18, r24
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	81 e0       	ldi	r24, 0x01	; 1
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	02 2e       	mov	r0, r18
    1d28:	02 c0       	rjmp	.+4      	; 0x1d2e <DIO_EnuSetPinDirection+0x176>
    1d2a:	88 0f       	add	r24, r24
    1d2c:	99 1f       	adc	r25, r25
    1d2e:	0a 94       	dec	r0
    1d30:	e2 f7       	brpl	.-8      	; 0x1d2a <DIO_EnuSetPinDirection+0x172>
    1d32:	84 2b       	or	r24, r20
    1d34:	8c 93       	st	X, r24
    1d36:	2e c0       	rjmp	.+92     	; 0x1d94 <DIO_EnuSetPinDirection+0x1dc>
				}
				break;
				
				case DIO_PORTD :
				if(Copy_u8PinDirection == DIO_PIN_INPUT)
    1d38:	8c 81       	ldd	r24, Y+4	; 0x04
    1d3a:	88 23       	and	r24, r24
    1d3c:	a9 f4       	brne	.+42     	; 0x1d68 <DIO_EnuSetPinDirection+0x1b0>
				{
					CLR_BIT(DDRD,Copy_u8PinNumber);
    1d3e:	a1 e3       	ldi	r26, 0x31	; 49
    1d40:	b0 e0       	ldi	r27, 0x00	; 0
    1d42:	e1 e3       	ldi	r30, 0x31	; 49
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	80 81       	ld	r24, Z
    1d48:	48 2f       	mov	r20, r24
    1d4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4c:	28 2f       	mov	r18, r24
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	02 2e       	mov	r0, r18
    1d56:	02 c0       	rjmp	.+4      	; 0x1d5c <DIO_EnuSetPinDirection+0x1a4>
    1d58:	88 0f       	add	r24, r24
    1d5a:	99 1f       	adc	r25, r25
    1d5c:	0a 94       	dec	r0
    1d5e:	e2 f7       	brpl	.-8      	; 0x1d58 <DIO_EnuSetPinDirection+0x1a0>
    1d60:	80 95       	com	r24
    1d62:	84 23       	and	r24, r20
    1d64:	8c 93       	st	X, r24
    1d66:	16 c0       	rjmp	.+44     	; 0x1d94 <DIO_EnuSetPinDirection+0x1dc>
				}
				else
				{
					SET_BIT(DDRD,Copy_u8PinNumber);
    1d68:	a1 e3       	ldi	r26, 0x31	; 49
    1d6a:	b0 e0       	ldi	r27, 0x00	; 0
    1d6c:	e1 e3       	ldi	r30, 0x31	; 49
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	80 81       	ld	r24, Z
    1d72:	48 2f       	mov	r20, r24
    1d74:	8b 81       	ldd	r24, Y+3	; 0x03
    1d76:	28 2f       	mov	r18, r24
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	02 2e       	mov	r0, r18
    1d80:	02 c0       	rjmp	.+4      	; 0x1d86 <DIO_EnuSetPinDirection+0x1ce>
    1d82:	88 0f       	add	r24, r24
    1d84:	99 1f       	adc	r25, r25
    1d86:	0a 94       	dec	r0
    1d88:	e2 f7       	brpl	.-8      	; 0x1d82 <DIO_EnuSetPinDirection+0x1ca>
    1d8a:	84 2b       	or	r24, r20
    1d8c:	8c 93       	st	X, r24
    1d8e:	02 c0       	rjmp	.+4      	; 0x1d94 <DIO_EnuSetPinDirection+0x1dc>
				break;
			}
		}
		else
		{
			state = OUTOFRANGE;
    1d90:	88 e0       	ldi	r24, 0x08	; 8
    1d92:	89 83       	std	Y+1, r24	; 0x01
		}
return state;
    1d94:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d96:	26 96       	adiw	r28, 0x06	; 6
    1d98:	0f b6       	in	r0, 0x3f	; 63
    1d9a:	f8 94       	cli
    1d9c:	de bf       	out	0x3e, r29	; 62
    1d9e:	0f be       	out	0x3f, r0	; 63
    1da0:	cd bf       	out	0x3d, r28	; 61
    1da2:	cf 91       	pop	r28
    1da4:	df 91       	pop	r29
    1da6:	08 95       	ret

00001da8 <DIO_EnuSetPinValue>:
Error_Status DIO_EnuSetPinValue (u8 Copy_u8PortNumber , u8 Copy_u8PinNumber , u8 Copy_u8PinValue)
{
    1da8:	df 93       	push	r29
    1daa:	cf 93       	push	r28
    1dac:	00 d0       	rcall	.+0      	; 0x1dae <DIO_EnuSetPinValue+0x6>
    1dae:	00 d0       	rcall	.+0      	; 0x1db0 <DIO_EnuSetPinValue+0x8>
    1db0:	00 d0       	rcall	.+0      	; 0x1db2 <DIO_EnuSetPinValue+0xa>
    1db2:	cd b7       	in	r28, 0x3d	; 61
    1db4:	de b7       	in	r29, 0x3e	; 62
    1db6:	8a 83       	std	Y+2, r24	; 0x02
    1db8:	6b 83       	std	Y+3, r22	; 0x03
    1dba:	4c 83       	std	Y+4, r20	; 0x04
	Error_Status state = OK ;
    1dbc:	19 82       	std	Y+1, r1	; 0x01
		if(Copy_u8PortNumber >= DIO_PORTA && Copy_u8PortNumber <= DIO_PORTD && Copy_u8PinNumber >= DIO_PIN_0 && Copy_u8PinNumber <= DIO_PIN_7 && (Copy_u8PinValue == DIO_PIN_HIGH || Copy_u8PinValue == DIO_PIN_LOW))
    1dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc0:	84 30       	cpi	r24, 0x04	; 4
    1dc2:	08 f0       	brcs	.+2      	; 0x1dc6 <DIO_EnuSetPinValue+0x1e>
    1dc4:	dd c0       	rjmp	.+442    	; 0x1f80 <DIO_EnuSetPinValue+0x1d8>
    1dc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc8:	88 30       	cpi	r24, 0x08	; 8
    1dca:	08 f0       	brcs	.+2      	; 0x1dce <DIO_EnuSetPinValue+0x26>
    1dcc:	d9 c0       	rjmp	.+434    	; 0x1f80 <DIO_EnuSetPinValue+0x1d8>
    1dce:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd0:	81 30       	cpi	r24, 0x01	; 1
    1dd2:	21 f0       	breq	.+8      	; 0x1ddc <DIO_EnuSetPinValue+0x34>
    1dd4:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd6:	88 23       	and	r24, r24
    1dd8:	09 f0       	breq	.+2      	; 0x1ddc <DIO_EnuSetPinValue+0x34>
    1dda:	d2 c0       	rjmp	.+420    	; 0x1f80 <DIO_EnuSetPinValue+0x1d8>
		{
			switch(Copy_u8PortNumber)
    1ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dde:	28 2f       	mov	r18, r24
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	3e 83       	std	Y+6, r19	; 0x06
    1de4:	2d 83       	std	Y+5, r18	; 0x05
    1de6:	8d 81       	ldd	r24, Y+5	; 0x05
    1de8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dea:	81 30       	cpi	r24, 0x01	; 1
    1dec:	91 05       	cpc	r25, r1
    1dee:	09 f4       	brne	.+2      	; 0x1df2 <DIO_EnuSetPinValue+0x4a>
    1df0:	43 c0       	rjmp	.+134    	; 0x1e78 <DIO_EnuSetPinValue+0xd0>
    1df2:	2d 81       	ldd	r18, Y+5	; 0x05
    1df4:	3e 81       	ldd	r19, Y+6	; 0x06
    1df6:	22 30       	cpi	r18, 0x02	; 2
    1df8:	31 05       	cpc	r19, r1
    1dfa:	2c f4       	brge	.+10     	; 0x1e06 <DIO_EnuSetPinValue+0x5e>
    1dfc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dfe:	9e 81       	ldd	r25, Y+6	; 0x06
    1e00:	00 97       	sbiw	r24, 0x00	; 0
    1e02:	71 f0       	breq	.+28     	; 0x1e20 <DIO_EnuSetPinValue+0x78>
    1e04:	bf c0       	rjmp	.+382    	; 0x1f84 <DIO_EnuSetPinValue+0x1dc>
    1e06:	2d 81       	ldd	r18, Y+5	; 0x05
    1e08:	3e 81       	ldd	r19, Y+6	; 0x06
    1e0a:	22 30       	cpi	r18, 0x02	; 2
    1e0c:	31 05       	cpc	r19, r1
    1e0e:	09 f4       	brne	.+2      	; 0x1e12 <DIO_EnuSetPinValue+0x6a>
    1e10:	5f c0       	rjmp	.+190    	; 0x1ed0 <DIO_EnuSetPinValue+0x128>
    1e12:	8d 81       	ldd	r24, Y+5	; 0x05
    1e14:	9e 81       	ldd	r25, Y+6	; 0x06
    1e16:	83 30       	cpi	r24, 0x03	; 3
    1e18:	91 05       	cpc	r25, r1
    1e1a:	09 f4       	brne	.+2      	; 0x1e1e <DIO_EnuSetPinValue+0x76>
    1e1c:	85 c0       	rjmp	.+266    	; 0x1f28 <DIO_EnuSetPinValue+0x180>
    1e1e:	b2 c0       	rjmp	.+356    	; 0x1f84 <DIO_EnuSetPinValue+0x1dc>
			{
				case DIO_PORTA :
				 if(Copy_u8PinValue == DIO_PIN_LOW)
    1e20:	8c 81       	ldd	r24, Y+4	; 0x04
    1e22:	88 23       	and	r24, r24
    1e24:	a9 f4       	brne	.+42     	; 0x1e50 <DIO_EnuSetPinValue+0xa8>
				 {
					CLR_BIT(PORTA,Copy_u8PinNumber);
    1e26:	ab e3       	ldi	r26, 0x3B	; 59
    1e28:	b0 e0       	ldi	r27, 0x00	; 0
    1e2a:	eb e3       	ldi	r30, 0x3B	; 59
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	80 81       	ld	r24, Z
    1e30:	48 2f       	mov	r20, r24
    1e32:	8b 81       	ldd	r24, Y+3	; 0x03
    1e34:	28 2f       	mov	r18, r24
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	02 2e       	mov	r0, r18
    1e3e:	02 c0       	rjmp	.+4      	; 0x1e44 <DIO_EnuSetPinValue+0x9c>
    1e40:	88 0f       	add	r24, r24
    1e42:	99 1f       	adc	r25, r25
    1e44:	0a 94       	dec	r0
    1e46:	e2 f7       	brpl	.-8      	; 0x1e40 <DIO_EnuSetPinValue+0x98>
    1e48:	80 95       	com	r24
    1e4a:	84 23       	and	r24, r20
    1e4c:	8c 93       	st	X, r24
    1e4e:	9a c0       	rjmp	.+308    	; 0x1f84 <DIO_EnuSetPinValue+0x1dc>
				 }
				 else
				 {
					SET_BIT(PORTA,Copy_u8PinNumber);
    1e50:	ab e3       	ldi	r26, 0x3B	; 59
    1e52:	b0 e0       	ldi	r27, 0x00	; 0
    1e54:	eb e3       	ldi	r30, 0x3B	; 59
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	80 81       	ld	r24, Z
    1e5a:	48 2f       	mov	r20, r24
    1e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5e:	28 2f       	mov	r18, r24
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	81 e0       	ldi	r24, 0x01	; 1
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	02 2e       	mov	r0, r18
    1e68:	02 c0       	rjmp	.+4      	; 0x1e6e <DIO_EnuSetPinValue+0xc6>
    1e6a:	88 0f       	add	r24, r24
    1e6c:	99 1f       	adc	r25, r25
    1e6e:	0a 94       	dec	r0
    1e70:	e2 f7       	brpl	.-8      	; 0x1e6a <DIO_EnuSetPinValue+0xc2>
    1e72:	84 2b       	or	r24, r20
    1e74:	8c 93       	st	X, r24
    1e76:	86 c0       	rjmp	.+268    	; 0x1f84 <DIO_EnuSetPinValue+0x1dc>
				 }
				break;
				
				case DIO_PORTB :
				 if(Copy_u8PinValue == DIO_PIN_LOW)
    1e78:	8c 81       	ldd	r24, Y+4	; 0x04
    1e7a:	88 23       	and	r24, r24
    1e7c:	a9 f4       	brne	.+42     	; 0x1ea8 <DIO_EnuSetPinValue+0x100>
				 {
					CLR_BIT(PORTB,Copy_u8PinNumber);
    1e7e:	a8 e3       	ldi	r26, 0x38	; 56
    1e80:	b0 e0       	ldi	r27, 0x00	; 0
    1e82:	e8 e3       	ldi	r30, 0x38	; 56
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 81       	ld	r24, Z
    1e88:	48 2f       	mov	r20, r24
    1e8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8c:	28 2f       	mov	r18, r24
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	02 2e       	mov	r0, r18
    1e96:	02 c0       	rjmp	.+4      	; 0x1e9c <DIO_EnuSetPinValue+0xf4>
    1e98:	88 0f       	add	r24, r24
    1e9a:	99 1f       	adc	r25, r25
    1e9c:	0a 94       	dec	r0
    1e9e:	e2 f7       	brpl	.-8      	; 0x1e98 <DIO_EnuSetPinValue+0xf0>
    1ea0:	80 95       	com	r24
    1ea2:	84 23       	and	r24, r20
    1ea4:	8c 93       	st	X, r24
    1ea6:	6e c0       	rjmp	.+220    	; 0x1f84 <DIO_EnuSetPinValue+0x1dc>
				 }
				 else
				 {
					SET_BIT(PORTB,Copy_u8PinNumber);
    1ea8:	a8 e3       	ldi	r26, 0x38	; 56
    1eaa:	b0 e0       	ldi	r27, 0x00	; 0
    1eac:	e8 e3       	ldi	r30, 0x38	; 56
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	80 81       	ld	r24, Z
    1eb2:	48 2f       	mov	r20, r24
    1eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb6:	28 2f       	mov	r18, r24
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	81 e0       	ldi	r24, 0x01	; 1
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	02 2e       	mov	r0, r18
    1ec0:	02 c0       	rjmp	.+4      	; 0x1ec6 <DIO_EnuSetPinValue+0x11e>
    1ec2:	88 0f       	add	r24, r24
    1ec4:	99 1f       	adc	r25, r25
    1ec6:	0a 94       	dec	r0
    1ec8:	e2 f7       	brpl	.-8      	; 0x1ec2 <DIO_EnuSetPinValue+0x11a>
    1eca:	84 2b       	or	r24, r20
    1ecc:	8c 93       	st	X, r24
    1ece:	5a c0       	rjmp	.+180    	; 0x1f84 <DIO_EnuSetPinValue+0x1dc>
				 }
				break;
				
				case DIO_PORTC :
				 if(Copy_u8PinValue == DIO_PIN_LOW)
    1ed0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ed2:	88 23       	and	r24, r24
    1ed4:	a9 f4       	brne	.+42     	; 0x1f00 <DIO_EnuSetPinValue+0x158>
				 {
					CLR_BIT(PORTC,Copy_u8PinNumber);
    1ed6:	a5 e3       	ldi	r26, 0x35	; 53
    1ed8:	b0 e0       	ldi	r27, 0x00	; 0
    1eda:	e5 e3       	ldi	r30, 0x35	; 53
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	80 81       	ld	r24, Z
    1ee0:	48 2f       	mov	r20, r24
    1ee2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee4:	28 2f       	mov	r18, r24
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	02 2e       	mov	r0, r18
    1eee:	02 c0       	rjmp	.+4      	; 0x1ef4 <DIO_EnuSetPinValue+0x14c>
    1ef0:	88 0f       	add	r24, r24
    1ef2:	99 1f       	adc	r25, r25
    1ef4:	0a 94       	dec	r0
    1ef6:	e2 f7       	brpl	.-8      	; 0x1ef0 <DIO_EnuSetPinValue+0x148>
    1ef8:	80 95       	com	r24
    1efa:	84 23       	and	r24, r20
    1efc:	8c 93       	st	X, r24
    1efe:	42 c0       	rjmp	.+132    	; 0x1f84 <DIO_EnuSetPinValue+0x1dc>
				 }
				 else
				 {
					SET_BIT(PORTC,Copy_u8PinNumber);
    1f00:	a5 e3       	ldi	r26, 0x35	; 53
    1f02:	b0 e0       	ldi	r27, 0x00	; 0
    1f04:	e5 e3       	ldi	r30, 0x35	; 53
    1f06:	f0 e0       	ldi	r31, 0x00	; 0
    1f08:	80 81       	ld	r24, Z
    1f0a:	48 2f       	mov	r20, r24
    1f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0e:	28 2f       	mov	r18, r24
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	81 e0       	ldi	r24, 0x01	; 1
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	02 2e       	mov	r0, r18
    1f18:	02 c0       	rjmp	.+4      	; 0x1f1e <DIO_EnuSetPinValue+0x176>
    1f1a:	88 0f       	add	r24, r24
    1f1c:	99 1f       	adc	r25, r25
    1f1e:	0a 94       	dec	r0
    1f20:	e2 f7       	brpl	.-8      	; 0x1f1a <DIO_EnuSetPinValue+0x172>
    1f22:	84 2b       	or	r24, r20
    1f24:	8c 93       	st	X, r24
    1f26:	2e c0       	rjmp	.+92     	; 0x1f84 <DIO_EnuSetPinValue+0x1dc>
				 } 
				break;
				
				case DIO_PORTD:
				 if(Copy_u8PinValue == DIO_PIN_LOW)
    1f28:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2a:	88 23       	and	r24, r24
    1f2c:	a9 f4       	brne	.+42     	; 0x1f58 <DIO_EnuSetPinValue+0x1b0>
				 {
					CLR_BIT(PORTD,Copy_u8PinNumber);
    1f2e:	a2 e3       	ldi	r26, 0x32	; 50
    1f30:	b0 e0       	ldi	r27, 0x00	; 0
    1f32:	e2 e3       	ldi	r30, 0x32	; 50
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	80 81       	ld	r24, Z
    1f38:	48 2f       	mov	r20, r24
    1f3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3c:	28 2f       	mov	r18, r24
    1f3e:	30 e0       	ldi	r19, 0x00	; 0
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	02 2e       	mov	r0, r18
    1f46:	02 c0       	rjmp	.+4      	; 0x1f4c <DIO_EnuSetPinValue+0x1a4>
    1f48:	88 0f       	add	r24, r24
    1f4a:	99 1f       	adc	r25, r25
    1f4c:	0a 94       	dec	r0
    1f4e:	e2 f7       	brpl	.-8      	; 0x1f48 <DIO_EnuSetPinValue+0x1a0>
    1f50:	80 95       	com	r24
    1f52:	84 23       	and	r24, r20
    1f54:	8c 93       	st	X, r24
    1f56:	16 c0       	rjmp	.+44     	; 0x1f84 <DIO_EnuSetPinValue+0x1dc>
				 }
				 else
				 {
					SET_BIT(PORTD,Copy_u8PinNumber);
    1f58:	a2 e3       	ldi	r26, 0x32	; 50
    1f5a:	b0 e0       	ldi	r27, 0x00	; 0
    1f5c:	e2 e3       	ldi	r30, 0x32	; 50
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	80 81       	ld	r24, Z
    1f62:	48 2f       	mov	r20, r24
    1f64:	8b 81       	ldd	r24, Y+3	; 0x03
    1f66:	28 2f       	mov	r18, r24
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	02 2e       	mov	r0, r18
    1f70:	02 c0       	rjmp	.+4      	; 0x1f76 <DIO_EnuSetPinValue+0x1ce>
    1f72:	88 0f       	add	r24, r24
    1f74:	99 1f       	adc	r25, r25
    1f76:	0a 94       	dec	r0
    1f78:	e2 f7       	brpl	.-8      	; 0x1f72 <DIO_EnuSetPinValue+0x1ca>
    1f7a:	84 2b       	or	r24, r20
    1f7c:	8c 93       	st	X, r24
    1f7e:	02 c0       	rjmp	.+4      	; 0x1f84 <DIO_EnuSetPinValue+0x1dc>
				break;
			}
		}
		else
		{
			state = OUTOFRANGE;
    1f80:	88 e0       	ldi	r24, 0x08	; 8
    1f82:	89 83       	std	Y+1, r24	; 0x01
		}
return state;
    1f84:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f86:	26 96       	adiw	r28, 0x06	; 6
    1f88:	0f b6       	in	r0, 0x3f	; 63
    1f8a:	f8 94       	cli
    1f8c:	de bf       	out	0x3e, r29	; 62
    1f8e:	0f be       	out	0x3f, r0	; 63
    1f90:	cd bf       	out	0x3d, r28	; 61
    1f92:	cf 91       	pop	r28
    1f94:	df 91       	pop	r29
    1f96:	08 95       	ret

00001f98 <DIO_EnuGetPinValue>:

Error_Status DIO_EnuGetPinValue (u8 Copy_u8PortNumber , u8 Copy_u8PinNumber , u8 * Copy_Pu8PinValue)
{
    1f98:	df 93       	push	r29
    1f9a:	cf 93       	push	r28
    1f9c:	cd b7       	in	r28, 0x3d	; 61
    1f9e:	de b7       	in	r29, 0x3e	; 62
    1fa0:	27 97       	sbiw	r28, 0x07	; 7
    1fa2:	0f b6       	in	r0, 0x3f	; 63
    1fa4:	f8 94       	cli
    1fa6:	de bf       	out	0x3e, r29	; 62
    1fa8:	0f be       	out	0x3f, r0	; 63
    1faa:	cd bf       	out	0x3d, r28	; 61
    1fac:	8a 83       	std	Y+2, r24	; 0x02
    1fae:	6b 83       	std	Y+3, r22	; 0x03
    1fb0:	5d 83       	std	Y+5, r21	; 0x05
    1fb2:	4c 83       	std	Y+4, r20	; 0x04
	Error_Status state = OK ;
    1fb4:	19 82       	std	Y+1, r1	; 0x01
		if(Copy_u8PortNumber >= DIO_PORTA && Copy_u8PortNumber <= DIO_PORTD && Copy_u8PinNumber >= DIO_PIN_0 && Copy_u8PinNumber <= DIO_PIN_7 )
    1fb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb8:	84 30       	cpi	r24, 0x04	; 4
    1fba:	08 f0       	brcs	.+2      	; 0x1fbe <DIO_EnuGetPinValue+0x26>
    1fbc:	82 c0       	rjmp	.+260    	; 0x20c2 <DIO_EnuGetPinValue+0x12a>
    1fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc0:	88 30       	cpi	r24, 0x08	; 8
    1fc2:	08 f0       	brcs	.+2      	; 0x1fc6 <DIO_EnuGetPinValue+0x2e>
    1fc4:	7e c0       	rjmp	.+252    	; 0x20c2 <DIO_EnuGetPinValue+0x12a>
		{
			if(* Copy_Pu8PinValue != NULL)
    1fc6:	ec 81       	ldd	r30, Y+4	; 0x04
    1fc8:	fd 81       	ldd	r31, Y+5	; 0x05
    1fca:	80 81       	ld	r24, Z
    1fcc:	88 2f       	mov	r24, r24
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	2f ef       	ldi	r18, 0xFF	; 255
    1fd2:	8f 3f       	cpi	r24, 0xFF	; 255
    1fd4:	92 07       	cpc	r25, r18
    1fd6:	09 f4       	brne	.+2      	; 0x1fda <DIO_EnuGetPinValue+0x42>
    1fd8:	71 c0       	rjmp	.+226    	; 0x20bc <DIO_EnuGetPinValue+0x124>
			{
				switch(Copy_u8PortNumber)
    1fda:	8a 81       	ldd	r24, Y+2	; 0x02
    1fdc:	48 2f       	mov	r20, r24
    1fde:	50 e0       	ldi	r21, 0x00	; 0
    1fe0:	5f 83       	std	Y+7, r21	; 0x07
    1fe2:	4e 83       	std	Y+6, r20	; 0x06
    1fe4:	8e 81       	ldd	r24, Y+6	; 0x06
    1fe6:	9f 81       	ldd	r25, Y+7	; 0x07
    1fe8:	81 30       	cpi	r24, 0x01	; 1
    1fea:	91 05       	cpc	r25, r1
    1fec:	59 f1       	breq	.+86     	; 0x2044 <DIO_EnuGetPinValue+0xac>
    1fee:	2e 81       	ldd	r18, Y+6	; 0x06
    1ff0:	3f 81       	ldd	r19, Y+7	; 0x07
    1ff2:	22 30       	cpi	r18, 0x02	; 2
    1ff4:	31 05       	cpc	r19, r1
    1ff6:	34 f4       	brge	.+12     	; 0x2004 <DIO_EnuGetPinValue+0x6c>
    1ff8:	4e 81       	ldd	r20, Y+6	; 0x06
    1ffa:	5f 81       	ldd	r21, Y+7	; 0x07
    1ffc:	41 15       	cp	r20, r1
    1ffe:	51 05       	cpc	r21, r1
    2000:	69 f0       	breq	.+26     	; 0x201c <DIO_EnuGetPinValue+0x84>
    2002:	61 c0       	rjmp	.+194    	; 0x20c6 <DIO_EnuGetPinValue+0x12e>
    2004:	8e 81       	ldd	r24, Y+6	; 0x06
    2006:	9f 81       	ldd	r25, Y+7	; 0x07
    2008:	82 30       	cpi	r24, 0x02	; 2
    200a:	91 05       	cpc	r25, r1
    200c:	79 f1       	breq	.+94     	; 0x206c <DIO_EnuGetPinValue+0xd4>
    200e:	2e 81       	ldd	r18, Y+6	; 0x06
    2010:	3f 81       	ldd	r19, Y+7	; 0x07
    2012:	23 30       	cpi	r18, 0x03	; 3
    2014:	31 05       	cpc	r19, r1
    2016:	09 f4       	brne	.+2      	; 0x201a <DIO_EnuGetPinValue+0x82>
    2018:	3d c0       	rjmp	.+122    	; 0x2094 <DIO_EnuGetPinValue+0xfc>
    201a:	55 c0       	rjmp	.+170    	; 0x20c6 <DIO_EnuGetPinValue+0x12e>
				{
					case DIO_PORTA :  * Copy_Pu8PinValue = GET_BIT(PINA,Copy_u8PinNumber); break ;
    201c:	e9 e3       	ldi	r30, 0x39	; 57
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	80 81       	ld	r24, Z
    2022:	28 2f       	mov	r18, r24
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	8b 81       	ldd	r24, Y+3	; 0x03
    2028:	88 2f       	mov	r24, r24
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	a9 01       	movw	r20, r18
    202e:	02 c0       	rjmp	.+4      	; 0x2034 <DIO_EnuGetPinValue+0x9c>
    2030:	55 95       	asr	r21
    2032:	47 95       	ror	r20
    2034:	8a 95       	dec	r24
    2036:	e2 f7       	brpl	.-8      	; 0x2030 <DIO_EnuGetPinValue+0x98>
    2038:	ca 01       	movw	r24, r20
    203a:	81 70       	andi	r24, 0x01	; 1
    203c:	ec 81       	ldd	r30, Y+4	; 0x04
    203e:	fd 81       	ldd	r31, Y+5	; 0x05
    2040:	80 83       	st	Z, r24
    2042:	41 c0       	rjmp	.+130    	; 0x20c6 <DIO_EnuGetPinValue+0x12e>
					case DIO_PORTB :  * Copy_Pu8PinValue = GET_BIT(PINB,Copy_u8PinNumber); break ;
    2044:	e6 e3       	ldi	r30, 0x36	; 54
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	80 81       	ld	r24, Z
    204a:	28 2f       	mov	r18, r24
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	8b 81       	ldd	r24, Y+3	; 0x03
    2050:	88 2f       	mov	r24, r24
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	a9 01       	movw	r20, r18
    2056:	02 c0       	rjmp	.+4      	; 0x205c <DIO_EnuGetPinValue+0xc4>
    2058:	55 95       	asr	r21
    205a:	47 95       	ror	r20
    205c:	8a 95       	dec	r24
    205e:	e2 f7       	brpl	.-8      	; 0x2058 <DIO_EnuGetPinValue+0xc0>
    2060:	ca 01       	movw	r24, r20
    2062:	81 70       	andi	r24, 0x01	; 1
    2064:	ec 81       	ldd	r30, Y+4	; 0x04
    2066:	fd 81       	ldd	r31, Y+5	; 0x05
    2068:	80 83       	st	Z, r24
    206a:	2d c0       	rjmp	.+90     	; 0x20c6 <DIO_EnuGetPinValue+0x12e>
					case DIO_PORTC :  * Copy_Pu8PinValue = GET_BIT(PINC,Copy_u8PinNumber); break ;
    206c:	e3 e3       	ldi	r30, 0x33	; 51
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	80 81       	ld	r24, Z
    2072:	28 2f       	mov	r18, r24
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	8b 81       	ldd	r24, Y+3	; 0x03
    2078:	88 2f       	mov	r24, r24
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	a9 01       	movw	r20, r18
    207e:	02 c0       	rjmp	.+4      	; 0x2084 <DIO_EnuGetPinValue+0xec>
    2080:	55 95       	asr	r21
    2082:	47 95       	ror	r20
    2084:	8a 95       	dec	r24
    2086:	e2 f7       	brpl	.-8      	; 0x2080 <DIO_EnuGetPinValue+0xe8>
    2088:	ca 01       	movw	r24, r20
    208a:	81 70       	andi	r24, 0x01	; 1
    208c:	ec 81       	ldd	r30, Y+4	; 0x04
    208e:	fd 81       	ldd	r31, Y+5	; 0x05
    2090:	80 83       	st	Z, r24
    2092:	19 c0       	rjmp	.+50     	; 0x20c6 <DIO_EnuGetPinValue+0x12e>
					case DIO_PORTD :  * Copy_Pu8PinValue = GET_BIT(PIND,Copy_u8PinNumber); break ;
    2094:	e0 e3       	ldi	r30, 0x30	; 48
    2096:	f0 e0       	ldi	r31, 0x00	; 0
    2098:	80 81       	ld	r24, Z
    209a:	28 2f       	mov	r18, r24
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	8b 81       	ldd	r24, Y+3	; 0x03
    20a0:	88 2f       	mov	r24, r24
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	a9 01       	movw	r20, r18
    20a6:	02 c0       	rjmp	.+4      	; 0x20ac <DIO_EnuGetPinValue+0x114>
    20a8:	55 95       	asr	r21
    20aa:	47 95       	ror	r20
    20ac:	8a 95       	dec	r24
    20ae:	e2 f7       	brpl	.-8      	; 0x20a8 <DIO_EnuGetPinValue+0x110>
    20b0:	ca 01       	movw	r24, r20
    20b2:	81 70       	andi	r24, 0x01	; 1
    20b4:	ec 81       	ldd	r30, Y+4	; 0x04
    20b6:	fd 81       	ldd	r31, Y+5	; 0x05
    20b8:	80 83       	st	Z, r24
    20ba:	05 c0       	rjmp	.+10     	; 0x20c6 <DIO_EnuGetPinValue+0x12e>
					
				}
			}
			else
			{
				state = NULL_POINTER;
    20bc:	80 e1       	ldi	r24, 0x10	; 16
    20be:	89 83       	std	Y+1, r24	; 0x01
    20c0:	02 c0       	rjmp	.+4      	; 0x20c6 <DIO_EnuGetPinValue+0x12e>
			}
		}

		else
		{
			state = OUTOFRANGE;
    20c2:	88 e0       	ldi	r24, 0x08	; 8
    20c4:	89 83       	std	Y+1, r24	; 0x01
		}
return state;
    20c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    20c8:	27 96       	adiw	r28, 0x07	; 7
    20ca:	0f b6       	in	r0, 0x3f	; 63
    20cc:	f8 94       	cli
    20ce:	de bf       	out	0x3e, r29	; 62
    20d0:	0f be       	out	0x3f, r0	; 63
    20d2:	cd bf       	out	0x3d, r28	; 61
    20d4:	cf 91       	pop	r28
    20d6:	df 91       	pop	r29
    20d8:	08 95       	ret

000020da <DIO_EnuSetPortDirection>:

Error_Status DIO_EnuSetPortDirection (u8 Copy_u8PortNumber  , u8 Copy_u8PortDirection)
{
    20da:	df 93       	push	r29
    20dc:	cf 93       	push	r28
    20de:	00 d0       	rcall	.+0      	; 0x20e0 <DIO_EnuSetPortDirection+0x6>
    20e0:	00 d0       	rcall	.+0      	; 0x20e2 <DIO_EnuSetPortDirection+0x8>
    20e2:	0f 92       	push	r0
    20e4:	cd b7       	in	r28, 0x3d	; 61
    20e6:	de b7       	in	r29, 0x3e	; 62
    20e8:	8a 83       	std	Y+2, r24	; 0x02
    20ea:	6b 83       	std	Y+3, r22	; 0x03
	Error_Status state = OK;
    20ec:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8PortNumber)
    20ee:	8a 81       	ldd	r24, Y+2	; 0x02
    20f0:	28 2f       	mov	r18, r24
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	3d 83       	std	Y+5, r19	; 0x05
    20f6:	2c 83       	std	Y+4, r18	; 0x04
    20f8:	8c 81       	ldd	r24, Y+4	; 0x04
    20fa:	9d 81       	ldd	r25, Y+5	; 0x05
    20fc:	81 30       	cpi	r24, 0x01	; 1
    20fe:	91 05       	cpc	r25, r1
    2100:	d1 f0       	breq	.+52     	; 0x2136 <DIO_EnuSetPortDirection+0x5c>
    2102:	2c 81       	ldd	r18, Y+4	; 0x04
    2104:	3d 81       	ldd	r19, Y+5	; 0x05
    2106:	22 30       	cpi	r18, 0x02	; 2
    2108:	31 05       	cpc	r19, r1
    210a:	2c f4       	brge	.+10     	; 0x2116 <DIO_EnuSetPortDirection+0x3c>
    210c:	8c 81       	ldd	r24, Y+4	; 0x04
    210e:	9d 81       	ldd	r25, Y+5	; 0x05
    2110:	00 97       	sbiw	r24, 0x00	; 0
    2112:	61 f0       	breq	.+24     	; 0x212c <DIO_EnuSetPortDirection+0x52>
    2114:	1f c0       	rjmp	.+62     	; 0x2154 <DIO_EnuSetPortDirection+0x7a>
    2116:	2c 81       	ldd	r18, Y+4	; 0x04
    2118:	3d 81       	ldd	r19, Y+5	; 0x05
    211a:	22 30       	cpi	r18, 0x02	; 2
    211c:	31 05       	cpc	r19, r1
    211e:	81 f0       	breq	.+32     	; 0x2140 <DIO_EnuSetPortDirection+0x66>
    2120:	8c 81       	ldd	r24, Y+4	; 0x04
    2122:	9d 81       	ldd	r25, Y+5	; 0x05
    2124:	83 30       	cpi	r24, 0x03	; 3
    2126:	91 05       	cpc	r25, r1
    2128:	81 f0       	breq	.+32     	; 0x214a <DIO_EnuSetPortDirection+0x70>
    212a:	14 c0       	rjmp	.+40     	; 0x2154 <DIO_EnuSetPortDirection+0x7a>
	{
		case DIO_PORTA :   DDRA =Copy_u8PortDirection ; break;
    212c:	ea e3       	ldi	r30, 0x3A	; 58
    212e:	f0 e0       	ldi	r31, 0x00	; 0
    2130:	8b 81       	ldd	r24, Y+3	; 0x03
    2132:	80 83       	st	Z, r24
    2134:	11 c0       	rjmp	.+34     	; 0x2158 <DIO_EnuSetPortDirection+0x7e>
		case DIO_PORTB :   DDRB =Copy_u8PortDirection ; break;
    2136:	e7 e3       	ldi	r30, 0x37	; 55
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	8b 81       	ldd	r24, Y+3	; 0x03
    213c:	80 83       	st	Z, r24
    213e:	0c c0       	rjmp	.+24     	; 0x2158 <DIO_EnuSetPortDirection+0x7e>
		case DIO_PORTC :   DDRC =Copy_u8PortDirection ; break;
    2140:	e4 e3       	ldi	r30, 0x34	; 52
    2142:	f0 e0       	ldi	r31, 0x00	; 0
    2144:	8b 81       	ldd	r24, Y+3	; 0x03
    2146:	80 83       	st	Z, r24
    2148:	07 c0       	rjmp	.+14     	; 0x2158 <DIO_EnuSetPortDirection+0x7e>
		case DIO_PORTD :   DDRD =Copy_u8PortDirection ; break;
    214a:	e1 e3       	ldi	r30, 0x31	; 49
    214c:	f0 e0       	ldi	r31, 0x00	; 0
    214e:	8b 81       	ldd	r24, Y+3	; 0x03
    2150:	80 83       	st	Z, r24
    2152:	02 c0       	rjmp	.+4      	; 0x2158 <DIO_EnuSetPortDirection+0x7e>
		default : state = OUTOFRANGE ;
    2154:	88 e0       	ldi	r24, 0x08	; 8
    2156:	89 83       	std	Y+1, r24	; 0x01
	}
	return state ;
    2158:	89 81       	ldd	r24, Y+1	; 0x01
}
    215a:	0f 90       	pop	r0
    215c:	0f 90       	pop	r0
    215e:	0f 90       	pop	r0
    2160:	0f 90       	pop	r0
    2162:	0f 90       	pop	r0
    2164:	cf 91       	pop	r28
    2166:	df 91       	pop	r29
    2168:	08 95       	ret

0000216a <DIO_EnuSetPortValue>:

Error_Status DIO_EnuSetPortValue (u8 Copy_u8PortNumber  , u8 Copy_u8PortValue)
{
    216a:	df 93       	push	r29
    216c:	cf 93       	push	r28
    216e:	00 d0       	rcall	.+0      	; 0x2170 <DIO_EnuSetPortValue+0x6>
    2170:	00 d0       	rcall	.+0      	; 0x2172 <DIO_EnuSetPortValue+0x8>
    2172:	0f 92       	push	r0
    2174:	cd b7       	in	r28, 0x3d	; 61
    2176:	de b7       	in	r29, 0x3e	; 62
    2178:	8a 83       	std	Y+2, r24	; 0x02
    217a:	6b 83       	std	Y+3, r22	; 0x03
	Error_Status state = OK;
    217c:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8PortNumber)
    217e:	8a 81       	ldd	r24, Y+2	; 0x02
    2180:	28 2f       	mov	r18, r24
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	3d 83       	std	Y+5, r19	; 0x05
    2186:	2c 83       	std	Y+4, r18	; 0x04
    2188:	8c 81       	ldd	r24, Y+4	; 0x04
    218a:	9d 81       	ldd	r25, Y+5	; 0x05
    218c:	81 30       	cpi	r24, 0x01	; 1
    218e:	91 05       	cpc	r25, r1
    2190:	d1 f0       	breq	.+52     	; 0x21c6 <DIO_EnuSetPortValue+0x5c>
    2192:	2c 81       	ldd	r18, Y+4	; 0x04
    2194:	3d 81       	ldd	r19, Y+5	; 0x05
    2196:	22 30       	cpi	r18, 0x02	; 2
    2198:	31 05       	cpc	r19, r1
    219a:	2c f4       	brge	.+10     	; 0x21a6 <DIO_EnuSetPortValue+0x3c>
    219c:	8c 81       	ldd	r24, Y+4	; 0x04
    219e:	9d 81       	ldd	r25, Y+5	; 0x05
    21a0:	00 97       	sbiw	r24, 0x00	; 0
    21a2:	61 f0       	breq	.+24     	; 0x21bc <DIO_EnuSetPortValue+0x52>
    21a4:	1f c0       	rjmp	.+62     	; 0x21e4 <DIO_EnuSetPortValue+0x7a>
    21a6:	2c 81       	ldd	r18, Y+4	; 0x04
    21a8:	3d 81       	ldd	r19, Y+5	; 0x05
    21aa:	22 30       	cpi	r18, 0x02	; 2
    21ac:	31 05       	cpc	r19, r1
    21ae:	81 f0       	breq	.+32     	; 0x21d0 <DIO_EnuSetPortValue+0x66>
    21b0:	8c 81       	ldd	r24, Y+4	; 0x04
    21b2:	9d 81       	ldd	r25, Y+5	; 0x05
    21b4:	83 30       	cpi	r24, 0x03	; 3
    21b6:	91 05       	cpc	r25, r1
    21b8:	81 f0       	breq	.+32     	; 0x21da <DIO_EnuSetPortValue+0x70>
    21ba:	14 c0       	rjmp	.+40     	; 0x21e4 <DIO_EnuSetPortValue+0x7a>
	{
		case DIO_PORTA :   PORTA =Copy_u8PortValue ; break;
    21bc:	eb e3       	ldi	r30, 0x3B	; 59
    21be:	f0 e0       	ldi	r31, 0x00	; 0
    21c0:	8b 81       	ldd	r24, Y+3	; 0x03
    21c2:	80 83       	st	Z, r24
    21c4:	11 c0       	rjmp	.+34     	; 0x21e8 <DIO_EnuSetPortValue+0x7e>
		case DIO_PORTB :   PORTB =Copy_u8PortValue ; break;
    21c6:	e8 e3       	ldi	r30, 0x38	; 56
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	8b 81       	ldd	r24, Y+3	; 0x03
    21cc:	80 83       	st	Z, r24
    21ce:	0c c0       	rjmp	.+24     	; 0x21e8 <DIO_EnuSetPortValue+0x7e>
		case DIO_PORTC :   PORTC =Copy_u8PortValue ; break;
    21d0:	e5 e3       	ldi	r30, 0x35	; 53
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	8b 81       	ldd	r24, Y+3	; 0x03
    21d6:	80 83       	st	Z, r24
    21d8:	07 c0       	rjmp	.+14     	; 0x21e8 <DIO_EnuSetPortValue+0x7e>
		case DIO_PORTD :   PORTD =Copy_u8PortValue ; break;
    21da:	e2 e3       	ldi	r30, 0x32	; 50
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	8b 81       	ldd	r24, Y+3	; 0x03
    21e0:	80 83       	st	Z, r24
    21e2:	02 c0       	rjmp	.+4      	; 0x21e8 <DIO_EnuSetPortValue+0x7e>
		default : state = OUTOFRANGE ;
    21e4:	88 e0       	ldi	r24, 0x08	; 8
    21e6:	89 83       	std	Y+1, r24	; 0x01
	}
	return state ;
    21e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    21ea:	0f 90       	pop	r0
    21ec:	0f 90       	pop	r0
    21ee:	0f 90       	pop	r0
    21f0:	0f 90       	pop	r0
    21f2:	0f 90       	pop	r0
    21f4:	cf 91       	pop	r28
    21f6:	df 91       	pop	r29
    21f8:	08 95       	ret

000021fa <DIO_EnuGetPortValue>:

Error_Status DIO_EnuGetPortValue (u8 Copy_u8PortNumber  , u8 * Copy_Pu8PortValue)
{
    21fa:	df 93       	push	r29
    21fc:	cf 93       	push	r28
    21fe:	00 d0       	rcall	.+0      	; 0x2200 <DIO_EnuGetPortValue+0x6>
    2200:	00 d0       	rcall	.+0      	; 0x2202 <DIO_EnuGetPortValue+0x8>
    2202:	00 d0       	rcall	.+0      	; 0x2204 <DIO_EnuGetPortValue+0xa>
    2204:	cd b7       	in	r28, 0x3d	; 61
    2206:	de b7       	in	r29, 0x3e	; 62
    2208:	8a 83       	std	Y+2, r24	; 0x02
    220a:	7c 83       	std	Y+4, r23	; 0x04
    220c:	6b 83       	std	Y+3, r22	; 0x03
	Error_Status state = OK ;
    220e:	19 82       	std	Y+1, r1	; 0x01
	if (* Copy_Pu8PortValue != NULL)
    2210:	eb 81       	ldd	r30, Y+3	; 0x03
    2212:	fc 81       	ldd	r31, Y+4	; 0x04
    2214:	80 81       	ld	r24, Z
    2216:	88 2f       	mov	r24, r24
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	2f ef       	ldi	r18, 0xFF	; 255
    221c:	8f 3f       	cpi	r24, 0xFF	; 255
    221e:	92 07       	cpc	r25, r18
    2220:	09 f4       	brne	.+2      	; 0x2224 <DIO_EnuGetPortValue+0x2a>
    2222:	3e c0       	rjmp	.+124    	; 0x22a0 <DIO_EnuGetPortValue+0xa6>
	{
		switch(Copy_u8PortNumber)
    2224:	8a 81       	ldd	r24, Y+2	; 0x02
    2226:	28 2f       	mov	r18, r24
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	3e 83       	std	Y+6, r19	; 0x06
    222c:	2d 83       	std	Y+5, r18	; 0x05
    222e:	8d 81       	ldd	r24, Y+5	; 0x05
    2230:	9e 81       	ldd	r25, Y+6	; 0x06
    2232:	81 30       	cpi	r24, 0x01	; 1
    2234:	91 05       	cpc	r25, r1
    2236:	e1 f0       	breq	.+56     	; 0x2270 <DIO_EnuGetPortValue+0x76>
    2238:	2d 81       	ldd	r18, Y+5	; 0x05
    223a:	3e 81       	ldd	r19, Y+6	; 0x06
    223c:	22 30       	cpi	r18, 0x02	; 2
    223e:	31 05       	cpc	r19, r1
    2240:	2c f4       	brge	.+10     	; 0x224c <DIO_EnuGetPortValue+0x52>
    2242:	8d 81       	ldd	r24, Y+5	; 0x05
    2244:	9e 81       	ldd	r25, Y+6	; 0x06
    2246:	00 97       	sbiw	r24, 0x00	; 0
    2248:	61 f0       	breq	.+24     	; 0x2262 <DIO_EnuGetPortValue+0x68>
    224a:	27 c0       	rjmp	.+78     	; 0x229a <DIO_EnuGetPortValue+0xa0>
    224c:	2d 81       	ldd	r18, Y+5	; 0x05
    224e:	3e 81       	ldd	r19, Y+6	; 0x06
    2250:	22 30       	cpi	r18, 0x02	; 2
    2252:	31 05       	cpc	r19, r1
    2254:	a1 f0       	breq	.+40     	; 0x227e <DIO_EnuGetPortValue+0x84>
    2256:	8d 81       	ldd	r24, Y+5	; 0x05
    2258:	9e 81       	ldd	r25, Y+6	; 0x06
    225a:	83 30       	cpi	r24, 0x03	; 3
    225c:	91 05       	cpc	r25, r1
    225e:	b1 f0       	breq	.+44     	; 0x228c <DIO_EnuGetPortValue+0x92>
    2260:	1c c0       	rjmp	.+56     	; 0x229a <DIO_EnuGetPortValue+0xa0>
		{
			case DIO_PORTA :  	*Copy_Pu8PortValue = PINA ; break ;
    2262:	e9 e3       	ldi	r30, 0x39	; 57
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	80 81       	ld	r24, Z
    2268:	eb 81       	ldd	r30, Y+3	; 0x03
    226a:	fc 81       	ldd	r31, Y+4	; 0x04
    226c:	80 83       	st	Z, r24
    226e:	1a c0       	rjmp	.+52     	; 0x22a4 <DIO_EnuGetPortValue+0xaa>
			case DIO_PORTB :  	*Copy_Pu8PortValue = PINB ; break ;
    2270:	e6 e3       	ldi	r30, 0x36	; 54
    2272:	f0 e0       	ldi	r31, 0x00	; 0
    2274:	80 81       	ld	r24, Z
    2276:	eb 81       	ldd	r30, Y+3	; 0x03
    2278:	fc 81       	ldd	r31, Y+4	; 0x04
    227a:	80 83       	st	Z, r24
    227c:	13 c0       	rjmp	.+38     	; 0x22a4 <DIO_EnuGetPortValue+0xaa>
			case DIO_PORTC :  	*Copy_Pu8PortValue = PINC ; break ;
    227e:	e3 e3       	ldi	r30, 0x33	; 51
    2280:	f0 e0       	ldi	r31, 0x00	; 0
    2282:	80 81       	ld	r24, Z
    2284:	eb 81       	ldd	r30, Y+3	; 0x03
    2286:	fc 81       	ldd	r31, Y+4	; 0x04
    2288:	80 83       	st	Z, r24
    228a:	0c c0       	rjmp	.+24     	; 0x22a4 <DIO_EnuGetPortValue+0xaa>
			case DIO_PORTD :  	*Copy_Pu8PortValue = PIND ; break ;
    228c:	e0 e3       	ldi	r30, 0x30	; 48
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	80 81       	ld	r24, Z
    2292:	eb 81       	ldd	r30, Y+3	; 0x03
    2294:	fc 81       	ldd	r31, Y+4	; 0x04
    2296:	80 83       	st	Z, r24
    2298:	05 c0       	rjmp	.+10     	; 0x22a4 <DIO_EnuGetPortValue+0xaa>
			default : state = OUTOFRANGE ;
    229a:	88 e0       	ldi	r24, 0x08	; 8
    229c:	89 83       	std	Y+1, r24	; 0x01
    229e:	02 c0       	rjmp	.+4      	; 0x22a4 <DIO_EnuGetPortValue+0xaa>

		}
	}
	else
	{
		state = NULL_POINTER;
    22a0:	80 e1       	ldi	r24, 0x10	; 16
    22a2:	89 83       	std	Y+1, r24	; 0x01
	}
return state ;
    22a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    22a6:	26 96       	adiw	r28, 0x06	; 6
    22a8:	0f b6       	in	r0, 0x3f	; 63
    22aa:	f8 94       	cli
    22ac:	de bf       	out	0x3e, r29	; 62
    22ae:	0f be       	out	0x3f, r0	; 63
    22b0:	cd bf       	out	0x3d, r28	; 61
    22b2:	cf 91       	pop	r28
    22b4:	df 91       	pop	r29
    22b6:	08 95       	ret

000022b8 <KEYPAD_voidInit>:
#include "Keypad_interface.h"
#include "KeyPad_config.h"
#include "Keypad_private.h"

void KEYPAD_voidInit(void)
{
    22b8:	df 93       	push	r29
    22ba:	cf 93       	push	r28
    22bc:	00 d0       	rcall	.+0      	; 0x22be <KEYPAD_voidInit+0x6>
    22be:	cd b7       	in	r28, 0x3d	; 61
    22c0:	de b7       	in	r29, 0x3e	; 62
	u8 loc_counter,loc_counter2;
	/* Init Rows */
	for( loc_counter =0 ; loc_counter < KEYPAD_NB_ROWS ; loc_counter++)
    22c2:	1a 82       	std	Y+2, r1	; 0x02
    22c4:	29 c0       	rjmp	.+82     	; 0x2318 <KEYPAD_voidInit+0x60>
	{
		/*Rows---> output*/
		DIO_EnuSetPinDirection(KRYPAD_ROWS_PORT[loc_counter],KRYPAD_ROWS_PIN[loc_counter],DIO_PIN_OUTPUT);
    22c6:	8a 81       	ldd	r24, Y+2	; 0x02
    22c8:	88 2f       	mov	r24, r24
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	fc 01       	movw	r30, r24
    22ce:	e8 59       	subi	r30, 0x98	; 152
    22d0:	ff 4f       	sbci	r31, 0xFF	; 255
    22d2:	20 81       	ld	r18, Z
    22d4:	8a 81       	ldd	r24, Y+2	; 0x02
    22d6:	88 2f       	mov	r24, r24
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	fc 01       	movw	r30, r24
    22dc:	e4 59       	subi	r30, 0x94	; 148
    22de:	ff 4f       	sbci	r31, 0xFF	; 255
    22e0:	90 81       	ld	r25, Z
    22e2:	82 2f       	mov	r24, r18
    22e4:	69 2f       	mov	r22, r25
    22e6:	41 e0       	ldi	r20, 0x01	; 1
    22e8:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <DIO_EnuSetPinDirection>
		/*set pins of row --> high*/
		DIO_EnuSetPinValue(KRYPAD_ROWS_PORT[loc_counter],KRYPAD_ROWS_PIN[loc_counter],DIO_PIN_HIGH);
    22ec:	8a 81       	ldd	r24, Y+2	; 0x02
    22ee:	88 2f       	mov	r24, r24
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	fc 01       	movw	r30, r24
    22f4:	e8 59       	subi	r30, 0x98	; 152
    22f6:	ff 4f       	sbci	r31, 0xFF	; 255
    22f8:	20 81       	ld	r18, Z
    22fa:	8a 81       	ldd	r24, Y+2	; 0x02
    22fc:	88 2f       	mov	r24, r24
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	fc 01       	movw	r30, r24
    2302:	e4 59       	subi	r30, 0x94	; 148
    2304:	ff 4f       	sbci	r31, 0xFF	; 255
    2306:	90 81       	ld	r25, Z
    2308:	82 2f       	mov	r24, r18
    230a:	69 2f       	mov	r22, r25
    230c:	41 e0       	ldi	r20, 0x01	; 1
    230e:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <DIO_EnuSetPinValue>

void KEYPAD_voidInit(void)
{
	u8 loc_counter,loc_counter2;
	/* Init Rows */
	for( loc_counter =0 ; loc_counter < KEYPAD_NB_ROWS ; loc_counter++)
    2312:	8a 81       	ldd	r24, Y+2	; 0x02
    2314:	8f 5f       	subi	r24, 0xFF	; 255
    2316:	8a 83       	std	Y+2, r24	; 0x02
    2318:	8a 81       	ldd	r24, Y+2	; 0x02
    231a:	84 30       	cpi	r24, 0x04	; 4
    231c:	a0 f2       	brcs	.-88     	; 0x22c6 <KEYPAD_voidInit+0xe>
		DIO_EnuSetPinDirection(KRYPAD_ROWS_PORT[loc_counter],KRYPAD_ROWS_PIN[loc_counter],DIO_PIN_OUTPUT);
		/*set pins of row --> high*/
		DIO_EnuSetPinValue(KRYPAD_ROWS_PORT[loc_counter],KRYPAD_ROWS_PIN[loc_counter],DIO_PIN_HIGH);
	}
	/* Init cols */
	for( loc_counter2 =0 ; loc_counter2 < KEYPAD_NB_COLS ; loc_counter2 ++)
    231e:	19 82       	std	Y+1, r1	; 0x01
    2320:	29 c0       	rjmp	.+82     	; 0x2374 <KEYPAD_voidInit+0xbc>
	{
		/*Cols---> input*/
		DIO_EnuSetPinDirection(KRYPAD_COLS_PORT[loc_counter2],KRYPAD_COLS_PIN[loc_counter2],DIO_PIN_INPUT);
    2322:	89 81       	ldd	r24, Y+1	; 0x01
    2324:	88 2f       	mov	r24, r24
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	fc 01       	movw	r30, r24
    232a:	e0 59       	subi	r30, 0x90	; 144
    232c:	ff 4f       	sbci	r31, 0xFF	; 255
    232e:	20 81       	ld	r18, Z
    2330:	89 81       	ldd	r24, Y+1	; 0x01
    2332:	88 2f       	mov	r24, r24
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	fc 01       	movw	r30, r24
    2338:	ec 58       	subi	r30, 0x8C	; 140
    233a:	ff 4f       	sbci	r31, 0xFF	; 255
    233c:	90 81       	ld	r25, Z
    233e:	82 2f       	mov	r24, r18
    2340:	69 2f       	mov	r22, r25
    2342:	40 e0       	ldi	r20, 0x00	; 0
    2344:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <DIO_EnuSetPinDirection>
		/*set pins of cols to be pull up*/
		DIO_EnuSetPinValue(KRYPAD_COLS_PORT[loc_counter2],KRYPAD_COLS_PIN[loc_counter2],DIO_PIN_HIGH);
    2348:	89 81       	ldd	r24, Y+1	; 0x01
    234a:	88 2f       	mov	r24, r24
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	fc 01       	movw	r30, r24
    2350:	e0 59       	subi	r30, 0x90	; 144
    2352:	ff 4f       	sbci	r31, 0xFF	; 255
    2354:	20 81       	ld	r18, Z
    2356:	89 81       	ldd	r24, Y+1	; 0x01
    2358:	88 2f       	mov	r24, r24
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	fc 01       	movw	r30, r24
    235e:	ec 58       	subi	r30, 0x8C	; 140
    2360:	ff 4f       	sbci	r31, 0xFF	; 255
    2362:	90 81       	ld	r25, Z
    2364:	82 2f       	mov	r24, r18
    2366:	69 2f       	mov	r22, r25
    2368:	41 e0       	ldi	r20, 0x01	; 1
    236a:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <DIO_EnuSetPinValue>
		DIO_EnuSetPinDirection(KRYPAD_ROWS_PORT[loc_counter],KRYPAD_ROWS_PIN[loc_counter],DIO_PIN_OUTPUT);
		/*set pins of row --> high*/
		DIO_EnuSetPinValue(KRYPAD_ROWS_PORT[loc_counter],KRYPAD_ROWS_PIN[loc_counter],DIO_PIN_HIGH);
	}
	/* Init cols */
	for( loc_counter2 =0 ; loc_counter2 < KEYPAD_NB_COLS ; loc_counter2 ++)
    236e:	89 81       	ldd	r24, Y+1	; 0x01
    2370:	8f 5f       	subi	r24, 0xFF	; 255
    2372:	89 83       	std	Y+1, r24	; 0x01
    2374:	89 81       	ldd	r24, Y+1	; 0x01
    2376:	84 30       	cpi	r24, 0x04	; 4
    2378:	a0 f2       	brcs	.-88     	; 0x2322 <KEYPAD_voidInit+0x6a>
		DIO_EnuSetPinDirection(KRYPAD_COLS_PORT[loc_counter2],KRYPAD_COLS_PIN[loc_counter2],DIO_PIN_INPUT);
		/*set pins of cols to be pull up*/
		DIO_EnuSetPinValue(KRYPAD_COLS_PORT[loc_counter2],KRYPAD_COLS_PIN[loc_counter2],DIO_PIN_HIGH);
	}

}
    237a:	0f 90       	pop	r0
    237c:	0f 90       	pop	r0
    237e:	cf 91       	pop	r28
    2380:	df 91       	pop	r29
    2382:	08 95       	ret

00002384 <KPD_u8GetPressedKey>:

u8 KPD_u8GetPressedKey(void)
{
    2384:	df 93       	push	r29
    2386:	cf 93       	push	r28
    2388:	00 d0       	rcall	.+0      	; 0x238a <KPD_u8GetPressedKey+0x6>
    238a:	00 d0       	rcall	.+0      	; 0x238c <KPD_u8GetPressedKey+0x8>
    238c:	cd b7       	in	r28, 0x3d	; 61
    238e:	de b7       	in	r29, 0x3e	; 62
	s8 loc_pressed_key = 0 ;
    2390:	1b 82       	std	Y+3, r1	; 0x03
	u8 loc_keyState ;

	for (u8 loc_row = 0 ; loc_row < KEYPAD_NB_ROWS ; loc_row++ )
    2392:	1a 82       	std	Y+2, r1	; 0x02
    2394:	7d c0       	rjmp	.+250    	; 0x2490 <KPD_u8GetPressedKey+0x10c>
	{
		/* Activate one row */
		DIO_EnuSetPinValue(KRYPAD_ROWS_PORT[loc_row] , KRYPAD_ROWS_PIN[loc_row] , DIO_PIN_LOW);
    2396:	8a 81       	ldd	r24, Y+2	; 0x02
    2398:	88 2f       	mov	r24, r24
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	fc 01       	movw	r30, r24
    239e:	e8 59       	subi	r30, 0x98	; 152
    23a0:	ff 4f       	sbci	r31, 0xFF	; 255
    23a2:	20 81       	ld	r18, Z
    23a4:	8a 81       	ldd	r24, Y+2	; 0x02
    23a6:	88 2f       	mov	r24, r24
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	fc 01       	movw	r30, r24
    23ac:	e4 59       	subi	r30, 0x94	; 148
    23ae:	ff 4f       	sbci	r31, 0xFF	; 255
    23b0:	90 81       	ld	r25, Z
    23b2:	82 2f       	mov	r24, r18
    23b4:	69 2f       	mov	r22, r25
    23b6:	40 e0       	ldi	r20, 0x00	; 0
    23b8:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <DIO_EnuSetPinValue>

		/* Check on columns */
		for (u8 loc_col = 0 ; loc_col < KEYPAD_NB_COLS ; loc_col++ )
    23bc:	19 82       	std	Y+1, r1	; 0x01
    23be:	4e c0       	rjmp	.+156    	; 0x245c <KPD_u8GetPressedKey+0xd8>
		{
			 DIO_EnuGetPinValue(KRYPAD_COLS_PORT[loc_col] ,KRYPAD_COLS_PIN[loc_col],&loc_keyState );
    23c0:	89 81       	ldd	r24, Y+1	; 0x01
    23c2:	88 2f       	mov	r24, r24
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	fc 01       	movw	r30, r24
    23c8:	e0 59       	subi	r30, 0x90	; 144
    23ca:	ff 4f       	sbci	r31, 0xFF	; 255
    23cc:	40 81       	ld	r20, Z
    23ce:	89 81       	ldd	r24, Y+1	; 0x01
    23d0:	88 2f       	mov	r24, r24
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	fc 01       	movw	r30, r24
    23d6:	ec 58       	subi	r30, 0x8C	; 140
    23d8:	ff 4f       	sbci	r31, 0xFF	; 255
    23da:	90 81       	ld	r25, Z
    23dc:	9e 01       	movw	r18, r28
    23de:	2c 5f       	subi	r18, 0xFC	; 252
    23e0:	3f 4f       	sbci	r19, 0xFF	; 255
    23e2:	84 2f       	mov	r24, r20
    23e4:	69 2f       	mov	r22, r25
    23e6:	a9 01       	movw	r20, r18
    23e8:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_EnuGetPinValue>
			/* Check on column */
			if (loc_keyState == 0)
    23ec:	8c 81       	ldd	r24, Y+4	; 0x04
    23ee:	88 23       	and	r24, r24
    23f0:	49 f5       	brne	.+82     	; 0x2444 <KPD_u8GetPressedKey+0xc0>
			{
				loc_pressed_key = KEYPAD_SWITCH[loc_row][loc_col];
    23f2:	8a 81       	ldd	r24, Y+2	; 0x02
    23f4:	48 2f       	mov	r20, r24
    23f6:	50 e0       	ldi	r21, 0x00	; 0
    23f8:	89 81       	ldd	r24, Y+1	; 0x01
    23fa:	28 2f       	mov	r18, r24
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	ca 01       	movw	r24, r20
    2400:	88 0f       	add	r24, r24
    2402:	99 1f       	adc	r25, r25
    2404:	88 0f       	add	r24, r24
    2406:	99 1f       	adc	r25, r25
    2408:	82 0f       	add	r24, r18
    240a:	93 1f       	adc	r25, r19
    240c:	fc 01       	movw	r30, r24
    240e:	e8 58       	subi	r30, 0x88	; 136
    2410:	ff 4f       	sbci	r31, 0xFF	; 255
    2412:	80 81       	ld	r24, Z
    2414:	8b 83       	std	Y+3, r24	; 0x03
    2416:	16 c0       	rjmp	.+44     	; 0x2444 <KPD_u8GetPressedKey+0xc0>
			}

			/* Wait to release the key */
			while (loc_keyState == 0)
			{
				 DIO_EnuGetPinValue(KRYPAD_COLS_PORT[loc_col] ,KRYPAD_COLS_PIN[loc_col],&loc_keyState );
    2418:	89 81       	ldd	r24, Y+1	; 0x01
    241a:	88 2f       	mov	r24, r24
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	fc 01       	movw	r30, r24
    2420:	e0 59       	subi	r30, 0x90	; 144
    2422:	ff 4f       	sbci	r31, 0xFF	; 255
    2424:	40 81       	ld	r20, Z
    2426:	89 81       	ldd	r24, Y+1	; 0x01
    2428:	88 2f       	mov	r24, r24
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	fc 01       	movw	r30, r24
    242e:	ec 58       	subi	r30, 0x8C	; 140
    2430:	ff 4f       	sbci	r31, 0xFF	; 255
    2432:	90 81       	ld	r25, Z
    2434:	9e 01       	movw	r18, r28
    2436:	2c 5f       	subi	r18, 0xFC	; 252
    2438:	3f 4f       	sbci	r19, 0xFF	; 255
    243a:	84 2f       	mov	r24, r20
    243c:	69 2f       	mov	r22, r25
    243e:	a9 01       	movw	r20, r18
    2440:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_EnuGetPinValue>
			{
				loc_pressed_key = KEYPAD_SWITCH[loc_row][loc_col];
			}

			/* Wait to release the key */
			while (loc_keyState == 0)
    2444:	8c 81       	ldd	r24, Y+4	; 0x04
    2446:	88 23       	and	r24, r24
    2448:	39 f3       	breq	.-50     	; 0x2418 <KPD_u8GetPressedKey+0x94>
			{
				 DIO_EnuGetPinValue(KRYPAD_COLS_PORT[loc_col] ,KRYPAD_COLS_PIN[loc_col],&loc_keyState );
			}

			/* Delay for debounce */
			Delay_ms(10);
    244a:	6a e0       	ldi	r22, 0x0A	; 10
    244c:	70 e0       	ldi	r23, 0x00	; 0
    244e:	80 e0       	ldi	r24, 0x00	; 0
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <Delay_ms>
	{
		/* Activate one row */
		DIO_EnuSetPinValue(KRYPAD_ROWS_PORT[loc_row] , KRYPAD_ROWS_PIN[loc_row] , DIO_PIN_LOW);

		/* Check on columns */
		for (u8 loc_col = 0 ; loc_col < KEYPAD_NB_COLS ; loc_col++ )
    2456:	89 81       	ldd	r24, Y+1	; 0x01
    2458:	8f 5f       	subi	r24, 0xFF	; 255
    245a:	89 83       	std	Y+1, r24	; 0x01
    245c:	89 81       	ldd	r24, Y+1	; 0x01
    245e:	84 30       	cpi	r24, 0x04	; 4
    2460:	08 f4       	brcc	.+2      	; 0x2464 <KPD_u8GetPressedKey+0xe0>
    2462:	ae cf       	rjmp	.-164    	; 0x23c0 <KPD_u8GetPressedKey+0x3c>
			Delay_ms(10);

		}

		/* Deactivate the row */
		DIO_EnuSetPinValue(KRYPAD_ROWS_PORT[loc_row] , KRYPAD_ROWS_PIN[loc_row] , DIO_PIN_HIGH);
    2464:	8a 81       	ldd	r24, Y+2	; 0x02
    2466:	88 2f       	mov	r24, r24
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	fc 01       	movw	r30, r24
    246c:	e8 59       	subi	r30, 0x98	; 152
    246e:	ff 4f       	sbci	r31, 0xFF	; 255
    2470:	20 81       	ld	r18, Z
    2472:	8a 81       	ldd	r24, Y+2	; 0x02
    2474:	88 2f       	mov	r24, r24
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	fc 01       	movw	r30, r24
    247a:	e4 59       	subi	r30, 0x94	; 148
    247c:	ff 4f       	sbci	r31, 0xFF	; 255
    247e:	90 81       	ld	r25, Z
    2480:	82 2f       	mov	r24, r18
    2482:	69 2f       	mov	r22, r25
    2484:	41 e0       	ldi	r20, 0x01	; 1
    2486:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <DIO_EnuSetPinValue>
u8 KPD_u8GetPressedKey(void)
{
	s8 loc_pressed_key = 0 ;
	u8 loc_keyState ;

	for (u8 loc_row = 0 ; loc_row < KEYPAD_NB_ROWS ; loc_row++ )
    248a:	8a 81       	ldd	r24, Y+2	; 0x02
    248c:	8f 5f       	subi	r24, 0xFF	; 255
    248e:	8a 83       	std	Y+2, r24	; 0x02
    2490:	8a 81       	ldd	r24, Y+2	; 0x02
    2492:	84 30       	cpi	r24, 0x04	; 4
    2494:	08 f4       	brcc	.+2      	; 0x2498 <KPD_u8GetPressedKey+0x114>
    2496:	7f cf       	rjmp	.-258    	; 0x2396 <KPD_u8GetPressedKey+0x12>
		}

		/* Deactivate the row */
		DIO_EnuSetPinValue(KRYPAD_ROWS_PORT[loc_row] , KRYPAD_ROWS_PIN[loc_row] , DIO_PIN_HIGH);
	}
	return loc_pressed_key ;
    2498:	8b 81       	ldd	r24, Y+3	; 0x03
}
    249a:	0f 90       	pop	r0
    249c:	0f 90       	pop	r0
    249e:	0f 90       	pop	r0
    24a0:	0f 90       	pop	r0
    24a2:	cf 91       	pop	r28
    24a4:	df 91       	pop	r29
    24a6:	08 95       	ret

000024a8 <main>:
#include "motor.h"

	u8 x=0;

int main(void)
{
    24a8:	df 93       	push	r29
    24aa:	cf 93       	push	r28
    24ac:	cd b7       	in	r28, 0x3d	; 61
    24ae:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidInit();
    24b0:	0e 94 42 07 	call	0xe84	; 0xe84 <CLCD_voidInit>
	KEYPAD_voidInit();
    24b4:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <KEYPAD_voidInit>
	DC_Motor_Init();
    24b8:	0e 94 8d 12 	call	0x251a	; 0x251a <DC_Motor_Init>
	DC_Motor_BackwardDir();
    24bc:	0e 94 b9 12 	call	0x2572	; 0x2572 <DC_Motor_BackwardDir>
Delay_ms(100);
    24c0:	64 e6       	ldi	r22, 0x64	; 100
    24c2:	70 e0       	ldi	r23, 0x00	; 0
    24c4:	80 e0       	ldi	r24, 0x00	; 0
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <Delay_ms>
CLCD_GoToXY(1,5);
    24cc:	81 e0       	ldi	r24, 0x01	; 1
    24ce:	65 e0       	ldi	r22, 0x05	; 5
    24d0:	0e 94 85 0b 	call	0x170a	; 0x170a <CLCD_GoToXY>
		LCD_Num(3);
    24d4:	83 e0       	ldi	r24, 0x03	; 3
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	0e 94 ad 0b 	call	0x175a	; 0x175a <LCD_Num>
	while(1)
	{
		x= KPD_u8GetPressedKey();
    24dc:	0e 94 c2 11 	call	0x2384	; 0x2384 <KPD_u8GetPressedKey>
    24e0:	80 93 88 00 	sts	0x0088, r24

		if(x !=0)
    24e4:	80 91 88 00 	lds	r24, 0x0088
    24e8:	88 23       	and	r24, r24
    24ea:	71 f0       	breq	.+28     	; 0x2508 <main+0x60>
		{
			CLCD_voidSendData(x);
    24ec:	80 91 88 00 	lds	r24, 0x0088
    24f0:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSendData>
			CLCD_GoToXY(1,5);
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	65 e0       	ldi	r22, 0x05	; 5
    24f8:	0e 94 85 0b 	call	0x170a	; 0x170a <CLCD_GoToXY>
					LCD_Num(x);
    24fc:	80 91 88 00 	lds	r24, 0x0088
    2500:	88 2f       	mov	r24, r24
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	0e 94 ad 0b 	call	0x175a	; 0x175a <LCD_Num>
		}
		DC_Motor_ForwardDir();
    2508:	0e 94 a8 12 	call	0x2550	; 0x2550 <DC_Motor_ForwardDir>
		Delay_ms(10);
    250c:	6a e0       	ldi	r22, 0x0A	; 10
    250e:	70 e0       	ldi	r23, 0x00	; 0
    2510:	80 e0       	ldi	r24, 0x00	; 0
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <Delay_ms>
    2518:	e1 cf       	rjmp	.-62     	; 0x24dc <main+0x34>

0000251a <DC_Motor_Init>:
#include "DIO_interface.h"

#include "motor.h"

void DC_Motor_Init(void)
{
    251a:	df 93       	push	r29
    251c:	cf 93       	push	r28
    251e:	cd b7       	in	r28, 0x3d	; 61
    2520:	de b7       	in	r29, 0x3e	; 62
	DIO_EnuSetPinDirection(DC_MOTOR_PORT, DC_MOTOR_PIN1 , DIO_PIN_OUTPUT);
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	60 e0       	ldi	r22, 0x00	; 0
    2526:	41 e0       	ldi	r20, 0x01	; 1
    2528:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <DIO_EnuSetPinDirection>
	DIO_EnuSetPinDirection(DC_MOTOR_PORT, DC_MOTOR_PIN2 , DIO_PIN_OUTPUT);
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	61 e0       	ldi	r22, 0x01	; 1
    2530:	41 e0       	ldi	r20, 0x01	; 1
    2532:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <DIO_EnuSetPinDirection>

	DIO_EnuSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN1 , DIO_PIN_LOW);
    2536:	81 e0       	ldi	r24, 0x01	; 1
    2538:	60 e0       	ldi	r22, 0x00	; 0
    253a:	40 e0       	ldi	r20, 0x00	; 0
    253c:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <DIO_EnuSetPinValue>
	DIO_EnuSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN2 , DIO_PIN_LOW);
    2540:	81 e0       	ldi	r24, 0x01	; 1
    2542:	61 e0       	ldi	r22, 0x01	; 1
    2544:	40 e0       	ldi	r20, 0x00	; 0
    2546:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <DIO_EnuSetPinValue>

}
    254a:	cf 91       	pop	r28
    254c:	df 91       	pop	r29
    254e:	08 95       	ret

00002550 <DC_Motor_ForwardDir>:

void DC_Motor_ForwardDir(void)
{
    2550:	df 93       	push	r29
    2552:	cf 93       	push	r28
    2554:	cd b7       	in	r28, 0x3d	; 61
    2556:	de b7       	in	r29, 0x3e	; 62
	DIO_EnuSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN1 , DIO_PIN_HIGH);
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	60 e0       	ldi	r22, 0x00	; 0
    255c:	41 e0       	ldi	r20, 0x01	; 1
    255e:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <DIO_EnuSetPinValue>
	DIO_EnuSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN2 , DIO_PIN_LOW);
    2562:	81 e0       	ldi	r24, 0x01	; 1
    2564:	61 e0       	ldi	r22, 0x01	; 1
    2566:	40 e0       	ldi	r20, 0x00	; 0
    2568:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <DIO_EnuSetPinValue>
}
    256c:	cf 91       	pop	r28
    256e:	df 91       	pop	r29
    2570:	08 95       	ret

00002572 <DC_Motor_BackwardDir>:
void DC_Motor_BackwardDir(void)
{
    2572:	df 93       	push	r29
    2574:	cf 93       	push	r28
    2576:	cd b7       	in	r28, 0x3d	; 61
    2578:	de b7       	in	r29, 0x3e	; 62
	DIO_EnuSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN1 , DIO_PIN_LOW);
    257a:	81 e0       	ldi	r24, 0x01	; 1
    257c:	60 e0       	ldi	r22, 0x00	; 0
    257e:	40 e0       	ldi	r20, 0x00	; 0
    2580:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <DIO_EnuSetPinValue>
	DIO_EnuSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN2 , DIO_PIN_HIGH);
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	61 e0       	ldi	r22, 0x01	; 1
    2588:	41 e0       	ldi	r20, 0x01	; 1
    258a:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <DIO_EnuSetPinValue>
}
    258e:	cf 91       	pop	r28
    2590:	df 91       	pop	r29
    2592:	08 95       	ret

00002594 <DC_Motor_Stop>:
void DC_Motor_Stop(void)
{
    2594:	df 93       	push	r29
    2596:	cf 93       	push	r28
    2598:	cd b7       	in	r28, 0x3d	; 61
    259a:	de b7       	in	r29, 0x3e	; 62
	DIO_EnuSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN1 , DIO_PIN_LOW);
    259c:	81 e0       	ldi	r24, 0x01	; 1
    259e:	60 e0       	ldi	r22, 0x00	; 0
    25a0:	40 e0       	ldi	r20, 0x00	; 0
    25a2:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <DIO_EnuSetPinValue>
	DIO_EnuSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN2 , DIO_PIN_LOW);
    25a6:	81 e0       	ldi	r24, 0x01	; 1
    25a8:	61 e0       	ldi	r22, 0x01	; 1
    25aa:	40 e0       	ldi	r20, 0x00	; 0
    25ac:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <DIO_EnuSetPinValue>
}
    25b0:	cf 91       	pop	r28
    25b2:	df 91       	pop	r29
    25b4:	08 95       	ret

000025b6 <__mulsi3>:
    25b6:	62 9f       	mul	r22, r18
    25b8:	d0 01       	movw	r26, r0
    25ba:	73 9f       	mul	r23, r19
    25bc:	f0 01       	movw	r30, r0
    25be:	82 9f       	mul	r24, r18
    25c0:	e0 0d       	add	r30, r0
    25c2:	f1 1d       	adc	r31, r1
    25c4:	64 9f       	mul	r22, r20
    25c6:	e0 0d       	add	r30, r0
    25c8:	f1 1d       	adc	r31, r1
    25ca:	92 9f       	mul	r25, r18
    25cc:	f0 0d       	add	r31, r0
    25ce:	83 9f       	mul	r24, r19
    25d0:	f0 0d       	add	r31, r0
    25d2:	74 9f       	mul	r23, r20
    25d4:	f0 0d       	add	r31, r0
    25d6:	65 9f       	mul	r22, r21
    25d8:	f0 0d       	add	r31, r0
    25da:	99 27       	eor	r25, r25
    25dc:	72 9f       	mul	r23, r18
    25de:	b0 0d       	add	r27, r0
    25e0:	e1 1d       	adc	r30, r1
    25e2:	f9 1f       	adc	r31, r25
    25e4:	63 9f       	mul	r22, r19
    25e6:	b0 0d       	add	r27, r0
    25e8:	e1 1d       	adc	r30, r1
    25ea:	f9 1f       	adc	r31, r25
    25ec:	bd 01       	movw	r22, r26
    25ee:	cf 01       	movw	r24, r30
    25f0:	11 24       	eor	r1, r1
    25f2:	08 95       	ret

000025f4 <__udivmodsi4>:
    25f4:	a1 e2       	ldi	r26, 0x21	; 33
    25f6:	1a 2e       	mov	r1, r26
    25f8:	aa 1b       	sub	r26, r26
    25fa:	bb 1b       	sub	r27, r27
    25fc:	fd 01       	movw	r30, r26
    25fe:	0d c0       	rjmp	.+26     	; 0x261a <__udivmodsi4_ep>

00002600 <__udivmodsi4_loop>:
    2600:	aa 1f       	adc	r26, r26
    2602:	bb 1f       	adc	r27, r27
    2604:	ee 1f       	adc	r30, r30
    2606:	ff 1f       	adc	r31, r31
    2608:	a2 17       	cp	r26, r18
    260a:	b3 07       	cpc	r27, r19
    260c:	e4 07       	cpc	r30, r20
    260e:	f5 07       	cpc	r31, r21
    2610:	20 f0       	brcs	.+8      	; 0x261a <__udivmodsi4_ep>
    2612:	a2 1b       	sub	r26, r18
    2614:	b3 0b       	sbc	r27, r19
    2616:	e4 0b       	sbc	r30, r20
    2618:	f5 0b       	sbc	r31, r21

0000261a <__udivmodsi4_ep>:
    261a:	66 1f       	adc	r22, r22
    261c:	77 1f       	adc	r23, r23
    261e:	88 1f       	adc	r24, r24
    2620:	99 1f       	adc	r25, r25
    2622:	1a 94       	dec	r1
    2624:	69 f7       	brne	.-38     	; 0x2600 <__udivmodsi4_loop>
    2626:	60 95       	com	r22
    2628:	70 95       	com	r23
    262a:	80 95       	com	r24
    262c:	90 95       	com	r25
    262e:	9b 01       	movw	r18, r22
    2630:	ac 01       	movw	r20, r24
    2632:	bd 01       	movw	r22, r26
    2634:	cf 01       	movw	r24, r30
    2636:	08 95       	ret

00002638 <__prologue_saves__>:
    2638:	2f 92       	push	r2
    263a:	3f 92       	push	r3
    263c:	4f 92       	push	r4
    263e:	5f 92       	push	r5
    2640:	6f 92       	push	r6
    2642:	7f 92       	push	r7
    2644:	8f 92       	push	r8
    2646:	9f 92       	push	r9
    2648:	af 92       	push	r10
    264a:	bf 92       	push	r11
    264c:	cf 92       	push	r12
    264e:	df 92       	push	r13
    2650:	ef 92       	push	r14
    2652:	ff 92       	push	r15
    2654:	0f 93       	push	r16
    2656:	1f 93       	push	r17
    2658:	cf 93       	push	r28
    265a:	df 93       	push	r29
    265c:	cd b7       	in	r28, 0x3d	; 61
    265e:	de b7       	in	r29, 0x3e	; 62
    2660:	ca 1b       	sub	r28, r26
    2662:	db 0b       	sbc	r29, r27
    2664:	0f b6       	in	r0, 0x3f	; 63
    2666:	f8 94       	cli
    2668:	de bf       	out	0x3e, r29	; 62
    266a:	0f be       	out	0x3f, r0	; 63
    266c:	cd bf       	out	0x3d, r28	; 61
    266e:	09 94       	ijmp

00002670 <__epilogue_restores__>:
    2670:	2a 88       	ldd	r2, Y+18	; 0x12
    2672:	39 88       	ldd	r3, Y+17	; 0x11
    2674:	48 88       	ldd	r4, Y+16	; 0x10
    2676:	5f 84       	ldd	r5, Y+15	; 0x0f
    2678:	6e 84       	ldd	r6, Y+14	; 0x0e
    267a:	7d 84       	ldd	r7, Y+13	; 0x0d
    267c:	8c 84       	ldd	r8, Y+12	; 0x0c
    267e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2680:	aa 84       	ldd	r10, Y+10	; 0x0a
    2682:	b9 84       	ldd	r11, Y+9	; 0x09
    2684:	c8 84       	ldd	r12, Y+8	; 0x08
    2686:	df 80       	ldd	r13, Y+7	; 0x07
    2688:	ee 80       	ldd	r14, Y+6	; 0x06
    268a:	fd 80       	ldd	r15, Y+5	; 0x05
    268c:	0c 81       	ldd	r16, Y+4	; 0x04
    268e:	1b 81       	ldd	r17, Y+3	; 0x03
    2690:	aa 81       	ldd	r26, Y+2	; 0x02
    2692:	b9 81       	ldd	r27, Y+1	; 0x01
    2694:	ce 0f       	add	r28, r30
    2696:	d1 1d       	adc	r29, r1
    2698:	0f b6       	in	r0, 0x3f	; 63
    269a:	f8 94       	cli
    269c:	de bf       	out	0x3e, r29	; 62
    269e:	0f be       	out	0x3f, r0	; 63
    26a0:	cd bf       	out	0x3d, r28	; 61
    26a2:	ed 01       	movw	r28, r26
    26a4:	08 95       	ret

000026a6 <itoa>:
    26a6:	fb 01       	movw	r30, r22
    26a8:	9f 01       	movw	r18, r30
    26aa:	e8 94       	clt
    26ac:	42 30       	cpi	r20, 0x02	; 2
    26ae:	c4 f0       	brlt	.+48     	; 0x26e0 <itoa+0x3a>
    26b0:	45 32       	cpi	r20, 0x25	; 37
    26b2:	b4 f4       	brge	.+44     	; 0x26e0 <itoa+0x3a>
    26b4:	4a 30       	cpi	r20, 0x0A	; 10
    26b6:	29 f4       	brne	.+10     	; 0x26c2 <itoa+0x1c>
    26b8:	97 fb       	bst	r25, 7
    26ba:	1e f4       	brtc	.+6      	; 0x26c2 <itoa+0x1c>
    26bc:	90 95       	com	r25
    26be:	81 95       	neg	r24
    26c0:	9f 4f       	sbci	r25, 0xFF	; 255
    26c2:	64 2f       	mov	r22, r20
    26c4:	77 27       	eor	r23, r23
    26c6:	0e 94 84 13 	call	0x2708	; 0x2708 <__udivmodhi4>
    26ca:	80 5d       	subi	r24, 0xD0	; 208
    26cc:	8a 33       	cpi	r24, 0x3A	; 58
    26ce:	0c f0       	brlt	.+2      	; 0x26d2 <itoa+0x2c>
    26d0:	89 5d       	subi	r24, 0xD9	; 217
    26d2:	81 93       	st	Z+, r24
    26d4:	cb 01       	movw	r24, r22
    26d6:	00 97       	sbiw	r24, 0x00	; 0
    26d8:	a1 f7       	brne	.-24     	; 0x26c2 <itoa+0x1c>
    26da:	16 f4       	brtc	.+4      	; 0x26e0 <itoa+0x3a>
    26dc:	5d e2       	ldi	r21, 0x2D	; 45
    26de:	51 93       	st	Z+, r21
    26e0:	10 82       	st	Z, r1
    26e2:	c9 01       	movw	r24, r18
    26e4:	0c 94 74 13 	jmp	0x26e8	; 0x26e8 <strrev>

000026e8 <strrev>:
    26e8:	dc 01       	movw	r26, r24
    26ea:	fc 01       	movw	r30, r24
    26ec:	67 2f       	mov	r22, r23
    26ee:	71 91       	ld	r23, Z+
    26f0:	77 23       	and	r23, r23
    26f2:	e1 f7       	brne	.-8      	; 0x26ec <strrev+0x4>
    26f4:	32 97       	sbiw	r30, 0x02	; 2
    26f6:	04 c0       	rjmp	.+8      	; 0x2700 <strrev+0x18>
    26f8:	7c 91       	ld	r23, X
    26fa:	6d 93       	st	X+, r22
    26fc:	70 83       	st	Z, r23
    26fe:	62 91       	ld	r22, -Z
    2700:	ae 17       	cp	r26, r30
    2702:	bf 07       	cpc	r27, r31
    2704:	c8 f3       	brcs	.-14     	; 0x26f8 <strrev+0x10>
    2706:	08 95       	ret

00002708 <__udivmodhi4>:
    2708:	aa 1b       	sub	r26, r26
    270a:	bb 1b       	sub	r27, r27
    270c:	51 e1       	ldi	r21, 0x11	; 17
    270e:	07 c0       	rjmp	.+14     	; 0x271e <__udivmodhi4_ep>

00002710 <__udivmodhi4_loop>:
    2710:	aa 1f       	adc	r26, r26
    2712:	bb 1f       	adc	r27, r27
    2714:	a6 17       	cp	r26, r22
    2716:	b7 07       	cpc	r27, r23
    2718:	10 f0       	brcs	.+4      	; 0x271e <__udivmodhi4_ep>
    271a:	a6 1b       	sub	r26, r22
    271c:	b7 0b       	sbc	r27, r23

0000271e <__udivmodhi4_ep>:
    271e:	88 1f       	adc	r24, r24
    2720:	99 1f       	adc	r25, r25
    2722:	5a 95       	dec	r21
    2724:	a9 f7       	brne	.-22     	; 0x2710 <__udivmodhi4_loop>
    2726:	80 95       	com	r24
    2728:	90 95       	com	r25
    272a:	bc 01       	movw	r22, r24
    272c:	cd 01       	movw	r24, r26
    272e:	08 95       	ret

00002730 <_exit>:
    2730:	f8 94       	cli

00002732 <__stop_program>:
    2732:	ff cf       	rjmp	.-2      	; 0x2732 <__stop_program>
