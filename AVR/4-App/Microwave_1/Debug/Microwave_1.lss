
Microwave_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d26  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ae  00800060  00002d26  00002dba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  0080010e  0080010e  00002e68  2**0
                  ALLOC
  3 .stab         00003a5c  00000000  00000000  00002e68  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000018c9  00000000  00000000  000068c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000818d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000082cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000843d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a086  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000af71  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bd20  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000be80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c10d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c8db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 4f 09 	jmp	0x129e	; 0x129e <__vector_1>
       8:	0c 94 e8 09 	jmp	0x13d0	; 0x13d0 <__vector_2>
       c:	0c 94 68 0a 	jmp	0x14d0	; 0x14d0 <__vector_3>
      10:	0c 94 6e 0d 	jmp	0x1adc	; 0x1adc <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 d9 0e 	jmp	0x1db2	; 0x1db2 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e2       	ldi	r30, 0x26	; 38
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 30       	cpi	r26, 0x0E	; 14
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e0       	ldi	r26, 0x0E	; 14
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 31       	cpi	r26, 0x1E	; 30
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3e 13 	call	0x267c	; 0x267c <main>
      8a:	0c 94 91 16 	jmp	0x2d22	; 0x2d22 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5a 16 	jmp	0x2cb4	; 0x2cb4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 ef       	ldi	r26, 0xF5	; 245
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 76 16 	jmp	0x2cec	; 0x2cec <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 66 16 	jmp	0x2ccc	; 0x2ccc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 82 16 	jmp	0x2d04	; 0x2d04 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 66 16 	jmp	0x2ccc	; 0x2ccc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 82 16 	jmp	0x2d04	; 0x2d04 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5a 16 	jmp	0x2cb4	; 0x2cb4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 ef       	ldi	r24, 0xF5	; 245
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 76 16 	jmp	0x2cec	; 0x2cec <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 66 16 	jmp	0x2ccc	; 0x2ccc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 82 16 	jmp	0x2d04	; 0x2d04 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 66 16 	jmp	0x2ccc	; 0x2ccc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 82 16 	jmp	0x2d04	; 0x2d04 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 66 16 	jmp	0x2ccc	; 0x2ccc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 82 16 	jmp	0x2d04	; 0x2d04 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 6a 16 	jmp	0x2cd4	; 0x2cd4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 86 16 	jmp	0x2d0c	; 0x2d0c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Delay_ms>:
#include "STD_types.h"

void Delay_ms(u32 DelayValue)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2c 97       	sbiw	r28, 0x0c	; 12
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	69 87       	std	Y+9, r22	; 0x09
     b5c:	7a 87       	std	Y+10, r23	; 0x0a
     b5e:	8b 87       	std	Y+11, r24	; 0x0b
     b60:	9c 87       	std	Y+12, r25	; 0x0c
	u32 i;
	u32 counts=370*DelayValue;
     b62:	89 85       	ldd	r24, Y+9	; 0x09
     b64:	9a 85       	ldd	r25, Y+10	; 0x0a
     b66:	ab 85       	ldd	r26, Y+11	; 0x0b
     b68:	bc 85       	ldd	r27, Y+12	; 0x0c
     b6a:	22 e7       	ldi	r18, 0x72	; 114
     b6c:	31 e0       	ldi	r19, 0x01	; 1
     b6e:	40 e0       	ldi	r20, 0x00	; 0
     b70:	50 e0       	ldi	r21, 0x00	; 0
     b72:	bc 01       	movw	r22, r24
     b74:	cd 01       	movw	r24, r26
     b76:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <__mulsi3>
     b7a:	dc 01       	movw	r26, r24
     b7c:	cb 01       	movw	r24, r22
     b7e:	89 83       	std	Y+1, r24	; 0x01
     b80:	9a 83       	std	Y+2, r25	; 0x02
     b82:	ab 83       	std	Y+3, r26	; 0x03
     b84:	bc 83       	std	Y+4, r27	; 0x04
	for(i=0;i<counts;i++)
     b86:	1d 82       	std	Y+5, r1	; 0x05
     b88:	1e 82       	std	Y+6, r1	; 0x06
     b8a:	1f 82       	std	Y+7, r1	; 0x07
     b8c:	18 86       	std	Y+8, r1	; 0x08
     b8e:	0c c0       	rjmp	.+24     	; 0xba8 <Delay_ms+0x62>
	{
		asm("nop");
     b90:	00 00       	nop

void Delay_ms(u32 DelayValue)
{
	u32 i;
	u32 counts=370*DelayValue;
	for(i=0;i<counts;i++)
     b92:	8d 81       	ldd	r24, Y+5	; 0x05
     b94:	9e 81       	ldd	r25, Y+6	; 0x06
     b96:	af 81       	ldd	r26, Y+7	; 0x07
     b98:	b8 85       	ldd	r27, Y+8	; 0x08
     b9a:	01 96       	adiw	r24, 0x01	; 1
     b9c:	a1 1d       	adc	r26, r1
     b9e:	b1 1d       	adc	r27, r1
     ba0:	8d 83       	std	Y+5, r24	; 0x05
     ba2:	9e 83       	std	Y+6, r25	; 0x06
     ba4:	af 83       	std	Y+7, r26	; 0x07
     ba6:	b8 87       	std	Y+8, r27	; 0x08
     ba8:	2d 81       	ldd	r18, Y+5	; 0x05
     baa:	3e 81       	ldd	r19, Y+6	; 0x06
     bac:	4f 81       	ldd	r20, Y+7	; 0x07
     bae:	58 85       	ldd	r21, Y+8	; 0x08
     bb0:	89 81       	ldd	r24, Y+1	; 0x01
     bb2:	9a 81       	ldd	r25, Y+2	; 0x02
     bb4:	ab 81       	ldd	r26, Y+3	; 0x03
     bb6:	bc 81       	ldd	r27, Y+4	; 0x04
     bb8:	28 17       	cp	r18, r24
     bba:	39 07       	cpc	r19, r25
     bbc:	4a 07       	cpc	r20, r26
     bbe:	5b 07       	cpc	r21, r27
     bc0:	38 f3       	brcs	.-50     	; 0xb90 <Delay_ms+0x4a>
	{
		asm("nop");
	}	
}
     bc2:	2c 96       	adiw	r28, 0x0c	; 12
     bc4:	0f b6       	in	r0, 0x3f	; 63
     bc6:	f8 94       	cli
     bc8:	de bf       	out	0x3e, r29	; 62
     bca:	0f be       	out	0x3f, r0	; 63
     bcc:	cd bf       	out	0x3d, r28	; 61
     bce:	cf 91       	pop	r28
     bd0:	df 91       	pop	r29
     bd2:	08 95       	ret

00000bd4 <Delay_us>:
void Delay_us(u32 DelayValue)
{
     bd4:	df 93       	push	r29
     bd6:	cf 93       	push	r28
     bd8:	cd b7       	in	r28, 0x3d	; 61
     bda:	de b7       	in	r29, 0x3e	; 62
     bdc:	2c 97       	sbiw	r28, 0x0c	; 12
     bde:	0f b6       	in	r0, 0x3f	; 63
     be0:	f8 94       	cli
     be2:	de bf       	out	0x3e, r29	; 62
     be4:	0f be       	out	0x3f, r0	; 63
     be6:	cd bf       	out	0x3d, r28	; 61
     be8:	69 87       	std	Y+9, r22	; 0x09
     bea:	7a 87       	std	Y+10, r23	; 0x0a
     bec:	8b 87       	std	Y+11, r24	; 0x0b
     bee:	9c 87       	std	Y+12, r25	; 0x0c
	u32 i;
	u32 counts=(((DelayValue-47)*375)/1000);
     bf0:	89 85       	ldd	r24, Y+9	; 0x09
     bf2:	9a 85       	ldd	r25, Y+10	; 0x0a
     bf4:	ab 85       	ldd	r26, Y+11	; 0x0b
     bf6:	bc 85       	ldd	r27, Y+12	; 0x0c
     bf8:	27 e7       	ldi	r18, 0x77	; 119
     bfa:	31 e0       	ldi	r19, 0x01	; 1
     bfc:	40 e0       	ldi	r20, 0x00	; 0
     bfe:	50 e0       	ldi	r21, 0x00	; 0
     c00:	bc 01       	movw	r22, r24
     c02:	cd 01       	movw	r24, r26
     c04:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <__mulsi3>
     c08:	dc 01       	movw	r26, r24
     c0a:	cb 01       	movw	r24, r22
     c0c:	89 5d       	subi	r24, 0xD9	; 217
     c0e:	94 44       	sbci	r25, 0x44	; 68
     c10:	a0 40       	sbci	r26, 0x00	; 0
     c12:	b0 40       	sbci	r27, 0x00	; 0
     c14:	28 ee       	ldi	r18, 0xE8	; 232
     c16:	33 e0       	ldi	r19, 0x03	; 3
     c18:	40 e0       	ldi	r20, 0x00	; 0
     c1a:	50 e0       	ldi	r21, 0x00	; 0
     c1c:	bc 01       	movw	r22, r24
     c1e:	cd 01       	movw	r24, r26
     c20:	0e 94 38 16 	call	0x2c70	; 0x2c70 <__udivmodsi4>
     c24:	da 01       	movw	r26, r20
     c26:	c9 01       	movw	r24, r18
     c28:	89 83       	std	Y+1, r24	; 0x01
     c2a:	9a 83       	std	Y+2, r25	; 0x02
     c2c:	ab 83       	std	Y+3, r26	; 0x03
     c2e:	bc 83       	std	Y+4, r27	; 0x04
	for(i=0;i<counts;i++)
     c30:	1d 82       	std	Y+5, r1	; 0x05
     c32:	1e 82       	std	Y+6, r1	; 0x06
     c34:	1f 82       	std	Y+7, r1	; 0x07
     c36:	18 86       	std	Y+8, r1	; 0x08
     c38:	0c c0       	rjmp	.+24     	; 0xc52 <Delay_us+0x7e>
	{
		asm("nop");
     c3a:	00 00       	nop
}
void Delay_us(u32 DelayValue)
{
	u32 i;
	u32 counts=(((DelayValue-47)*375)/1000);
	for(i=0;i<counts;i++)
     c3c:	8d 81       	ldd	r24, Y+5	; 0x05
     c3e:	9e 81       	ldd	r25, Y+6	; 0x06
     c40:	af 81       	ldd	r26, Y+7	; 0x07
     c42:	b8 85       	ldd	r27, Y+8	; 0x08
     c44:	01 96       	adiw	r24, 0x01	; 1
     c46:	a1 1d       	adc	r26, r1
     c48:	b1 1d       	adc	r27, r1
     c4a:	8d 83       	std	Y+5, r24	; 0x05
     c4c:	9e 83       	std	Y+6, r25	; 0x06
     c4e:	af 83       	std	Y+7, r26	; 0x07
     c50:	b8 87       	std	Y+8, r27	; 0x08
     c52:	2d 81       	ldd	r18, Y+5	; 0x05
     c54:	3e 81       	ldd	r19, Y+6	; 0x06
     c56:	4f 81       	ldd	r20, Y+7	; 0x07
     c58:	58 85       	ldd	r21, Y+8	; 0x08
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	9a 81       	ldd	r25, Y+2	; 0x02
     c5e:	ab 81       	ldd	r26, Y+3	; 0x03
     c60:	bc 81       	ldd	r27, Y+4	; 0x04
     c62:	28 17       	cp	r18, r24
     c64:	39 07       	cpc	r19, r25
     c66:	4a 07       	cpc	r20, r26
     c68:	5b 07       	cpc	r21, r27
     c6a:	38 f3       	brcs	.-50     	; 0xc3a <Delay_us+0x66>
	{
		asm("nop");
	}
}
     c6c:	2c 96       	adiw	r28, 0x0c	; 12
     c6e:	0f b6       	in	r0, 0x3f	; 63
     c70:	f8 94       	cli
     c72:	de bf       	out	0x3e, r29	; 62
     c74:	0f be       	out	0x3f, r0	; 63
     c76:	cd bf       	out	0x3d, r28	; 61
     c78:	cf 91       	pop	r28
     c7a:	df 91       	pop	r29
     c7c:	08 95       	ret

00000c7e <DIO_enumSetPortDirection>:
/**************************/

/************************** FUNCTIONS IMPLEMENTATION **************************/

ErrorStatus  DIO_enumSetPortDirection( u8 DIO_u8PortID,u8 DIO_u8Direction)
{
     c7e:	df 93       	push	r29
     c80:	cf 93       	push	r28
     c82:	00 d0       	rcall	.+0      	; 0xc84 <DIO_enumSetPortDirection+0x6>
     c84:	00 d0       	rcall	.+0      	; 0xc86 <DIO_enumSetPortDirection+0x8>
     c86:	0f 92       	push	r0
     c88:	cd b7       	in	r28, 0x3d	; 61
     c8a:	de b7       	in	r29, 0x3e	; 62
     c8c:	8a 83       	std	Y+2, r24	; 0x02
     c8e:	6b 83       	std	Y+3, r22	; 0x03
	ErrorStatus Local_error= ES_NOK;
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	89 83       	std	Y+1, r24	; 0x01
	if(DIO_u8PortID < 4)
     c94:	8a 81       	ldd	r24, Y+2	; 0x02
     c96:	84 30       	cpi	r24, 0x04	; 4
     c98:	a0 f5       	brcc	.+104    	; 0xd02 <DIO_enumSetPortDirection+0x84>
	{
		switch(DIO_u8PortID)
     c9a:	8a 81       	ldd	r24, Y+2	; 0x02
     c9c:	28 2f       	mov	r18, r24
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	3d 83       	std	Y+5, r19	; 0x05
     ca2:	2c 83       	std	Y+4, r18	; 0x04
     ca4:	8c 81       	ldd	r24, Y+4	; 0x04
     ca6:	9d 81       	ldd	r25, Y+5	; 0x05
     ca8:	81 30       	cpi	r24, 0x01	; 1
     caa:	91 05       	cpc	r25, r1
     cac:	d1 f0       	breq	.+52     	; 0xce2 <DIO_enumSetPortDirection+0x64>
     cae:	2c 81       	ldd	r18, Y+4	; 0x04
     cb0:	3d 81       	ldd	r19, Y+5	; 0x05
     cb2:	22 30       	cpi	r18, 0x02	; 2
     cb4:	31 05       	cpc	r19, r1
     cb6:	2c f4       	brge	.+10     	; 0xcc2 <DIO_enumSetPortDirection+0x44>
     cb8:	8c 81       	ldd	r24, Y+4	; 0x04
     cba:	9d 81       	ldd	r25, Y+5	; 0x05
     cbc:	00 97       	sbiw	r24, 0x00	; 0
     cbe:	61 f0       	breq	.+24     	; 0xcd8 <DIO_enumSetPortDirection+0x5a>
     cc0:	1e c0       	rjmp	.+60     	; 0xcfe <DIO_enumSetPortDirection+0x80>
     cc2:	2c 81       	ldd	r18, Y+4	; 0x04
     cc4:	3d 81       	ldd	r19, Y+5	; 0x05
     cc6:	22 30       	cpi	r18, 0x02	; 2
     cc8:	31 05       	cpc	r19, r1
     cca:	81 f0       	breq	.+32     	; 0xcec <DIO_enumSetPortDirection+0x6e>
     ccc:	8c 81       	ldd	r24, Y+4	; 0x04
     cce:	9d 81       	ldd	r25, Y+5	; 0x05
     cd0:	83 30       	cpi	r24, 0x03	; 3
     cd2:	91 05       	cpc	r25, r1
     cd4:	81 f0       	breq	.+32     	; 0xcf6 <DIO_enumSetPortDirection+0x78>
     cd6:	13 c0       	rjmp	.+38     	; 0xcfe <DIO_enumSetPortDirection+0x80>
		{
			case DIO_U8_PORT_A: DIO_U8_DDRA = DIO_u8Direction; break;
     cd8:	ea e3       	ldi	r30, 0x3A	; 58
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	8b 81       	ldd	r24, Y+3	; 0x03
     cde:	80 83       	st	Z, r24
     ce0:	0e c0       	rjmp	.+28     	; 0xcfe <DIO_enumSetPortDirection+0x80>
			case DIO_U8_PORT_B: DIO_U8_DDRB = DIO_u8Direction; break;
     ce2:	e7 e3       	ldi	r30, 0x37	; 55
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	8b 81       	ldd	r24, Y+3	; 0x03
     ce8:	80 83       	st	Z, r24
     cea:	09 c0       	rjmp	.+18     	; 0xcfe <DIO_enumSetPortDirection+0x80>
			case DIO_U8_PORT_C: DIO_U8_DDRC = DIO_u8Direction; break;
     cec:	e4 e3       	ldi	r30, 0x34	; 52
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	8b 81       	ldd	r24, Y+3	; 0x03
     cf2:	80 83       	st	Z, r24
     cf4:	04 c0       	rjmp	.+8      	; 0xcfe <DIO_enumSetPortDirection+0x80>
			case DIO_U8_PORT_D: DIO_U8_DDRD = DIO_u8Direction; break;
     cf6:	e1 e3       	ldi	r30, 0x31	; 49
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	8b 81       	ldd	r24, Y+3	; 0x03
     cfc:	80 83       	st	Z, r24
		}
		Local_error= ES_OK;
     cfe:	19 82       	std	Y+1, r1	; 0x01
     d00:	02 c0       	rjmp	.+4      	; 0xd06 <DIO_enumSetPortDirection+0x88>
	}
	else
	{
	Local_error= ES_OUT_OF_RANGE;	
     d02:	82 e0       	ldi	r24, 0x02	; 2
     d04:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_error;
     d06:	89 81       	ldd	r24, Y+1	; 0x01
}  
     d08:	0f 90       	pop	r0
     d0a:	0f 90       	pop	r0
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	cf 91       	pop	r28
     d14:	df 91       	pop	r29
     d16:	08 95       	ret

00000d18 <DIO_enumSetPinDirection>:
/******************************************************************************/
ErrorStatus  DIO_enumSetPinDirection( u8 DIO_u8PortID,u8 DIO_u8PinID,u8 DIO_u8Direction)
{
     d18:	df 93       	push	r29
     d1a:	cf 93       	push	r28
     d1c:	00 d0       	rcall	.+0      	; 0xd1e <DIO_enumSetPinDirection+0x6>
     d1e:	00 d0       	rcall	.+0      	; 0xd20 <DIO_enumSetPinDirection+0x8>
     d20:	00 d0       	rcall	.+0      	; 0xd22 <DIO_enumSetPinDirection+0xa>
     d22:	cd b7       	in	r28, 0x3d	; 61
     d24:	de b7       	in	r29, 0x3e	; 62
     d26:	8a 83       	std	Y+2, r24	; 0x02
     d28:	6b 83       	std	Y+3, r22	; 0x03
     d2a:	4c 83       	std	Y+4, r20	; 0x04
	ErrorStatus Local_error= ES_NOK;
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	89 83       	std	Y+1, r24	; 0x01
	if((DIO_u8PortID < 4)&&(DIO_u8PinID <8))
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	84 30       	cpi	r24, 0x04	; 4
     d34:	08 f0       	brcs	.+2      	; 0xd38 <DIO_enumSetPinDirection+0x20>
     d36:	7b c0       	rjmp	.+246    	; 0xe2e <DIO_enumSetPinDirection+0x116>
     d38:	8b 81       	ldd	r24, Y+3	; 0x03
     d3a:	88 30       	cpi	r24, 0x08	; 8
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <DIO_enumSetPinDirection+0x28>
     d3e:	77 c0       	rjmp	.+238    	; 0xe2e <DIO_enumSetPinDirection+0x116>
	{
		if(DIO_u8Direction==DIO_U8_OUTPUT)
     d40:	8c 81       	ldd	r24, Y+4	; 0x04
     d42:	81 30       	cpi	r24, 0x01	; 1
     d44:	09 f0       	breq	.+2      	; 0xd48 <DIO_enumSetPinDirection+0x30>
     d46:	6f c0       	rjmp	.+222    	; 0xe26 <DIO_enumSetPinDirection+0x10e>
		{
		switch(DIO_u8PortID)
     d48:	8a 81       	ldd	r24, Y+2	; 0x02
     d4a:	28 2f       	mov	r18, r24
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	3e 83       	std	Y+6, r19	; 0x06
     d50:	2d 83       	std	Y+5, r18	; 0x05
     d52:	8d 81       	ldd	r24, Y+5	; 0x05
     d54:	9e 81       	ldd	r25, Y+6	; 0x06
     d56:	81 30       	cpi	r24, 0x01	; 1
     d58:	91 05       	cpc	r25, r1
     d5a:	49 f1       	breq	.+82     	; 0xdae <DIO_enumSetPinDirection+0x96>
     d5c:	2d 81       	ldd	r18, Y+5	; 0x05
     d5e:	3e 81       	ldd	r19, Y+6	; 0x06
     d60:	22 30       	cpi	r18, 0x02	; 2
     d62:	31 05       	cpc	r19, r1
     d64:	2c f4       	brge	.+10     	; 0xd70 <DIO_enumSetPinDirection+0x58>
     d66:	8d 81       	ldd	r24, Y+5	; 0x05
     d68:	9e 81       	ldd	r25, Y+6	; 0x06
     d6a:	00 97       	sbiw	r24, 0x00	; 0
     d6c:	61 f0       	breq	.+24     	; 0xd86 <DIO_enumSetPinDirection+0x6e>
     d6e:	5d c0       	rjmp	.+186    	; 0xe2a <DIO_enumSetPinDirection+0x112>
     d70:	2d 81       	ldd	r18, Y+5	; 0x05
     d72:	3e 81       	ldd	r19, Y+6	; 0x06
     d74:	22 30       	cpi	r18, 0x02	; 2
     d76:	31 05       	cpc	r19, r1
     d78:	71 f1       	breq	.+92     	; 0xdd6 <DIO_enumSetPinDirection+0xbe>
     d7a:	8d 81       	ldd	r24, Y+5	; 0x05
     d7c:	9e 81       	ldd	r25, Y+6	; 0x06
     d7e:	83 30       	cpi	r24, 0x03	; 3
     d80:	91 05       	cpc	r25, r1
     d82:	e9 f1       	breq	.+122    	; 0xdfe <DIO_enumSetPinDirection+0xe6>
     d84:	52 c0       	rjmp	.+164    	; 0xe2a <DIO_enumSetPinDirection+0x112>
		{
			case DIO_U8_PORT_A: SET_BIT(DIO_U8_DDRA,DIO_u8PinID); break;
     d86:	aa e3       	ldi	r26, 0x3A	; 58
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	ea e3       	ldi	r30, 0x3A	; 58
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	48 2f       	mov	r20, r24
     d92:	8b 81       	ldd	r24, Y+3	; 0x03
     d94:	28 2f       	mov	r18, r24
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	02 2e       	mov	r0, r18
     d9e:	02 c0       	rjmp	.+4      	; 0xda4 <DIO_enumSetPinDirection+0x8c>
     da0:	88 0f       	add	r24, r24
     da2:	99 1f       	adc	r25, r25
     da4:	0a 94       	dec	r0
     da6:	e2 f7       	brpl	.-8      	; 0xda0 <DIO_enumSetPinDirection+0x88>
     da8:	84 2b       	or	r24, r20
     daa:	8c 93       	st	X, r24
     dac:	3e c0       	rjmp	.+124    	; 0xe2a <DIO_enumSetPinDirection+0x112>
			case DIO_U8_PORT_B: SET_BIT(DIO_U8_DDRB,DIO_u8PinID); break;
     dae:	a7 e3       	ldi	r26, 0x37	; 55
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	e7 e3       	ldi	r30, 0x37	; 55
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	48 2f       	mov	r20, r24
     dba:	8b 81       	ldd	r24, Y+3	; 0x03
     dbc:	28 2f       	mov	r18, r24
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	02 2e       	mov	r0, r18
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <DIO_enumSetPinDirection+0xb4>
     dc8:	88 0f       	add	r24, r24
     dca:	99 1f       	adc	r25, r25
     dcc:	0a 94       	dec	r0
     dce:	e2 f7       	brpl	.-8      	; 0xdc8 <DIO_enumSetPinDirection+0xb0>
     dd0:	84 2b       	or	r24, r20
     dd2:	8c 93       	st	X, r24
     dd4:	2a c0       	rjmp	.+84     	; 0xe2a <DIO_enumSetPinDirection+0x112>
			case DIO_U8_PORT_C: SET_BIT(DIO_U8_DDRC,DIO_u8PinID); break;
     dd6:	a4 e3       	ldi	r26, 0x34	; 52
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e4 e3       	ldi	r30, 0x34	; 52
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	48 2f       	mov	r20, r24
     de2:	8b 81       	ldd	r24, Y+3	; 0x03
     de4:	28 2f       	mov	r18, r24
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	02 2e       	mov	r0, r18
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <DIO_enumSetPinDirection+0xdc>
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	0a 94       	dec	r0
     df6:	e2 f7       	brpl	.-8      	; 0xdf0 <DIO_enumSetPinDirection+0xd8>
     df8:	84 2b       	or	r24, r20
     dfa:	8c 93       	st	X, r24
     dfc:	16 c0       	rjmp	.+44     	; 0xe2a <DIO_enumSetPinDirection+0x112>
			case DIO_U8_PORT_D: SET_BIT(DIO_U8_DDRD,DIO_u8PinID); break;
     dfe:	a1 e3       	ldi	r26, 0x31	; 49
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	e1 e3       	ldi	r30, 0x31	; 49
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	48 2f       	mov	r20, r24
     e0a:	8b 81       	ldd	r24, Y+3	; 0x03
     e0c:	28 2f       	mov	r18, r24
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	02 2e       	mov	r0, r18
     e16:	02 c0       	rjmp	.+4      	; 0xe1c <DIO_enumSetPinDirection+0x104>
     e18:	88 0f       	add	r24, r24
     e1a:	99 1f       	adc	r25, r25
     e1c:	0a 94       	dec	r0
     e1e:	e2 f7       	brpl	.-8      	; 0xe18 <DIO_enumSetPinDirection+0x100>
     e20:	84 2b       	or	r24, r20
     e22:	8c 93       	st	X, r24
     e24:	02 c0       	rjmp	.+4      	; 0xe2a <DIO_enumSetPinDirection+0x112>
		}
		}else
		{
		 Local_error= ES_OUT_OF_RANGE;
     e26:	82 e0       	ldi	r24, 0x02	; 2
     e28:	89 83       	std	Y+1, r24	; 0x01
		}
		Local_error= ES_OK;
     e2a:	19 82       	std	Y+1, r1	; 0x01
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <DIO_enumSetPinDirection+0x11a>
	}
	else
	{
	Local_error= ES_OUT_OF_RANGE;	
     e2e:	82 e0       	ldi	r24, 0x02	; 2
     e30:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_error;
     e32:	89 81       	ldd	r24, Y+1	; 0x01
} 
     e34:	26 96       	adiw	r28, 0x06	; 6
     e36:	0f b6       	in	r0, 0x3f	; 63
     e38:	f8 94       	cli
     e3a:	de bf       	out	0x3e, r29	; 62
     e3c:	0f be       	out	0x3f, r0	; 63
     e3e:	cd bf       	out	0x3d, r28	; 61
     e40:	cf 91       	pop	r28
     e42:	df 91       	pop	r29
     e44:	08 95       	ret

00000e46 <DIO_enumSetPortValue>:
/**************************************************************************/
ErrorStatus  DIO_enumSetPortValue( u8 DIO_u8PortID,u8 DIO_u8Value)
{
     e46:	df 93       	push	r29
     e48:	cf 93       	push	r28
     e4a:	00 d0       	rcall	.+0      	; 0xe4c <DIO_enumSetPortValue+0x6>
     e4c:	00 d0       	rcall	.+0      	; 0xe4e <DIO_enumSetPortValue+0x8>
     e4e:	0f 92       	push	r0
     e50:	cd b7       	in	r28, 0x3d	; 61
     e52:	de b7       	in	r29, 0x3e	; 62
     e54:	8a 83       	std	Y+2, r24	; 0x02
     e56:	6b 83       	std	Y+3, r22	; 0x03
	ErrorStatus Local_error= ES_NOK;
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	89 83       	std	Y+1, r24	; 0x01
	if(DIO_u8PortID < 4)
     e5c:	8a 81       	ldd	r24, Y+2	; 0x02
     e5e:	84 30       	cpi	r24, 0x04	; 4
     e60:	a0 f5       	brcc	.+104    	; 0xeca <DIO_enumSetPortValue+0x84>
	{
		switch(DIO_u8PortID)
     e62:	8a 81       	ldd	r24, Y+2	; 0x02
     e64:	28 2f       	mov	r18, r24
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	3d 83       	std	Y+5, r19	; 0x05
     e6a:	2c 83       	std	Y+4, r18	; 0x04
     e6c:	8c 81       	ldd	r24, Y+4	; 0x04
     e6e:	9d 81       	ldd	r25, Y+5	; 0x05
     e70:	81 30       	cpi	r24, 0x01	; 1
     e72:	91 05       	cpc	r25, r1
     e74:	d1 f0       	breq	.+52     	; 0xeaa <DIO_enumSetPortValue+0x64>
     e76:	2c 81       	ldd	r18, Y+4	; 0x04
     e78:	3d 81       	ldd	r19, Y+5	; 0x05
     e7a:	22 30       	cpi	r18, 0x02	; 2
     e7c:	31 05       	cpc	r19, r1
     e7e:	2c f4       	brge	.+10     	; 0xe8a <DIO_enumSetPortValue+0x44>
     e80:	8c 81       	ldd	r24, Y+4	; 0x04
     e82:	9d 81       	ldd	r25, Y+5	; 0x05
     e84:	00 97       	sbiw	r24, 0x00	; 0
     e86:	61 f0       	breq	.+24     	; 0xea0 <DIO_enumSetPortValue+0x5a>
     e88:	1e c0       	rjmp	.+60     	; 0xec6 <DIO_enumSetPortValue+0x80>
     e8a:	2c 81       	ldd	r18, Y+4	; 0x04
     e8c:	3d 81       	ldd	r19, Y+5	; 0x05
     e8e:	22 30       	cpi	r18, 0x02	; 2
     e90:	31 05       	cpc	r19, r1
     e92:	81 f0       	breq	.+32     	; 0xeb4 <DIO_enumSetPortValue+0x6e>
     e94:	8c 81       	ldd	r24, Y+4	; 0x04
     e96:	9d 81       	ldd	r25, Y+5	; 0x05
     e98:	83 30       	cpi	r24, 0x03	; 3
     e9a:	91 05       	cpc	r25, r1
     e9c:	81 f0       	breq	.+32     	; 0xebe <DIO_enumSetPortValue+0x78>
     e9e:	13 c0       	rjmp	.+38     	; 0xec6 <DIO_enumSetPortValue+0x80>
		{
			case DIO_U8_PORT_A: DIO_U8_PORTA =  DIO_u8Value; break;
     ea0:	eb e3       	ldi	r30, 0x3B	; 59
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	8b 81       	ldd	r24, Y+3	; 0x03
     ea6:	80 83       	st	Z, r24
     ea8:	0e c0       	rjmp	.+28     	; 0xec6 <DIO_enumSetPortValue+0x80>
			case DIO_U8_PORT_B: DIO_U8_PORTB =  DIO_u8Value; break;
     eaa:	e8 e3       	ldi	r30, 0x38	; 56
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	8b 81       	ldd	r24, Y+3	; 0x03
     eb0:	80 83       	st	Z, r24
     eb2:	09 c0       	rjmp	.+18     	; 0xec6 <DIO_enumSetPortValue+0x80>
			case DIO_U8_PORT_C: DIO_U8_PORTC =  DIO_u8Value; break;
     eb4:	e5 e3       	ldi	r30, 0x35	; 53
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	8b 81       	ldd	r24, Y+3	; 0x03
     eba:	80 83       	st	Z, r24
     ebc:	04 c0       	rjmp	.+8      	; 0xec6 <DIO_enumSetPortValue+0x80>
			case DIO_U8_PORT_D: DIO_U8_PORTD =  DIO_u8Value; break;
     ebe:	e2 e3       	ldi	r30, 0x32	; 50
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	8b 81       	ldd	r24, Y+3	; 0x03
     ec4:	80 83       	st	Z, r24
		}
		Local_error= ES_OK;
     ec6:	19 82       	std	Y+1, r1	; 0x01
     ec8:	02 c0       	rjmp	.+4      	; 0xece <DIO_enumSetPortValue+0x88>
	}
	else
	{
	Local_error= ES_OUT_OF_RANGE;	
     eca:	82 e0       	ldi	r24, 0x02	; 2
     ecc:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_error;
     ece:	89 81       	ldd	r24, Y+1	; 0x01
} 
     ed0:	0f 90       	pop	r0
     ed2:	0f 90       	pop	r0
     ed4:	0f 90       	pop	r0
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	cf 91       	pop	r28
     edc:	df 91       	pop	r29
     ede:	08 95       	ret

00000ee0 <DIO_enumSetPinValue>:
/*********************************************************************************************************************/
ErrorStatus  DIO_enumSetPinValue( u8 DIO_u8PortID,u8 DIO_u8PinID,u8 DIO_u8Value)
{
     ee0:	df 93       	push	r29
     ee2:	cf 93       	push	r28
     ee4:	cd b7       	in	r28, 0x3d	; 61
     ee6:	de b7       	in	r29, 0x3e	; 62
     ee8:	28 97       	sbiw	r28, 0x08	; 8
     eea:	0f b6       	in	r0, 0x3f	; 63
     eec:	f8 94       	cli
     eee:	de bf       	out	0x3e, r29	; 62
     ef0:	0f be       	out	0x3f, r0	; 63
     ef2:	cd bf       	out	0x3d, r28	; 61
     ef4:	8a 83       	std	Y+2, r24	; 0x02
     ef6:	6b 83       	std	Y+3, r22	; 0x03
     ef8:	4c 83       	std	Y+4, r20	; 0x04
	ErrorStatus Local_error= ES_NOK;
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	89 83       	std	Y+1, r24	; 0x01
	if((DIO_u8PortID < 4)&&(DIO_u8PinID<8))
     efe:	8a 81       	ldd	r24, Y+2	; 0x02
     f00:	84 30       	cpi	r24, 0x04	; 4
     f02:	08 f0       	brcs	.+2      	; 0xf06 <DIO_enumSetPinValue+0x26>
     f04:	f0 c0       	rjmp	.+480    	; 0x10e6 <DIO_enumSetPinValue+0x206>
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	88 30       	cpi	r24, 0x08	; 8
     f0a:	08 f0       	brcs	.+2      	; 0xf0e <DIO_enumSetPinValue+0x2e>
     f0c:	ec c0       	rjmp	.+472    	; 0x10e6 <DIO_enumSetPinValue+0x206>
	{
		if(DIO_u8Value==DIO_U8_HIGH)
     f0e:	8c 81       	ldd	r24, Y+4	; 0x04
     f10:	81 30       	cpi	r24, 0x01	; 1
     f12:	09 f0       	breq	.+2      	; 0xf16 <DIO_enumSetPinValue+0x36>
     f14:	6f c0       	rjmp	.+222    	; 0xff4 <DIO_enumSetPinValue+0x114>
		switch(DIO_u8PortID)
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	38 87       	std	Y+8, r19	; 0x08
     f1e:	2f 83       	std	Y+7, r18	; 0x07
     f20:	8f 81       	ldd	r24, Y+7	; 0x07
     f22:	98 85       	ldd	r25, Y+8	; 0x08
     f24:	81 30       	cpi	r24, 0x01	; 1
     f26:	91 05       	cpc	r25, r1
     f28:	49 f1       	breq	.+82     	; 0xf7c <DIO_enumSetPinValue+0x9c>
     f2a:	2f 81       	ldd	r18, Y+7	; 0x07
     f2c:	38 85       	ldd	r19, Y+8	; 0x08
     f2e:	22 30       	cpi	r18, 0x02	; 2
     f30:	31 05       	cpc	r19, r1
     f32:	2c f4       	brge	.+10     	; 0xf3e <DIO_enumSetPinValue+0x5e>
     f34:	8f 81       	ldd	r24, Y+7	; 0x07
     f36:	98 85       	ldd	r25, Y+8	; 0x08
     f38:	00 97       	sbiw	r24, 0x00	; 0
     f3a:	61 f0       	breq	.+24     	; 0xf54 <DIO_enumSetPinValue+0x74>
     f3c:	d6 c0       	rjmp	.+428    	; 0x10ea <DIO_enumSetPinValue+0x20a>
     f3e:	2f 81       	ldd	r18, Y+7	; 0x07
     f40:	38 85       	ldd	r19, Y+8	; 0x08
     f42:	22 30       	cpi	r18, 0x02	; 2
     f44:	31 05       	cpc	r19, r1
     f46:	71 f1       	breq	.+92     	; 0xfa4 <DIO_enumSetPinValue+0xc4>
     f48:	8f 81       	ldd	r24, Y+7	; 0x07
     f4a:	98 85       	ldd	r25, Y+8	; 0x08
     f4c:	83 30       	cpi	r24, 0x03	; 3
     f4e:	91 05       	cpc	r25, r1
     f50:	e9 f1       	breq	.+122    	; 0xfcc <DIO_enumSetPinValue+0xec>
     f52:	cb c0       	rjmp	.+406    	; 0x10ea <DIO_enumSetPinValue+0x20a>
		{
			case DIO_U8_PORT_A: SET_BIT(DIO_U8_PORTA,DIO_u8PinID); break;
     f54:	ab e3       	ldi	r26, 0x3B	; 59
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	eb e3       	ldi	r30, 0x3B	; 59
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	48 2f       	mov	r20, r24
     f60:	8b 81       	ldd	r24, Y+3	; 0x03
     f62:	28 2f       	mov	r18, r24
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	02 2e       	mov	r0, r18
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <DIO_enumSetPinValue+0x92>
     f6e:	88 0f       	add	r24, r24
     f70:	99 1f       	adc	r25, r25
     f72:	0a 94       	dec	r0
     f74:	e2 f7       	brpl	.-8      	; 0xf6e <DIO_enumSetPinValue+0x8e>
     f76:	84 2b       	or	r24, r20
     f78:	8c 93       	st	X, r24
     f7a:	b7 c0       	rjmp	.+366    	; 0x10ea <DIO_enumSetPinValue+0x20a>
			case DIO_U8_PORT_B: SET_BIT(DIO_U8_PORTB,DIO_u8PinID); break;
     f7c:	a8 e3       	ldi	r26, 0x38	; 56
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e8 e3       	ldi	r30, 0x38	; 56
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	48 2f       	mov	r20, r24
     f88:	8b 81       	ldd	r24, Y+3	; 0x03
     f8a:	28 2f       	mov	r18, r24
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	02 2e       	mov	r0, r18
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <DIO_enumSetPinValue+0xba>
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	0a 94       	dec	r0
     f9c:	e2 f7       	brpl	.-8      	; 0xf96 <DIO_enumSetPinValue+0xb6>
     f9e:	84 2b       	or	r24, r20
     fa0:	8c 93       	st	X, r24
     fa2:	a3 c0       	rjmp	.+326    	; 0x10ea <DIO_enumSetPinValue+0x20a>
			case DIO_U8_PORT_C: SET_BIT(DIO_U8_PORTC,DIO_u8PinID); break;
     fa4:	a5 e3       	ldi	r26, 0x35	; 53
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	e5 e3       	ldi	r30, 0x35	; 53
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	48 2f       	mov	r20, r24
     fb0:	8b 81       	ldd	r24, Y+3	; 0x03
     fb2:	28 2f       	mov	r18, r24
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	02 2e       	mov	r0, r18
     fbc:	02 c0       	rjmp	.+4      	; 0xfc2 <DIO_enumSetPinValue+0xe2>
     fbe:	88 0f       	add	r24, r24
     fc0:	99 1f       	adc	r25, r25
     fc2:	0a 94       	dec	r0
     fc4:	e2 f7       	brpl	.-8      	; 0xfbe <DIO_enumSetPinValue+0xde>
     fc6:	84 2b       	or	r24, r20
     fc8:	8c 93       	st	X, r24
     fca:	8f c0       	rjmp	.+286    	; 0x10ea <DIO_enumSetPinValue+0x20a>
			case DIO_U8_PORT_D: SET_BIT(DIO_U8_PORTD,DIO_u8PinID); break;
     fcc:	a2 e3       	ldi	r26, 0x32	; 50
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	e2 e3       	ldi	r30, 0x32	; 50
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	48 2f       	mov	r20, r24
     fd8:	8b 81       	ldd	r24, Y+3	; 0x03
     fda:	28 2f       	mov	r18, r24
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	02 2e       	mov	r0, r18
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <DIO_enumSetPinValue+0x10a>
     fe6:	88 0f       	add	r24, r24
     fe8:	99 1f       	adc	r25, r25
     fea:	0a 94       	dec	r0
     fec:	e2 f7       	brpl	.-8      	; 0xfe6 <DIO_enumSetPinValue+0x106>
     fee:	84 2b       	or	r24, r20
     ff0:	8c 93       	st	X, r24
     ff2:	7b c0       	rjmp	.+246    	; 0x10ea <DIO_enumSetPinValue+0x20a>
		}
		else if(DIO_u8Value==DIO_U8_LOW)
     ff4:	8c 81       	ldd	r24, Y+4	; 0x04
     ff6:	88 23       	and	r24, r24
     ff8:	09 f0       	breq	.+2      	; 0xffc <DIO_enumSetPinValue+0x11c>
     ffa:	77 c0       	rjmp	.+238    	; 0x10ea <DIO_enumSetPinValue+0x20a>
		{
			switch(DIO_u8PortID)
     ffc:	8a 81       	ldd	r24, Y+2	; 0x02
     ffe:	28 2f       	mov	r18, r24
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	3e 83       	std	Y+6, r19	; 0x06
    1004:	2d 83       	std	Y+5, r18	; 0x05
    1006:	8d 81       	ldd	r24, Y+5	; 0x05
    1008:	9e 81       	ldd	r25, Y+6	; 0x06
    100a:	81 30       	cpi	r24, 0x01	; 1
    100c:	91 05       	cpc	r25, r1
    100e:	59 f1       	breq	.+86     	; 0x1066 <DIO_enumSetPinValue+0x186>
    1010:	2d 81       	ldd	r18, Y+5	; 0x05
    1012:	3e 81       	ldd	r19, Y+6	; 0x06
    1014:	22 30       	cpi	r18, 0x02	; 2
    1016:	31 05       	cpc	r19, r1
    1018:	2c f4       	brge	.+10     	; 0x1024 <DIO_enumSetPinValue+0x144>
    101a:	8d 81       	ldd	r24, Y+5	; 0x05
    101c:	9e 81       	ldd	r25, Y+6	; 0x06
    101e:	00 97       	sbiw	r24, 0x00	; 0
    1020:	69 f0       	breq	.+26     	; 0x103c <DIO_enumSetPinValue+0x15c>
    1022:	5f c0       	rjmp	.+190    	; 0x10e2 <DIO_enumSetPinValue+0x202>
    1024:	2d 81       	ldd	r18, Y+5	; 0x05
    1026:	3e 81       	ldd	r19, Y+6	; 0x06
    1028:	22 30       	cpi	r18, 0x02	; 2
    102a:	31 05       	cpc	r19, r1
    102c:	89 f1       	breq	.+98     	; 0x1090 <DIO_enumSetPinValue+0x1b0>
    102e:	8d 81       	ldd	r24, Y+5	; 0x05
    1030:	9e 81       	ldd	r25, Y+6	; 0x06
    1032:	83 30       	cpi	r24, 0x03	; 3
    1034:	91 05       	cpc	r25, r1
    1036:	09 f4       	brne	.+2      	; 0x103a <DIO_enumSetPinValue+0x15a>
    1038:	40 c0       	rjmp	.+128    	; 0x10ba <DIO_enumSetPinValue+0x1da>
    103a:	53 c0       	rjmp	.+166    	; 0x10e2 <DIO_enumSetPinValue+0x202>
		   {
			case DIO_U8_PORT_A: CLR_BIT(DIO_U8_PORTA,DIO_u8PinID); break;
    103c:	ab e3       	ldi	r26, 0x3B	; 59
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	eb e3       	ldi	r30, 0x3B	; 59
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	48 2f       	mov	r20, r24
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	28 2f       	mov	r18, r24
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	02 2e       	mov	r0, r18
    1054:	02 c0       	rjmp	.+4      	; 0x105a <DIO_enumSetPinValue+0x17a>
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	0a 94       	dec	r0
    105c:	e2 f7       	brpl	.-8      	; 0x1056 <DIO_enumSetPinValue+0x176>
    105e:	80 95       	com	r24
    1060:	84 23       	and	r24, r20
    1062:	8c 93       	st	X, r24
    1064:	3e c0       	rjmp	.+124    	; 0x10e2 <DIO_enumSetPinValue+0x202>
			case DIO_U8_PORT_B: CLR_BIT(DIO_U8_PORTB,DIO_u8PinID); break;
    1066:	a8 e3       	ldi	r26, 0x38	; 56
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	e8 e3       	ldi	r30, 0x38	; 56
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	48 2f       	mov	r20, r24
    1072:	8b 81       	ldd	r24, Y+3	; 0x03
    1074:	28 2f       	mov	r18, r24
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	02 2e       	mov	r0, r18
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <DIO_enumSetPinValue+0x1a4>
    1080:	88 0f       	add	r24, r24
    1082:	99 1f       	adc	r25, r25
    1084:	0a 94       	dec	r0
    1086:	e2 f7       	brpl	.-8      	; 0x1080 <DIO_enumSetPinValue+0x1a0>
    1088:	80 95       	com	r24
    108a:	84 23       	and	r24, r20
    108c:	8c 93       	st	X, r24
    108e:	29 c0       	rjmp	.+82     	; 0x10e2 <DIO_enumSetPinValue+0x202>
			case DIO_U8_PORT_C: CLR_BIT(DIO_U8_PORTC,DIO_u8PinID); break;
    1090:	a5 e3       	ldi	r26, 0x35	; 53
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	e5 e3       	ldi	r30, 0x35	; 53
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	48 2f       	mov	r20, r24
    109c:	8b 81       	ldd	r24, Y+3	; 0x03
    109e:	28 2f       	mov	r18, r24
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	02 2e       	mov	r0, r18
    10a8:	02 c0       	rjmp	.+4      	; 0x10ae <DIO_enumSetPinValue+0x1ce>
    10aa:	88 0f       	add	r24, r24
    10ac:	99 1f       	adc	r25, r25
    10ae:	0a 94       	dec	r0
    10b0:	e2 f7       	brpl	.-8      	; 0x10aa <DIO_enumSetPinValue+0x1ca>
    10b2:	80 95       	com	r24
    10b4:	84 23       	and	r24, r20
    10b6:	8c 93       	st	X, r24
    10b8:	14 c0       	rjmp	.+40     	; 0x10e2 <DIO_enumSetPinValue+0x202>
			case DIO_U8_PORT_D: CLR_BIT(DIO_U8_PORTD,DIO_u8PinID); break;
    10ba:	a2 e3       	ldi	r26, 0x32	; 50
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e2 e3       	ldi	r30, 0x32	; 50
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	48 2f       	mov	r20, r24
    10c6:	8b 81       	ldd	r24, Y+3	; 0x03
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	02 2e       	mov	r0, r18
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <DIO_enumSetPinValue+0x1f8>
    10d4:	88 0f       	add	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	0a 94       	dec	r0
    10da:	e2 f7       	brpl	.-8      	; 0x10d4 <DIO_enumSetPinValue+0x1f4>
    10dc:	80 95       	com	r24
    10de:	84 23       	and	r24, r20
    10e0:	8c 93       	st	X, r24
		   }
		   Local_error= ES_OK;
    10e2:	19 82       	std	Y+1, r1	; 0x01
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <DIO_enumSetPinValue+0x20a>
		}
		
	}
	else
	{
	Local_error= ES_OUT_OF_RANGE;	
    10e6:	82 e0       	ldi	r24, 0x02	; 2
    10e8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_error;
    10ea:	89 81       	ldd	r24, Y+1	; 0x01
} 
    10ec:	28 96       	adiw	r28, 0x08	; 8
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	f8 94       	cli
    10f2:	de bf       	out	0x3e, r29	; 62
    10f4:	0f be       	out	0x3f, r0	; 63
    10f6:	cd bf       	out	0x3d, r28	; 61
    10f8:	cf 91       	pop	r28
    10fa:	df 91       	pop	r29
    10fc:	08 95       	ret

000010fe <DIO_enumGetPinValue>:
/*********************************************************************************************************************/
u8  DIO_enumGetPinValue( u8 DIO_u8PortID,u8 DIO_u8PinID)
{
    10fe:	df 93       	push	r29
    1100:	cf 93       	push	r28
    1102:	00 d0       	rcall	.+0      	; 0x1104 <DIO_enumGetPinValue+0x6>
    1104:	00 d0       	rcall	.+0      	; 0x1106 <DIO_enumGetPinValue+0x8>
    1106:	00 d0       	rcall	.+0      	; 0x1108 <DIO_enumGetPinValue+0xa>
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
    110c:	8b 83       	std	Y+3, r24	; 0x03
    110e:	6c 83       	std	Y+4, r22	; 0x04
	ErrorStatus Local_error= ES_NOK;
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8value = 0;
    1114:	19 82       	std	Y+1, r1	; 0x01
	if((DIO_u8PortID < 4)&&(DIO_u8PinID<8))
    1116:	8b 81       	ldd	r24, Y+3	; 0x03
    1118:	84 30       	cpi	r24, 0x04	; 4
    111a:	08 f0       	brcs	.+2      	; 0x111e <DIO_enumGetPinValue+0x20>
    111c:	6d c0       	rjmp	.+218    	; 0x11f8 <DIO_enumGetPinValue+0xfa>
    111e:	8c 81       	ldd	r24, Y+4	; 0x04
    1120:	88 30       	cpi	r24, 0x08	; 8
    1122:	08 f0       	brcs	.+2      	; 0x1126 <DIO_enumGetPinValue+0x28>
    1124:	69 c0       	rjmp	.+210    	; 0x11f8 <DIO_enumGetPinValue+0xfa>
	{
		switch(DIO_u8PortID)
    1126:	8b 81       	ldd	r24, Y+3	; 0x03
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	3e 83       	std	Y+6, r19	; 0x06
    112e:	2d 83       	std	Y+5, r18	; 0x05
    1130:	4d 81       	ldd	r20, Y+5	; 0x05
    1132:	5e 81       	ldd	r21, Y+6	; 0x06
    1134:	41 30       	cpi	r20, 0x01	; 1
    1136:	51 05       	cpc	r21, r1
    1138:	41 f1       	breq	.+80     	; 0x118a <DIO_enumGetPinValue+0x8c>
    113a:	8d 81       	ldd	r24, Y+5	; 0x05
    113c:	9e 81       	ldd	r25, Y+6	; 0x06
    113e:	82 30       	cpi	r24, 0x02	; 2
    1140:	91 05       	cpc	r25, r1
    1142:	34 f4       	brge	.+12     	; 0x1150 <DIO_enumGetPinValue+0x52>
    1144:	2d 81       	ldd	r18, Y+5	; 0x05
    1146:	3e 81       	ldd	r19, Y+6	; 0x06
    1148:	21 15       	cp	r18, r1
    114a:	31 05       	cpc	r19, r1
    114c:	61 f0       	breq	.+24     	; 0x1166 <DIO_enumGetPinValue+0x68>
    114e:	52 c0       	rjmp	.+164    	; 0x11f4 <DIO_enumGetPinValue+0xf6>
    1150:	4d 81       	ldd	r20, Y+5	; 0x05
    1152:	5e 81       	ldd	r21, Y+6	; 0x06
    1154:	42 30       	cpi	r20, 0x02	; 2
    1156:	51 05       	cpc	r21, r1
    1158:	51 f1       	breq	.+84     	; 0x11ae <DIO_enumGetPinValue+0xb0>
    115a:	8d 81       	ldd	r24, Y+5	; 0x05
    115c:	9e 81       	ldd	r25, Y+6	; 0x06
    115e:	83 30       	cpi	r24, 0x03	; 3
    1160:	91 05       	cpc	r25, r1
    1162:	b9 f1       	breq	.+110    	; 0x11d2 <DIO_enumGetPinValue+0xd4>
    1164:	47 c0       	rjmp	.+142    	; 0x11f4 <DIO_enumGetPinValue+0xf6>
		{
			case DIO_U8_PORT_A: Local_u8value = GET_BIT(DIO_U8_PINA,DIO_u8PinID); break;
    1166:	e9 e3       	ldi	r30, 0x39	; 57
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	28 2f       	mov	r18, r24
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	8c 81       	ldd	r24, Y+4	; 0x04
    1172:	88 2f       	mov	r24, r24
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	a9 01       	movw	r20, r18
    1178:	02 c0       	rjmp	.+4      	; 0x117e <DIO_enumGetPinValue+0x80>
    117a:	55 95       	asr	r21
    117c:	47 95       	ror	r20
    117e:	8a 95       	dec	r24
    1180:	e2 f7       	brpl	.-8      	; 0x117a <DIO_enumGetPinValue+0x7c>
    1182:	ca 01       	movw	r24, r20
    1184:	81 70       	andi	r24, 0x01	; 1
    1186:	89 83       	std	Y+1, r24	; 0x01
    1188:	35 c0       	rjmp	.+106    	; 0x11f4 <DIO_enumGetPinValue+0xf6>
			case DIO_U8_PORT_B: Local_u8value = GET_BIT(DIO_U8_PINB,DIO_u8PinID); break;
    118a:	e6 e3       	ldi	r30, 0x36	; 54
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	28 2f       	mov	r18, r24
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	8c 81       	ldd	r24, Y+4	; 0x04
    1196:	88 2f       	mov	r24, r24
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	a9 01       	movw	r20, r18
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <DIO_enumGetPinValue+0xa4>
    119e:	55 95       	asr	r21
    11a0:	47 95       	ror	r20
    11a2:	8a 95       	dec	r24
    11a4:	e2 f7       	brpl	.-8      	; 0x119e <DIO_enumGetPinValue+0xa0>
    11a6:	ca 01       	movw	r24, r20
    11a8:	81 70       	andi	r24, 0x01	; 1
    11aa:	89 83       	std	Y+1, r24	; 0x01
    11ac:	23 c0       	rjmp	.+70     	; 0x11f4 <DIO_enumGetPinValue+0xf6>
			case DIO_U8_PORT_C: Local_u8value = GET_BIT(DIO_U8_PINC,DIO_u8PinID); break;
    11ae:	e3 e3       	ldi	r30, 0x33	; 51
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	28 2f       	mov	r18, r24
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ba:	88 2f       	mov	r24, r24
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	a9 01       	movw	r20, r18
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <DIO_enumGetPinValue+0xc8>
    11c2:	55 95       	asr	r21
    11c4:	47 95       	ror	r20
    11c6:	8a 95       	dec	r24
    11c8:	e2 f7       	brpl	.-8      	; 0x11c2 <DIO_enumGetPinValue+0xc4>
    11ca:	ca 01       	movw	r24, r20
    11cc:	81 70       	andi	r24, 0x01	; 1
    11ce:	89 83       	std	Y+1, r24	; 0x01
    11d0:	11 c0       	rjmp	.+34     	; 0x11f4 <DIO_enumGetPinValue+0xf6>
			case DIO_U8_PORT_D: Local_u8value = GET_BIT(DIO_U8_PIND,DIO_u8PinID); break;
    11d2:	e0 e3       	ldi	r30, 0x30	; 48
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	8c 81       	ldd	r24, Y+4	; 0x04
    11de:	88 2f       	mov	r24, r24
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	a9 01       	movw	r20, r18
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <DIO_enumGetPinValue+0xec>
    11e6:	55 95       	asr	r21
    11e8:	47 95       	ror	r20
    11ea:	8a 95       	dec	r24
    11ec:	e2 f7       	brpl	.-8      	; 0x11e6 <DIO_enumGetPinValue+0xe8>
    11ee:	ca 01       	movw	r24, r20
    11f0:	81 70       	andi	r24, 0x01	; 1
    11f2:	89 83       	std	Y+1, r24	; 0x01
		}
		Local_error= ES_OK;
    11f4:	1a 82       	std	Y+2, r1	; 0x02
    11f6:	02 c0       	rjmp	.+4      	; 0x11fc <DIO_enumGetPinValue+0xfe>
	}
	else
	{
	Local_error= ES_OUT_OF_RANGE;	
    11f8:	82 e0       	ldi	r24, 0x02	; 2
    11fa:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_u8value;
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    11fe:	26 96       	adiw	r28, 0x06	; 6
    1200:	0f b6       	in	r0, 0x3f	; 63
    1202:	f8 94       	cli
    1204:	de bf       	out	0x3e, r29	; 62
    1206:	0f be       	out	0x3f, r0	; 63
    1208:	cd bf       	out	0x3d, r28	; 61
    120a:	cf 91       	pop	r28
    120c:	df 91       	pop	r29
    120e:	08 95       	ret

00001210 <EXTI0_enumInit>:
volatile void ((*pf2)(void))= nul;

/************************************* EXTI0 ****************************************/
/******************Init Interrupt**************************/
ErrorStatus EXTI0_enumInit(void)
{
    1210:	df 93       	push	r29
    1212:	cf 93       	push	r28
    1214:	0f 92       	push	r0
    1216:	cd b7       	in	r28, 0x3d	; 61
    1218:	de b7       	in	r29, 0x3e	; 62
	ErrorStatus error=ES_NOK;
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	89 83       	std	Y+1, r24	; 0x01
        CLR_BIT(MCUCR,1);
 #elif 	SENSE_MODE  ==  LOGIC_CHANGE
        SET_BIT(MCUCR,0);
        CLR_BIT(MCUCR,1);
 #elif 	SENSE_MODE  ==  FALLING
        CLR_BIT(MCUCR,0);
    121e:	a5 e5       	ldi	r26, 0x55	; 85
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	e5 e5       	ldi	r30, 0x55	; 85
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	8e 7f       	andi	r24, 0xFE	; 254
    122a:	8c 93       	st	X, r24
        SET_BIT(MCUCR,1);
    122c:	a5 e5       	ldi	r26, 0x55	; 85
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	e5 e5       	ldi	r30, 0x55	; 85
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	82 60       	ori	r24, 0x02	; 2
    1238:	8c 93       	st	X, r24
        SET_BIT(MCUCR,0);
        SET_BIT(MCUCR,1);

#endif
        //ENABLE GIF
        	SET_BIT(SREG,7);
    123a:	af e5       	ldi	r26, 0x5F	; 95
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	ef e5       	ldi	r30, 0x5F	; 95
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	80 68       	ori	r24, 0x80	; 128
    1246:	8c 93       	st	X, r24
 return error;
    1248:	89 81       	ldd	r24, Y+1	; 0x01
}
    124a:	0f 90       	pop	r0
    124c:	cf 91       	pop	r28
    124e:	df 91       	pop	r29
    1250:	08 95       	ret

00001252 <EXTI0_enumEnable>:

/******************Enable Interrupt**************************/

ErrorStatus EXTI0_enumEnable (void)
{
    1252:	df 93       	push	r29
    1254:	cf 93       	push	r28
    1256:	0f 92       	push	r0
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
	ErrorStatus error=ES_NOK;
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(GICR,6);
    1260:	ab e5       	ldi	r26, 0x5B	; 91
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	eb e5       	ldi	r30, 0x5B	; 91
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	80 64       	ori	r24, 0x40	; 64
    126c:	8c 93       	st	X, r24
	return error;
    126e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1270:	0f 90       	pop	r0
    1272:	cf 91       	pop	r28
    1274:	df 91       	pop	r29
    1276:	08 95       	ret

00001278 <EXTI0_enumDisable>:

/******************Disable Interrupt**************************/

ErrorStatus EXTI0_enumDisable (void)
{
    1278:	df 93       	push	r29
    127a:	cf 93       	push	r28
    127c:	0f 92       	push	r0
    127e:	cd b7       	in	r28, 0x3d	; 61
    1280:	de b7       	in	r29, 0x3e	; 62
	ErrorStatus error=ES_NOK;
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(GICR,6);
    1286:	ab e5       	ldi	r26, 0x5B	; 91
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	eb e5       	ldi	r30, 0x5B	; 91
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	8f 7b       	andi	r24, 0xBF	; 191
    1292:	8c 93       	st	X, r24
	return error;
    1294:	89 81       	ldd	r24, Y+1	; 0x01
}
    1296:	0f 90       	pop	r0
    1298:	cf 91       	pop	r28
    129a:	df 91       	pop	r29
    129c:	08 95       	ret

0000129e <__vector_1>:


void __vector_1()__attribute__((signal,used));
void __vector_1()
{
    129e:	1f 92       	push	r1
    12a0:	0f 92       	push	r0
    12a2:	0f b6       	in	r0, 0x3f	; 63
    12a4:	0f 92       	push	r0
    12a6:	11 24       	eor	r1, r1
    12a8:	2f 93       	push	r18
    12aa:	3f 93       	push	r19
    12ac:	4f 93       	push	r20
    12ae:	5f 93       	push	r21
    12b0:	6f 93       	push	r22
    12b2:	7f 93       	push	r23
    12b4:	8f 93       	push	r24
    12b6:	9f 93       	push	r25
    12b8:	af 93       	push	r26
    12ba:	bf 93       	push	r27
    12bc:	ef 93       	push	r30
    12be:	ff 93       	push	r31
    12c0:	df 93       	push	r29
    12c2:	cf 93       	push	r28
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62
	pf0();
    12c8:	e0 91 0e 01 	lds	r30, 0x010E
    12cc:	f0 91 0f 01 	lds	r31, 0x010F
    12d0:	09 95       	icall
}
    12d2:	cf 91       	pop	r28
    12d4:	df 91       	pop	r29
    12d6:	ff 91       	pop	r31
    12d8:	ef 91       	pop	r30
    12da:	bf 91       	pop	r27
    12dc:	af 91       	pop	r26
    12de:	9f 91       	pop	r25
    12e0:	8f 91       	pop	r24
    12e2:	7f 91       	pop	r23
    12e4:	6f 91       	pop	r22
    12e6:	5f 91       	pop	r21
    12e8:	4f 91       	pop	r20
    12ea:	3f 91       	pop	r19
    12ec:	2f 91       	pop	r18
    12ee:	0f 90       	pop	r0
    12f0:	0f be       	out	0x3f, r0	; 63
    12f2:	0f 90       	pop	r0
    12f4:	1f 90       	pop	r1
    12f6:	18 95       	reti

000012f8 <EXTI0_enumSetCallBack>:
void EXTI0_enumSetCallBack (void(*x)(void))
{
    12f8:	df 93       	push	r29
    12fa:	cf 93       	push	r28
    12fc:	00 d0       	rcall	.+0      	; 0x12fe <EXTI0_enumSetCallBack+0x6>
    12fe:	cd b7       	in	r28, 0x3d	; 61
    1300:	de b7       	in	r29, 0x3e	; 62
    1302:	9a 83       	std	Y+2, r25	; 0x02
    1304:	89 83       	std	Y+1, r24	; 0x01
	pf0=x;
    1306:	89 81       	ldd	r24, Y+1	; 0x01
    1308:	9a 81       	ldd	r25, Y+2	; 0x02
    130a:	90 93 0f 01 	sts	0x010F, r25
    130e:	80 93 0e 01 	sts	0x010E, r24
}
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	cf 91       	pop	r28
    1318:	df 91       	pop	r29
    131a:	08 95       	ret

0000131c <EXTI1_enumInit>:

/********************************************** EXTI1 ****************************************/

ErrorStatus EXTI1_enumInit(void)
{
    131c:	df 93       	push	r29
    131e:	cf 93       	push	r28
    1320:	0f 92       	push	r0
    1322:	cd b7       	in	r28, 0x3d	; 61
    1324:	de b7       	in	r29, 0x3e	; 62
	ErrorStatus error=ES_NOK;
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	89 83       	std	Y+1, r24	; 0x01
 #if 	SENSE_MODE1  ==  LOW
        CLR_BIT(MCUCR,2);
        CLR_BIT(MCUCR,3);
 #elif 	SENSE_MODE1  ==  LOGIC_CHANGE
        SET_BIT(MCUCR,2);
    132a:	a5 e5       	ldi	r26, 0x55	; 85
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	e5 e5       	ldi	r30, 0x55	; 85
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	84 60       	ori	r24, 0x04	; 4
    1336:	8c 93       	st	X, r24
        CLR_BIT(MCUCR,3);
    1338:	a5 e5       	ldi	r26, 0x55	; 85
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	e5 e5       	ldi	r30, 0x55	; 85
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	87 7f       	andi	r24, 0xF7	; 247
    1344:	8c 93       	st	X, r24
        SET_BIT(MCUCR,2);
        SET_BIT(MCUCR,3);
// #else
  //   #error "Wrong sense mode"
#endif
 error=ES_OK;
    1346:	19 82       	std	Y+1, r1	; 0x01
 //ENABLE GIF
 	SET_BIT(SREG,7);
    1348:	af e5       	ldi	r26, 0x5F	; 95
    134a:	b0 e0       	ldi	r27, 0x00	; 0
    134c:	ef e5       	ldi	r30, 0x5F	; 95
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	80 68       	ori	r24, 0x80	; 128
    1354:	8c 93       	st	X, r24
 return error;
    1356:	89 81       	ldd	r24, Y+1	; 0x01
}
    1358:	0f 90       	pop	r0
    135a:	cf 91       	pop	r28
    135c:	df 91       	pop	r29
    135e:	08 95       	ret

00001360 <EXTI1_enumEnable>:
ErrorStatus EXTI1_enumEnable (void)
{
    1360:	df 93       	push	r29
    1362:	cf 93       	push	r28
    1364:	0f 92       	push	r0
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
	ErrorStatus error=ES_NOK;
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(GICR,7);
    136e:	ab e5       	ldi	r26, 0x5B	; 91
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	eb e5       	ldi	r30, 0x5B	; 91
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	80 68       	ori	r24, 0x80	; 128
    137a:	8c 93       	st	X, r24
	return error;
    137c:	89 81       	ldd	r24, Y+1	; 0x01
}
    137e:	0f 90       	pop	r0
    1380:	cf 91       	pop	r28
    1382:	df 91       	pop	r29
    1384:	08 95       	ret

00001386 <EXTI1_enumDisable>:
ErrorStatus EXTI1_enumDisable (void)
{
    1386:	df 93       	push	r29
    1388:	cf 93       	push	r28
    138a:	0f 92       	push	r0
    138c:	cd b7       	in	r28, 0x3d	; 61
    138e:	de b7       	in	r29, 0x3e	; 62
	ErrorStatus error=ES_NOK;
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(GICR,7);
    1394:	ab e5       	ldi	r26, 0x5B	; 91
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	eb e5       	ldi	r30, 0x5B	; 91
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	8f 77       	andi	r24, 0x7F	; 127
    13a0:	8c 93       	st	X, r24
	return error;
    13a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    13a4:	0f 90       	pop	r0
    13a6:	cf 91       	pop	r28
    13a8:	df 91       	pop	r29
    13aa:	08 95       	ret

000013ac <EXTI1_enumSetCallBack>:
void EXTI1_enumSetCallBack (void(*x)(void))
{
    13ac:	df 93       	push	r29
    13ae:	cf 93       	push	r28
    13b0:	00 d0       	rcall	.+0      	; 0x13b2 <EXTI1_enumSetCallBack+0x6>
    13b2:	cd b7       	in	r28, 0x3d	; 61
    13b4:	de b7       	in	r29, 0x3e	; 62
    13b6:	9a 83       	std	Y+2, r25	; 0x02
    13b8:	89 83       	std	Y+1, r24	; 0x01
	pf1=x;
    13ba:	89 81       	ldd	r24, Y+1	; 0x01
    13bc:	9a 81       	ldd	r25, Y+2	; 0x02
    13be:	90 93 11 01 	sts	0x0111, r25
    13c2:	80 93 10 01 	sts	0x0110, r24
}
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	cf 91       	pop	r28
    13cc:	df 91       	pop	r29
    13ce:	08 95       	ret

000013d0 <__vector_2>:

void __vector_2()__attribute__((signal,used));
void __vector_2()
{
    13d0:	1f 92       	push	r1
    13d2:	0f 92       	push	r0
    13d4:	0f b6       	in	r0, 0x3f	; 63
    13d6:	0f 92       	push	r0
    13d8:	11 24       	eor	r1, r1
    13da:	2f 93       	push	r18
    13dc:	3f 93       	push	r19
    13de:	4f 93       	push	r20
    13e0:	5f 93       	push	r21
    13e2:	6f 93       	push	r22
    13e4:	7f 93       	push	r23
    13e6:	8f 93       	push	r24
    13e8:	9f 93       	push	r25
    13ea:	af 93       	push	r26
    13ec:	bf 93       	push	r27
    13ee:	ef 93       	push	r30
    13f0:	ff 93       	push	r31
    13f2:	df 93       	push	r29
    13f4:	cf 93       	push	r28
    13f6:	cd b7       	in	r28, 0x3d	; 61
    13f8:	de b7       	in	r29, 0x3e	; 62
	pf1();
    13fa:	e0 91 10 01 	lds	r30, 0x0110
    13fe:	f0 91 11 01 	lds	r31, 0x0111
    1402:	09 95       	icall
}
    1404:	cf 91       	pop	r28
    1406:	df 91       	pop	r29
    1408:	ff 91       	pop	r31
    140a:	ef 91       	pop	r30
    140c:	bf 91       	pop	r27
    140e:	af 91       	pop	r26
    1410:	9f 91       	pop	r25
    1412:	8f 91       	pop	r24
    1414:	7f 91       	pop	r23
    1416:	6f 91       	pop	r22
    1418:	5f 91       	pop	r21
    141a:	4f 91       	pop	r20
    141c:	3f 91       	pop	r19
    141e:	2f 91       	pop	r18
    1420:	0f 90       	pop	r0
    1422:	0f be       	out	0x3f, r0	; 63
    1424:	0f 90       	pop	r0
    1426:	1f 90       	pop	r1
    1428:	18 95       	reti

0000142a <EXTI2_enumInit>:

/********************************************** EXTI2 ****************************************/

ErrorStatus EXTI2_enumInit(void)
{
    142a:	df 93       	push	r29
    142c:	cf 93       	push	r28
    142e:	0f 92       	push	r0
    1430:	cd b7       	in	r28, 0x3d	; 61
    1432:	de b7       	in	r29, 0x3e	; 62
	ErrorStatus error=ES_NOK;
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	89 83       	std	Y+1, r24	; 0x01
 #if 	SENSE_MODE2  == FALLING
        CLR_BIT(MCUCSR,6);

 #elif 	SENSE_MODE2  ==  RISING
        SET_BIT(MCUCSR,6);
    1438:	a4 e5       	ldi	r26, 0x54	; 84
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	e4 e5       	ldi	r30, 0x54	; 84
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	80 64       	ori	r24, 0x40	; 64
    1444:	8c 93       	st	X, r24
#endif
 error=ES_OK;
    1446:	19 82       	std	Y+1, r1	; 0x01
 //ENABLE GIF
 	SET_BIT(SREG,7);
    1448:	af e5       	ldi	r26, 0x5F	; 95
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	ef e5       	ldi	r30, 0x5F	; 95
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	80 68       	ori	r24, 0x80	; 128
    1454:	8c 93       	st	X, r24
 return error;
    1456:	89 81       	ldd	r24, Y+1	; 0x01
}
    1458:	0f 90       	pop	r0
    145a:	cf 91       	pop	r28
    145c:	df 91       	pop	r29
    145e:	08 95       	ret

00001460 <EXTI2_enumEnable>:
ErrorStatus EXTI2_enumEnable (void)
{
    1460:	df 93       	push	r29
    1462:	cf 93       	push	r28
    1464:	0f 92       	push	r0
    1466:	cd b7       	in	r28, 0x3d	; 61
    1468:	de b7       	in	r29, 0x3e	; 62
	ErrorStatus error=ES_NOK;
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(GICR,5);
    146e:	ab e5       	ldi	r26, 0x5B	; 91
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	eb e5       	ldi	r30, 0x5B	; 91
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	80 62       	ori	r24, 0x20	; 32
    147a:	8c 93       	st	X, r24
	return error;
    147c:	89 81       	ldd	r24, Y+1	; 0x01
}
    147e:	0f 90       	pop	r0
    1480:	cf 91       	pop	r28
    1482:	df 91       	pop	r29
    1484:	08 95       	ret

00001486 <EXTI2_enumDisable>:
ErrorStatus EXTI2_enumDisable (void)
{
    1486:	df 93       	push	r29
    1488:	cf 93       	push	r28
    148a:	0f 92       	push	r0
    148c:	cd b7       	in	r28, 0x3d	; 61
    148e:	de b7       	in	r29, 0x3e	; 62
	ErrorStatus error=ES_NOK;
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(GICR,5);
    1494:	ab e5       	ldi	r26, 0x5B	; 91
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	eb e5       	ldi	r30, 0x5B	; 91
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	8f 7d       	andi	r24, 0xDF	; 223
    14a0:	8c 93       	st	X, r24
	return error;
    14a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    14a4:	0f 90       	pop	r0
    14a6:	cf 91       	pop	r28
    14a8:	df 91       	pop	r29
    14aa:	08 95       	ret

000014ac <EXTI2_enumSetCallBack>:
void EXTI2_enumSetCallBack (void(*x)(void))
{
    14ac:	df 93       	push	r29
    14ae:	cf 93       	push	r28
    14b0:	00 d0       	rcall	.+0      	; 0x14b2 <EXTI2_enumSetCallBack+0x6>
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62
    14b6:	9a 83       	std	Y+2, r25	; 0x02
    14b8:	89 83       	std	Y+1, r24	; 0x01
	pf2=x;
    14ba:	89 81       	ldd	r24, Y+1	; 0x01
    14bc:	9a 81       	ldd	r25, Y+2	; 0x02
    14be:	90 93 13 01 	sts	0x0113, r25
    14c2:	80 93 12 01 	sts	0x0112, r24
}
    14c6:	0f 90       	pop	r0
    14c8:	0f 90       	pop	r0
    14ca:	cf 91       	pop	r28
    14cc:	df 91       	pop	r29
    14ce:	08 95       	ret

000014d0 <__vector_3>:

void __vector_3()__attribute__((signal,used));
void __vector_3()
{
    14d0:	1f 92       	push	r1
    14d2:	0f 92       	push	r0
    14d4:	0f b6       	in	r0, 0x3f	; 63
    14d6:	0f 92       	push	r0
    14d8:	11 24       	eor	r1, r1
    14da:	2f 93       	push	r18
    14dc:	3f 93       	push	r19
    14de:	4f 93       	push	r20
    14e0:	5f 93       	push	r21
    14e2:	6f 93       	push	r22
    14e4:	7f 93       	push	r23
    14e6:	8f 93       	push	r24
    14e8:	9f 93       	push	r25
    14ea:	af 93       	push	r26
    14ec:	bf 93       	push	r27
    14ee:	ef 93       	push	r30
    14f0:	ff 93       	push	r31
    14f2:	df 93       	push	r29
    14f4:	cf 93       	push	r28
    14f6:	cd b7       	in	r28, 0x3d	; 61
    14f8:	de b7       	in	r29, 0x3e	; 62
	pf2();
    14fa:	e0 91 12 01 	lds	r30, 0x0112
    14fe:	f0 91 13 01 	lds	r31, 0x0113
    1502:	09 95       	icall
}
    1504:	cf 91       	pop	r28
    1506:	df 91       	pop	r29
    1508:	ff 91       	pop	r31
    150a:	ef 91       	pop	r30
    150c:	bf 91       	pop	r27
    150e:	af 91       	pop	r26
    1510:	9f 91       	pop	r25
    1512:	8f 91       	pop	r24
    1514:	7f 91       	pop	r23
    1516:	6f 91       	pop	r22
    1518:	5f 91       	pop	r21
    151a:	4f 91       	pop	r20
    151c:	3f 91       	pop	r19
    151e:	2f 91       	pop	r18
    1520:	0f 90       	pop	r0
    1522:	0f be       	out	0x3f, r0	; 63
    1524:	0f 90       	pop	r0
    1526:	1f 90       	pop	r1
    1528:	18 95       	reti

0000152a <Microwave_SetTime>:
u8  Stop_Flag = 0;
u8 Clear_Time_Flag = 0;

/********************************************* Software Timer ****************************************************************/
void Microwave_SetTime(u8 input_hours, u8 input_min, u8 input_sec)
{
    152a:	df 93       	push	r29
    152c:	cf 93       	push	r28
    152e:	00 d0       	rcall	.+0      	; 0x1530 <Microwave_SetTime+0x6>
    1530:	0f 92       	push	r0
    1532:	cd b7       	in	r28, 0x3d	; 61
    1534:	de b7       	in	r29, 0x3e	; 62
    1536:	89 83       	std	Y+1, r24	; 0x01
    1538:	6a 83       	std	Y+2, r22	; 0x02
    153a:	4b 83       	std	Y+3, r20	; 0x03
	Set_sec = input_sec;
    153c:	8b 81       	ldd	r24, Y+3	; 0x03
    153e:	80 93 1b 01 	sts	0x011B, r24
	Set_min = input_min;
    1542:	8a 81       	ldd	r24, Y+2	; 0x02
    1544:	80 93 19 01 	sts	0x0119, r24
	Set_hours = input_hours;
    1548:	89 81       	ldd	r24, Y+1	; 0x01
    154a:	80 93 1a 01 	sts	0x011A, r24

	Remaining_hours = input_hours;
    154e:	89 81       	ldd	r24, Y+1	; 0x01
    1550:	80 93 14 01 	sts	0x0114, r24
	Remaining_min = input_min;
    1554:	8a 81       	ldd	r24, Y+2	; 0x02
    1556:	80 93 15 01 	sts	0x0115, r24
	Remaining_sec = input_sec;
    155a:	8b 81       	ldd	r24, Y+3	; 0x03
    155c:	80 93 16 01 	sts	0x0116, r24
}
    1560:	0f 90       	pop	r0
    1562:	0f 90       	pop	r0
    1564:	0f 90       	pop	r0
    1566:	cf 91       	pop	r28
    1568:	df 91       	pop	r29
    156a:	08 95       	ret

0000156c <Microwave_RemainingTime>:

void Microwave_RemainingTime(void)
{
    156c:	df 93       	push	r29
    156e:	cf 93       	push	r28
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
	if(Remaining_sec > 0)
    1574:	80 91 16 01 	lds	r24, 0x0116
    1578:	88 23       	and	r24, r24
    157a:	31 f0       	breq	.+12     	; 0x1588 <Microwave_RemainingTime+0x1c>
	{
		Remaining_sec--;
    157c:	80 91 16 01 	lds	r24, 0x0116
    1580:	81 50       	subi	r24, 0x01	; 1
    1582:	80 93 16 01 	sts	0x0116, r24
    1586:	1c c0       	rjmp	.+56     	; 0x15c0 <Microwave_RemainingTime+0x54>
	}
	else
	{
		if(Remaining_min > 0)		// 22:50:00
    1588:	80 91 15 01 	lds	r24, 0x0115
    158c:	88 23       	and	r24, r24
    158e:	49 f0       	breq	.+18     	; 0x15a2 <Microwave_RemainingTime+0x36>
		{
			Remaining_sec = 59;
    1590:	8b e3       	ldi	r24, 0x3B	; 59
    1592:	80 93 16 01 	sts	0x0116, r24
			Remaining_min--;		// 22:49:59
    1596:	80 91 15 01 	lds	r24, 0x0115
    159a:	81 50       	subi	r24, 0x01	; 1
    159c:	80 93 15 01 	sts	0x0115, r24
    15a0:	0f c0       	rjmp	.+30     	; 0x15c0 <Microwave_RemainingTime+0x54>
		}
		else
		{
			if(Remaining_hours > 0)	// 22:00:00
    15a2:	80 91 14 01 	lds	r24, 0x0114
    15a6:	88 23       	and	r24, r24
    15a8:	59 f0       	breq	.+22     	; 0x15c0 <Microwave_RemainingTime+0x54>
			{
				Remaining_min = 59;
    15aa:	8b e3       	ldi	r24, 0x3B	; 59
    15ac:	80 93 15 01 	sts	0x0115, r24
				Remaining_sec = 59;
    15b0:	8b e3       	ldi	r24, 0x3B	; 59
    15b2:	80 93 16 01 	sts	0x0116, r24
				Remaining_hours--;		// 21:59:59
    15b6:	80 91 14 01 	lds	r24, 0x0114
    15ba:	81 50       	subi	r24, 0x01	; 1
    15bc:	80 93 14 01 	sts	0x0114, r24
			{
				//doing nothing
			}
		}
	}
}
    15c0:	cf 91       	pop	r28
    15c2:	df 91       	pop	r29
    15c4:	08 95       	ret

000015c6 <Microwave_ResetTime>:

void Microwave_ResetTime(void)
{
    15c6:	df 93       	push	r29
    15c8:	cf 93       	push	r28
    15ca:	cd b7       	in	r28, 0x3d	; 61
    15cc:	de b7       	in	r29, 0x3e	; 62
	Remaining_hours = 0;
    15ce:	10 92 14 01 	sts	0x0114, r1
	Remaining_min = 0;
    15d2:	10 92 15 01 	sts	0x0115, r1
	Remaining_sec =0;
    15d6:	10 92 16 01 	sts	0x0116, r1
}
    15da:	cf 91       	pop	r28
    15dc:	df 91       	pop	r29
    15de:	08 95       	ret

000015e0 <Microwave_CheckTimeFinish>:


u8 Microwave_CheckTimeFinish(void)
{
    15e0:	df 93       	push	r29
    15e2:	cf 93       	push	r28
    15e4:	0f 92       	push	r0
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
	if( ((Remaining_sec == 0) && (Remaining_min == 0)) && (Remaining_hours == 0))
    15ea:	80 91 16 01 	lds	r24, 0x0116
    15ee:	88 23       	and	r24, r24
    15f0:	59 f4       	brne	.+22     	; 0x1608 <Microwave_CheckTimeFinish+0x28>
    15f2:	80 91 15 01 	lds	r24, 0x0115
    15f6:	88 23       	and	r24, r24
    15f8:	39 f4       	brne	.+14     	; 0x1608 <Microwave_CheckTimeFinish+0x28>
    15fa:	80 91 14 01 	lds	r24, 0x0114
    15fe:	88 23       	and	r24, r24
    1600:	19 f4       	brne	.+6      	; 0x1608 <Microwave_CheckTimeFinish+0x28>
	{
		return 1;
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	89 83       	std	Y+1, r24	; 0x01
    1606:	01 c0       	rjmp	.+2      	; 0x160a <Microwave_CheckTimeFinish+0x2a>
	}
	else
	{
		return 0;
    1608:	19 82       	std	Y+1, r1	; 0x01
    160a:	89 81       	ldd	r24, Y+1	; 0x01
	}
}
    160c:	0f 90       	pop	r0
    160e:	cf 91       	pop	r28
    1610:	df 91       	pop	r29
    1612:	08 95       	ret

00001614 <TimeReq_Keypad>:

/*********************************************************Request Time from Keypad ****************************************/
u8 TimeReq_Keypad(void)
{
    1614:	df 93       	push	r29
    1616:	cf 93       	push	r28
    1618:	cd b7       	in	r28, 0x3d	; 61
    161a:	de b7       	in	r29, 0x3e	; 62
    161c:	2b 97       	sbiw	r28, 0x0b	; 11
    161e:	0f b6       	in	r0, 0x3f	; 63
    1620:	f8 94       	cli
    1622:	de bf       	out	0x3e, r29	; 62
    1624:	0f be       	out	0x3f, r0	; 63
    1626:	cd bf       	out	0x3d, r28	; 61
	u8 Key, arr[10] ;
	do
	{
		Key = Keypad_u8Keypress(DIO_U8_PORT_C);
    1628:	82 e0       	ldi	r24, 0x02	; 2
    162a:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <Keypad_u8Keypress>
    162e:	89 83       	std	Y+1, r24	; 0x01
		Delay_ms(10);
    1630:	6a e0       	ldi	r22, 0x0A	; 10
    1632:	70 e0       	ldi	r23, 0x00	; 0
    1634:	80 e0       	ldi	r24, 0x00	; 0
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	0e 94 a3 05 	call	0xb46	; 0xb46 <Delay_ms>
	} while(!(Key >= '0') && (Key <= '9'));
    163c:	89 81       	ldd	r24, Y+1	; 0x01
    163e:	80 33       	cpi	r24, 0x30	; 48
    1640:	18 f4       	brcc	.+6      	; 0x1648 <TimeReq_Keypad+0x34>
    1642:	89 81       	ldd	r24, Y+1	; 0x01
    1644:	8a 33       	cpi	r24, 0x3A	; 58
    1646:	80 f3       	brcs	.-32     	; 0x1628 <TimeReq_Keypad+0x14>
	LCD_Num(Key-48);
    1648:	89 81       	ldd	r24, Y+1	; 0x01
    164a:	88 2f       	mov	r24, r24
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	c0 97       	sbiw	r24, 0x30	; 48
    1650:	0e 94 10 13 	call	0x2620	; 0x2620 <LCD_Num>
	//	tostring(arr,Key-48);
	//	LCD_vidWriteString(arr);
	return Key ;
    1654:	89 81       	ldd	r24, Y+1	; 0x01
}
    1656:	2b 96       	adiw	r28, 0x0b	; 11
    1658:	0f b6       	in	r0, 0x3f	; 63
    165a:	f8 94       	cli
    165c:	de bf       	out	0x3e, r29	; 62
    165e:	0f be       	out	0x3f, r0	; 63
    1660:	cd bf       	out	0x3d, r28	; 61
    1662:	cf 91       	pop	r28
    1664:	df 91       	pop	r29
    1666:	08 95       	ret

00001668 <Microwave_RequestTime>:
void Microwave_RequestTime(void)
{
    1668:	df 93       	push	r29
    166a:	cf 93       	push	r28
    166c:	cd b7       	in	r28, 0x3d	; 61
    166e:	de b7       	in	r29, 0x3e	; 62
    1670:	29 97       	sbiw	r28, 0x09	; 9
    1672:	0f b6       	in	r0, 0x3f	; 63
    1674:	f8 94       	cli
    1676:	de bf       	out	0x3e, r29	; 62
    1678:	0f be       	out	0x3f, r0	; 63
    167a:	cd bf       	out	0x3d, r28	; 61
	u8 HoursTen=0 , HoursUnit=0 , MinTen=0 , MinUnit=0 , SecTen=0 , SecUnit=0 ;
    167c:	19 86       	std	Y+9, r1	; 0x09
    167e:	18 86       	std	Y+8, r1	; 0x08
    1680:	1f 82       	std	Y+7, r1	; 0x07
    1682:	1e 82       	std	Y+6, r1	; 0x06
    1684:	1d 82       	std	Y+5, r1	; 0x05
    1686:	1c 82       	std	Y+4, r1	; 0x04
	u8 Hours=0 , Min =0 , Sec=0 ;
    1688:	1b 82       	std	Y+3, r1	; 0x03
    168a:	1a 82       	std	Y+2, r1	; 0x02
    168c:	19 82       	std	Y+1, r1	; 0x01
	/* To enter a new time we should clear the previous time */
	//	Microwave_Stop();
	Microwave_ResetTime();
    168e:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <Microwave_ResetTime>
	do
	{
		/* enter the time */
		LCD_enuSendCMD(LCD_CLEAR_SCREEN);
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	0e 94 d5 10 	call	0x21aa	; 0x21aa <LCD_enuSendCMD>
		LCD_vidWriteString("Timer Setting");
    1698:	80 e6       	ldi	r24, 0x60	; 96
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	0e 94 2f 11 	call	0x225e	; 0x225e <LCD_vidWriteString>
		LCD_voidGoToPosition(2 , 1);
    16a0:	82 e0       	ldi	r24, 0x02	; 2
    16a2:	61 e0       	ldi	r22, 0x01	; 1
    16a4:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <LCD_voidGoToPosition>
		LCD_vidWriteString("HH:MM:SS");
    16a8:	8e e6       	ldi	r24, 0x6E	; 110
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	0e 94 2f 11 	call	0x225e	; 0x225e <LCD_vidWriteString>
		LCD_voidGoToPosition(2 , 1);
    16b0:	82 e0       	ldi	r24, 0x02	; 2
    16b2:	61 e0       	ldi	r22, 0x01	; 1
    16b4:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <LCD_voidGoToPosition>
		LCD_vidWriteString("__:__:__");
    16b8:	87 e7       	ldi	r24, 0x77	; 119
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	0e 94 2f 11 	call	0x225e	; 0x225e <LCD_vidWriteString>
		LCD_voidGoToPosition(2 , 1);
    16c0:	82 e0       	ldi	r24, 0x02	; 2
    16c2:	61 e0       	ldi	r22, 0x01	; 1
    16c4:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <LCD_voidGoToPosition>

		HoursTen = TimeReq_Keypad()-48;
    16c8:	0e 94 0a 0b 	call	0x1614	; 0x1614 <TimeReq_Keypad>
    16cc:	80 53       	subi	r24, 0x30	; 48
    16ce:	89 87       	std	Y+9, r24	; 0x09
		HoursUnit = TimeReq_Keypad()-48;
    16d0:	0e 94 0a 0b 	call	0x1614	; 0x1614 <TimeReq_Keypad>
    16d4:	80 53       	subi	r24, 0x30	; 48
    16d6:	88 87       	std	Y+8, r24	; 0x08

		LCD_voidGoToPosition(2 , 4);
    16d8:	82 e0       	ldi	r24, 0x02	; 2
    16da:	64 e0       	ldi	r22, 0x04	; 4
    16dc:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <LCD_voidGoToPosition>

		MinTen = TimeReq_Keypad()-48;
    16e0:	0e 94 0a 0b 	call	0x1614	; 0x1614 <TimeReq_Keypad>
    16e4:	80 53       	subi	r24, 0x30	; 48
    16e6:	8f 83       	std	Y+7, r24	; 0x07
		MinUnit = TimeReq_Keypad()-48;
    16e8:	0e 94 0a 0b 	call	0x1614	; 0x1614 <TimeReq_Keypad>
    16ec:	80 53       	subi	r24, 0x30	; 48
    16ee:	8e 83       	std	Y+6, r24	; 0x06

		LCD_voidGoToPosition(2 , 7);
    16f0:	82 e0       	ldi	r24, 0x02	; 2
    16f2:	67 e0       	ldi	r22, 0x07	; 7
    16f4:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <LCD_voidGoToPosition>

		SecTen = TimeReq_Keypad()-48;
    16f8:	0e 94 0a 0b 	call	0x1614	; 0x1614 <TimeReq_Keypad>
    16fc:	80 53       	subi	r24, 0x30	; 48
    16fe:	8d 83       	std	Y+5, r24	; 0x05
		SecUnit = TimeReq_Keypad()-48;
    1700:	0e 94 0a 0b 	call	0x1614	; 0x1614 <TimeReq_Keypad>
    1704:	80 53       	subi	r24, 0x30	; 48
    1706:	8c 83       	std	Y+4, r24	; 0x04

		Hours = (HoursTen * 10) + HoursUnit ;
    1708:	89 85       	ldd	r24, Y+9	; 0x09
    170a:	88 2f       	mov	r24, r24
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	9c 01       	movw	r18, r24
    1710:	22 0f       	add	r18, r18
    1712:	33 1f       	adc	r19, r19
    1714:	c9 01       	movw	r24, r18
    1716:	88 0f       	add	r24, r24
    1718:	99 1f       	adc	r25, r25
    171a:	88 0f       	add	r24, r24
    171c:	99 1f       	adc	r25, r25
    171e:	82 0f       	add	r24, r18
    1720:	93 1f       	adc	r25, r19
    1722:	98 2f       	mov	r25, r24
    1724:	88 85       	ldd	r24, Y+8	; 0x08
    1726:	89 0f       	add	r24, r25
    1728:	8b 83       	std	Y+3, r24	; 0x03
		Min = (MinTen * 10) + MinUnit ;
    172a:	8f 81       	ldd	r24, Y+7	; 0x07
    172c:	88 2f       	mov	r24, r24
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	9c 01       	movw	r18, r24
    1732:	22 0f       	add	r18, r18
    1734:	33 1f       	adc	r19, r19
    1736:	c9 01       	movw	r24, r18
    1738:	88 0f       	add	r24, r24
    173a:	99 1f       	adc	r25, r25
    173c:	88 0f       	add	r24, r24
    173e:	99 1f       	adc	r25, r25
    1740:	82 0f       	add	r24, r18
    1742:	93 1f       	adc	r25, r19
    1744:	98 2f       	mov	r25, r24
    1746:	8e 81       	ldd	r24, Y+6	; 0x06
    1748:	89 0f       	add	r24, r25
    174a:	8a 83       	std	Y+2, r24	; 0x02
		Sec = (SecTen * 10) + SecUnit ;
    174c:	8d 81       	ldd	r24, Y+5	; 0x05
    174e:	88 2f       	mov	r24, r24
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	9c 01       	movw	r18, r24
    1754:	22 0f       	add	r18, r18
    1756:	33 1f       	adc	r19, r19
    1758:	c9 01       	movw	r24, r18
    175a:	88 0f       	add	r24, r24
    175c:	99 1f       	adc	r25, r25
    175e:	88 0f       	add	r24, r24
    1760:	99 1f       	adc	r25, r25
    1762:	82 0f       	add	r24, r18
    1764:	93 1f       	adc	r25, r19
    1766:	98 2f       	mov	r25, r24
    1768:	8c 81       	ldd	r24, Y+4	; 0x04
    176a:	89 0f       	add	r24, r25
    176c:	89 83       	std	Y+1, r24	; 0x01

	} while((Min > 59 ) || (Sec > 59) );
    176e:	8a 81       	ldd	r24, Y+2	; 0x02
    1770:	8c 33       	cpi	r24, 0x3C	; 60
    1772:	08 f0       	brcs	.+2      	; 0x1776 <Microwave_RequestTime+0x10e>
    1774:	8e cf       	rjmp	.-228    	; 0x1692 <Microwave_RequestTime+0x2a>
    1776:	89 81       	ldd	r24, Y+1	; 0x01
    1778:	8c 33       	cpi	r24, 0x3C	; 60
    177a:	08 f0       	brcs	.+2      	; 0x177e <Microwave_RequestTime+0x116>
    177c:	8a cf       	rjmp	.-236    	; 0x1692 <Microwave_RequestTime+0x2a>

	Microwave_SetTime(Hours , Min , Sec);
    177e:	8b 81       	ldd	r24, Y+3	; 0x03
    1780:	6a 81       	ldd	r22, Y+2	; 0x02
    1782:	49 81       	ldd	r20, Y+1	; 0x01
    1784:	0e 94 95 0a 	call	0x152a	; 0x152a <Microwave_SetTime>
}
    1788:	29 96       	adiw	r28, 0x09	; 9
    178a:	0f b6       	in	r0, 0x3f	; 63
    178c:	f8 94       	cli
    178e:	de bf       	out	0x3e, r29	; 62
    1790:	0f be       	out	0x3f, r0	; 63
    1792:	cd bf       	out	0x3d, r28	; 61
    1794:	cf 91       	pop	r28
    1796:	df 91       	pop	r29
    1798:	08 95       	ret

0000179a <Microwave_DisplayTime>:

/* Display the Remaining Time on LCD */
void Microwave_DisplayTime(void)
{
    179a:	df 93       	push	r29
    179c:	cf 93       	push	r28
    179e:	cd b7       	in	r28, 0x3d	; 61
    17a0:	de b7       	in	r29, 0x3e	; 62
	//	Microwave_Start();
	LCD_voidGoToPosition(2 , 1);
    17a2:	82 e0       	ldi	r24, 0x02	; 2
    17a4:	61 e0       	ldi	r22, 0x01	; 1
    17a6:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <LCD_voidGoToPosition>
	LCD_Num(Remaining_hours / 10);
    17aa:	80 91 14 01 	lds	r24, 0x0114
    17ae:	9a e0       	ldi	r25, 0x0A	; 10
    17b0:	69 2f       	mov	r22, r25
    17b2:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <__udivmodqi4>
    17b6:	88 2f       	mov	r24, r24
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	0e 94 10 13 	call	0x2620	; 0x2620 <LCD_Num>
	LCD_Num(Remaining_hours % 10);
    17be:	80 91 14 01 	lds	r24, 0x0114
    17c2:	9a e0       	ldi	r25, 0x0A	; 10
    17c4:	69 2f       	mov	r22, r25
    17c6:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <__udivmodqi4>
    17ca:	89 2f       	mov	r24, r25
    17cc:	88 2f       	mov	r24, r24
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	0e 94 10 13 	call	0x2620	; 0x2620 <LCD_Num>

	LCD_enuSendData(':');
    17d4:	8a e3       	ldi	r24, 0x3A	; 58
    17d6:	0e 94 02 11 	call	0x2204	; 0x2204 <LCD_enuSendData>
	LCD_Num(Remaining_min / 10);
    17da:	80 91 15 01 	lds	r24, 0x0115
    17de:	9a e0       	ldi	r25, 0x0A	; 10
    17e0:	69 2f       	mov	r22, r25
    17e2:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <__udivmodqi4>
    17e6:	88 2f       	mov	r24, r24
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	0e 94 10 13 	call	0x2620	; 0x2620 <LCD_Num>
	LCD_Num(Remaining_min % 10);
    17ee:	80 91 15 01 	lds	r24, 0x0115
    17f2:	9a e0       	ldi	r25, 0x0A	; 10
    17f4:	69 2f       	mov	r22, r25
    17f6:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <__udivmodqi4>
    17fa:	89 2f       	mov	r24, r25
    17fc:	88 2f       	mov	r24, r24
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	0e 94 10 13 	call	0x2620	; 0x2620 <LCD_Num>

	LCD_enuSendData(':');
    1804:	8a e3       	ldi	r24, 0x3A	; 58
    1806:	0e 94 02 11 	call	0x2204	; 0x2204 <LCD_enuSendData>
	LCD_Num(Remaining_sec / 10);
    180a:	80 91 16 01 	lds	r24, 0x0116
    180e:	9a e0       	ldi	r25, 0x0A	; 10
    1810:	69 2f       	mov	r22, r25
    1812:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <__udivmodqi4>
    1816:	88 2f       	mov	r24, r24
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	0e 94 10 13 	call	0x2620	; 0x2620 <LCD_Num>
	LCD_Num(Remaining_sec % 10);
    181e:	80 91 16 01 	lds	r24, 0x0116
    1822:	9a e0       	ldi	r25, 0x0A	; 10
    1824:	69 2f       	mov	r22, r25
    1826:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <__udivmodqi4>
    182a:	89 2f       	mov	r24, r25
    182c:	88 2f       	mov	r24, r24
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	0e 94 10 13 	call	0x2620	; 0x2620 <LCD_Num>
}
    1834:	cf 91       	pop	r28
    1836:	df 91       	pop	r29
    1838:	08 95       	ret

0000183a <Microwave_CountingDown>:

void Microwave_CountingDown(void)
{
    183a:	df 93       	push	r29
    183c:	cf 93       	push	r28
    183e:	0f 92       	push	r0
    1840:	cd b7       	in	r28, 0x3d	; 61
    1842:	de b7       	in	r29, 0x3e	; 62
	u8 Timing=0 ;
    1844:	19 82       	std	Y+1, r1	; 0x01
    1846:	13 c0       	rjmp	.+38     	; 0x186e <Microwave_CountingDown+0x34>
	while((Timing == 0) && (Stop_Flag == 0))
	{
		Microwave_DisplayTime();
    1848:	0e 94 cd 0b 	call	0x179a	; 0x179a <Microwave_DisplayTime>
		Delay_ms(100);
    184c:	64 e6       	ldi	r22, 0x64	; 100
    184e:	70 e0       	ldi	r23, 0x00	; 0
    1850:	80 e0       	ldi	r24, 0x00	; 0
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	0e 94 a3 05 	call	0xb46	; 0xb46 <Delay_ms>
		Microwave_RemainingTime();
    1858:	0e 94 b6 0a 	call	0x156c	; 0x156c <Microwave_RemainingTime>
		Delay_ms(100);
    185c:	64 e6       	ldi	r22, 0x64	; 100
    185e:	70 e0       	ldi	r23, 0x00	; 0
    1860:	80 e0       	ldi	r24, 0x00	; 0
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	0e 94 a3 05 	call	0xb46	; 0xb46 <Delay_ms>
		Timing = Microwave_CheckTimeFinish();
    1868:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <Microwave_CheckTimeFinish>
    186c:	89 83       	std	Y+1, r24	; 0x01
}

void Microwave_CountingDown(void)
{
	u8 Timing=0 ;
	while((Timing == 0) && (Stop_Flag == 0))
    186e:	89 81       	ldd	r24, Y+1	; 0x01
    1870:	88 23       	and	r24, r24
    1872:	21 f4       	brne	.+8      	; 0x187c <Microwave_CountingDown+0x42>
    1874:	80 91 17 01 	lds	r24, 0x0117
    1878:	88 23       	and	r24, r24
    187a:	31 f3       	breq	.-52     	; 0x1848 <Microwave_CountingDown+0xe>
		Delay_ms(100);
		Microwave_RemainingTime();
		Delay_ms(100);
		Timing = Microwave_CheckTimeFinish();
	}
}
    187c:	0f 90       	pop	r0
    187e:	cf 91       	pop	r28
    1880:	df 91       	pop	r29
    1882:	08 95       	ret

00001884 <Timer2_Init>:

volatile void((*pf)(void));

//initialization  include mode&prescaler&o/p compare enabled or not
void Timer2_Init( Timer2Mode_type mode,Timer2Scaler_type scaler ,OC2Mode_type oc_mode)
{
    1884:	df 93       	push	r29
    1886:	cf 93       	push	r28
    1888:	cd b7       	in	r28, 0x3d	; 61
    188a:	de b7       	in	r29, 0x3e	; 62
    188c:	27 97       	sbiw	r28, 0x07	; 7
    188e:	0f b6       	in	r0, 0x3f	; 63
    1890:	f8 94       	cli
    1892:	de bf       	out	0x3e, r29	; 62
    1894:	0f be       	out	0x3f, r0	; 63
    1896:	cd bf       	out	0x3d, r28	; 61
    1898:	89 83       	std	Y+1, r24	; 0x01
    189a:	6a 83       	std	Y+2, r22	; 0x02
    189c:	4b 83       	std	Y+3, r20	; 0x03
	switch (mode)
    189e:	89 81       	ldd	r24, Y+1	; 0x01
    18a0:	28 2f       	mov	r18, r24
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	3f 83       	std	Y+7, r19	; 0x07
    18a6:	2e 83       	std	Y+6, r18	; 0x06
    18a8:	8e 81       	ldd	r24, Y+6	; 0x06
    18aa:	9f 81       	ldd	r25, Y+7	; 0x07
    18ac:	81 30       	cpi	r24, 0x01	; 1
    18ae:	91 05       	cpc	r25, r1
    18b0:	21 f1       	breq	.+72     	; 0x18fa <Timer2_Init+0x76>
    18b2:	2e 81       	ldd	r18, Y+6	; 0x06
    18b4:	3f 81       	ldd	r19, Y+7	; 0x07
    18b6:	22 30       	cpi	r18, 0x02	; 2
    18b8:	31 05       	cpc	r19, r1
    18ba:	2c f4       	brge	.+10     	; 0x18c6 <Timer2_Init+0x42>
    18bc:	8e 81       	ldd	r24, Y+6	; 0x06
    18be:	9f 81       	ldd	r25, Y+7	; 0x07
    18c0:	00 97       	sbiw	r24, 0x00	; 0
    18c2:	61 f0       	breq	.+24     	; 0x18dc <Timer2_Init+0x58>
    18c4:	46 c0       	rjmp	.+140    	; 0x1952 <Timer2_Init+0xce>
    18c6:	2e 81       	ldd	r18, Y+6	; 0x06
    18c8:	3f 81       	ldd	r19, Y+7	; 0x07
    18ca:	22 30       	cpi	r18, 0x02	; 2
    18cc:	31 05       	cpc	r19, r1
    18ce:	21 f1       	breq	.+72     	; 0x1918 <Timer2_Init+0x94>
    18d0:	8e 81       	ldd	r24, Y+6	; 0x06
    18d2:	9f 81       	ldd	r25, Y+7	; 0x07
    18d4:	83 30       	cpi	r24, 0x03	; 3
    18d6:	91 05       	cpc	r25, r1
    18d8:	71 f1       	breq	.+92     	; 0x1936 <Timer2_Init+0xb2>
    18da:	3b c0       	rjmp	.+118    	; 0x1952 <Timer2_Init+0xce>
	{
		case TIMER2_NORMAL_MODE:
		CLR_BIT(TCCR2,WGM20);
    18dc:	a5 e4       	ldi	r26, 0x45	; 69
    18de:	b0 e0       	ldi	r27, 0x00	; 0
    18e0:	e5 e4       	ldi	r30, 0x45	; 69
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	8f 7b       	andi	r24, 0xBF	; 191
    18e8:	8c 93       	st	X, r24
		CLR_BIT(TCCR2,WGM21);
    18ea:	a5 e4       	ldi	r26, 0x45	; 69
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	e5 e4       	ldi	r30, 0x45	; 69
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	87 7f       	andi	r24, 0xF7	; 247
    18f6:	8c 93       	st	X, r24
    18f8:	2c c0       	rjmp	.+88     	; 0x1952 <Timer2_Init+0xce>
		break;
		case TIMER2_PHASECORRECT_MODE:
		SET_BIT(TCCR2,WGM20);
    18fa:	a5 e4       	ldi	r26, 0x45	; 69
    18fc:	b0 e0       	ldi	r27, 0x00	; 0
    18fe:	e5 e4       	ldi	r30, 0x45	; 69
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	80 81       	ld	r24, Z
    1904:	80 64       	ori	r24, 0x40	; 64
    1906:	8c 93       	st	X, r24
		CLR_BIT(TCCR2,WGM21);
    1908:	a5 e4       	ldi	r26, 0x45	; 69
    190a:	b0 e0       	ldi	r27, 0x00	; 0
    190c:	e5 e4       	ldi	r30, 0x45	; 69
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	80 81       	ld	r24, Z
    1912:	87 7f       	andi	r24, 0xF7	; 247
    1914:	8c 93       	st	X, r24
    1916:	1d c0       	rjmp	.+58     	; 0x1952 <Timer2_Init+0xce>
		break;
		case TIMER2_CTC_MODE:
		CLR_BIT(TCCR2,WGM20);
    1918:	a5 e4       	ldi	r26, 0x45	; 69
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	e5 e4       	ldi	r30, 0x45	; 69
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	8f 7b       	andi	r24, 0xBF	; 191
    1924:	8c 93       	st	X, r24
		SET_BIT(TCCR2,WGM21);
    1926:	a5 e4       	ldi	r26, 0x45	; 69
    1928:	b0 e0       	ldi	r27, 0x00	; 0
    192a:	e5 e4       	ldi	r30, 0x45	; 69
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	80 81       	ld	r24, Z
    1930:	88 60       	ori	r24, 0x08	; 8
    1932:	8c 93       	st	X, r24
    1934:	0e c0       	rjmp	.+28     	; 0x1952 <Timer2_Init+0xce>
		break;
		case TIMER2_FASTPWM_MODE:
		SET_BIT(TCCR2,WGM20);
    1936:	a5 e4       	ldi	r26, 0x45	; 69
    1938:	b0 e0       	ldi	r27, 0x00	; 0
    193a:	e5 e4       	ldi	r30, 0x45	; 69
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	80 64       	ori	r24, 0x40	; 64
    1942:	8c 93       	st	X, r24
		SET_BIT(TCCR2,WGM21);
    1944:	a5 e4       	ldi	r26, 0x45	; 69
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	e5 e4       	ldi	r30, 0x45	; 69
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	88 60       	ori	r24, 0x08	; 8
    1950:	8c 93       	st	X, r24
		break;
	}
//1st 3bits determines the prescaller
	TCCR2&=0XF8;
    1952:	a5 e4       	ldi	r26, 0x45	; 69
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	e5 e4       	ldi	r30, 0x45	; 69
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	88 7f       	andi	r24, 0xF8	; 248
    195e:	8c 93       	st	X, r24
	TCCR2|=scaler;
    1960:	a5 e4       	ldi	r26, 0x45	; 69
    1962:	b0 e0       	ldi	r27, 0x00	; 0
    1964:	e5 e4       	ldi	r30, 0x45	; 69
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	90 81       	ld	r25, Z
    196a:	8a 81       	ldd	r24, Y+2	; 0x02
    196c:	89 2b       	or	r24, r25
    196e:	8c 93       	st	X, r24

	switch (oc_mode)
    1970:	8b 81       	ldd	r24, Y+3	; 0x03
    1972:	28 2f       	mov	r18, r24
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	3d 83       	std	Y+5, r19	; 0x05
    1978:	2c 83       	std	Y+4, r18	; 0x04
    197a:	8c 81       	ldd	r24, Y+4	; 0x04
    197c:	9d 81       	ldd	r25, Y+5	; 0x05
    197e:	81 30       	cpi	r24, 0x01	; 1
    1980:	91 05       	cpc	r25, r1
    1982:	21 f1       	breq	.+72     	; 0x19cc <Timer2_Init+0x148>
    1984:	2c 81       	ldd	r18, Y+4	; 0x04
    1986:	3d 81       	ldd	r19, Y+5	; 0x05
    1988:	22 30       	cpi	r18, 0x02	; 2
    198a:	31 05       	cpc	r19, r1
    198c:	2c f4       	brge	.+10     	; 0x1998 <Timer2_Init+0x114>
    198e:	8c 81       	ldd	r24, Y+4	; 0x04
    1990:	9d 81       	ldd	r25, Y+5	; 0x05
    1992:	00 97       	sbiw	r24, 0x00	; 0
    1994:	61 f0       	breq	.+24     	; 0x19ae <Timer2_Init+0x12a>
    1996:	46 c0       	rjmp	.+140    	; 0x1a24 <Timer2_Init+0x1a0>
    1998:	2c 81       	ldd	r18, Y+4	; 0x04
    199a:	3d 81       	ldd	r19, Y+5	; 0x05
    199c:	22 30       	cpi	r18, 0x02	; 2
    199e:	31 05       	cpc	r19, r1
    19a0:	21 f1       	breq	.+72     	; 0x19ea <Timer2_Init+0x166>
    19a2:	8c 81       	ldd	r24, Y+4	; 0x04
    19a4:	9d 81       	ldd	r25, Y+5	; 0x05
    19a6:	83 30       	cpi	r24, 0x03	; 3
    19a8:	91 05       	cpc	r25, r1
    19aa:	71 f1       	breq	.+92     	; 0x1a08 <Timer2_Init+0x184>
    19ac:	3b c0       	rjmp	.+118    	; 0x1a24 <Timer2_Init+0x1a0>
		{
			case OC2_DISCONNECTED://normal mode
			CLR_BIT(TCCR2,COM20);
    19ae:	a5 e4       	ldi	r26, 0x45	; 69
    19b0:	b0 e0       	ldi	r27, 0x00	; 0
    19b2:	e5 e4       	ldi	r30, 0x45	; 69
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	80 81       	ld	r24, Z
    19b8:	8f 7e       	andi	r24, 0xEF	; 239
    19ba:	8c 93       	st	X, r24
			CLR_BIT(TCCR2,COM21);
    19bc:	a5 e4       	ldi	r26, 0x45	; 69
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	e5 e4       	ldi	r30, 0x45	; 69
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	8f 7d       	andi	r24, 0xDF	; 223
    19c8:	8c 93       	st	X, r24
    19ca:	2c c0       	rjmp	.+88     	; 0x1a24 <Timer2_Init+0x1a0>
			break;
			//in this case i get pwm with const duty cycle and (variable frequency>>depending on oco value)
			case OC2_TOGGLE://ctc mode
			SET_BIT(TCCR2,COM20);
    19cc:	a5 e4       	ldi	r26, 0x45	; 69
    19ce:	b0 e0       	ldi	r27, 0x00	; 0
    19d0:	e5 e4       	ldi	r30, 0x45	; 69
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	80 81       	ld	r24, Z
    19d6:	80 61       	ori	r24, 0x10	; 16
    19d8:	8c 93       	st	X, r24
			CLR_BIT(TCCR2,COM21);
    19da:	a5 e4       	ldi	r26, 0x45	; 69
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	e5 e4       	ldi	r30, 0x45	; 69
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	8f 7d       	andi	r24, 0xDF	; 223
    19e6:	8c 93       	st	X, r24
    19e8:	1d c0       	rjmp	.+58     	; 0x1a24 <Timer2_Init+0x1a0>
			break;
			case OC2_NON_INVERTING://ctc mode
			CLR_BIT(TCCR2,COM20);
    19ea:	a5 e4       	ldi	r26, 0x45	; 69
    19ec:	b0 e0       	ldi	r27, 0x00	; 0
    19ee:	e5 e4       	ldi	r30, 0x45	; 69
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	80 81       	ld	r24, Z
    19f4:	8f 7e       	andi	r24, 0xEF	; 239
    19f6:	8c 93       	st	X, r24
			SET_BIT(TCCR2,COM21);
    19f8:	a5 e4       	ldi	r26, 0x45	; 69
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	e5 e4       	ldi	r30, 0x45	; 69
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	80 62       	ori	r24, 0x20	; 32
    1a04:	8c 93       	st	X, r24
    1a06:	0e c0       	rjmp	.+28     	; 0x1a24 <Timer2_Init+0x1a0>
			break;
			case OC2_INVERTING://ctc mode
			SET_BIT(TCCR2,COM20);
    1a08:	a5 e4       	ldi	r26, 0x45	; 69
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	e5 e4       	ldi	r30, 0x45	; 69
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	80 81       	ld	r24, Z
    1a12:	80 61       	ori	r24, 0x10	; 16
    1a14:	8c 93       	st	X, r24
			SET_BIT(TCCR2,COM21);
    1a16:	a5 e4       	ldi	r26, 0x45	; 69
    1a18:	b0 e0       	ldi	r27, 0x00	; 0
    1a1a:	e5 e4       	ldi	r30, 0x45	; 69
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	80 81       	ld	r24, Z
    1a20:	80 62       	ori	r24, 0x20	; 32
    1a22:	8c 93       	st	X, r24
			break;
		}


	}
    1a24:	27 96       	adiw	r28, 0x07	; 7
    1a26:	0f b6       	in	r0, 0x3f	; 63
    1a28:	f8 94       	cli
    1a2a:	de bf       	out	0x3e, r29	; 62
    1a2c:	0f be       	out	0x3f, r0	; 63
    1a2e:	cd bf       	out	0x3d, r28	; 61
    1a30:	cf 91       	pop	r28
    1a32:	df 91       	pop	r29
    1a34:	08 95       	ret

00001a36 <Timer2_Disable>:
void Timer2_Disable(void)
{
    1a36:	df 93       	push	r29
    1a38:	cf 93       	push	r28
    1a3a:	cd b7       	in	r28, 0x3d	; 61
    1a3c:	de b7       	in	r29, 0x3e	; 62
	TCCR2 = 0;
    1a3e:	e5 e4       	ldi	r30, 0x45	; 69
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	10 82       	st	Z, r1
	TCNT2 =0;
    1a44:	e4 e4       	ldi	r30, 0x44	; 68
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	10 82       	st	Z, r1
	CLR_BIT(TIMSK, TOIE2);
    1a4a:	a9 e5       	ldi	r26, 0x59	; 89
    1a4c:	b0 e0       	ldi	r27, 0x00	; 0
    1a4e:	e9 e5       	ldi	r30, 0x59	; 89
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	80 81       	ld	r24, Z
    1a54:	8f 7b       	andi	r24, 0xBF	; 191
    1a56:	8c 93       	st	X, r24
	CLR_BIT(TIMSK,OCIE2);
    1a58:	a9 e5       	ldi	r26, 0x59	; 89
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	e9 e5       	ldi	r30, 0x59	; 89
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	8f 77       	andi	r24, 0x7F	; 127
    1a64:	8c 93       	st	X, r24
}
    1a66:	cf 91       	pop	r28
    1a68:	df 91       	pop	r29
    1a6a:	08 95       	ret

00001a6c <Timer2_OV_InterruptEnable>:
//Enable overflow interrupt in case of NORMAL MODE
void Timer2_OV_InterruptEnable(void)
{
    1a6c:	df 93       	push	r29
    1a6e:	cf 93       	push	r28
    1a70:	cd b7       	in	r28, 0x3d	; 61
    1a72:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TOIE2);
    1a74:	a9 e5       	ldi	r26, 0x59	; 89
    1a76:	b0 e0       	ldi	r27, 0x00	; 0
    1a78:	e9 e5       	ldi	r30, 0x59	; 89
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	80 81       	ld	r24, Z
    1a7e:	80 64       	ori	r24, 0x40	; 64
    1a80:	8c 93       	st	X, r24
}
    1a82:	cf 91       	pop	r28
    1a84:	df 91       	pop	r29
    1a86:	08 95       	ret

00001a88 <Timer2_OV_InterruptDisable>:
//Disable overflow interrupt in case of NORMAL MODE
void Timer2_OV_InterruptDisable(void)
{
    1a88:	df 93       	push	r29
    1a8a:	cf 93       	push	r28
    1a8c:	cd b7       	in	r28, 0x3d	; 61
    1a8e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TOIE2);
    1a90:	a9 e5       	ldi	r26, 0x59	; 89
    1a92:	b0 e0       	ldi	r27, 0x00	; 0
    1a94:	e9 e5       	ldi	r30, 0x59	; 89
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	8f 7b       	andi	r24, 0xBF	; 191
    1a9c:	8c 93       	st	X, r24
}
    1a9e:	cf 91       	pop	r28
    1aa0:	df 91       	pop	r29
    1aa2:	08 95       	ret

00001aa4 <Timer2_OC_InterruptEnable>:
//Enable output interrupt in case of NORMAL MODE
void Timer2_OC_InterruptEnable(void)
{
    1aa4:	df 93       	push	r29
    1aa6:	cf 93       	push	r28
    1aa8:	cd b7       	in	r28, 0x3d	; 61
    1aaa:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,OCIE2);
    1aac:	a9 e5       	ldi	r26, 0x59	; 89
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	e9 e5       	ldi	r30, 0x59	; 89
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	80 68       	ori	r24, 0x80	; 128
    1ab8:	8c 93       	st	X, r24
}
    1aba:	cf 91       	pop	r28
    1abc:	df 91       	pop	r29
    1abe:	08 95       	ret

00001ac0 <Timer2_OC_InterruptDisable>:
//Disable overflow interrupt in case of NORMAL MODE
void Timer2_OC_InterruptDisable(void)
{
    1ac0:	df 93       	push	r29
    1ac2:	cf 93       	push	r28
    1ac4:	cd b7       	in	r28, 0x3d	; 61
    1ac6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,OCIE2);
    1ac8:	a9 e5       	ldi	r26, 0x59	; 89
    1aca:	b0 e0       	ldi	r27, 0x00	; 0
    1acc:	e9 e5       	ldi	r30, 0x59	; 89
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 81       	ld	r24, Z
    1ad2:	8f 77       	andi	r24, 0x7F	; 127
    1ad4:	8c 93       	st	X, r24
}
    1ad6:	cf 91       	pop	r28
    1ad8:	df 91       	pop	r29
    1ada:	08 95       	ret

00001adc <__vector_4>:
void __vector_4() __attribute__((signal,used));//TIMER0 OVF
void __vector_4()
{
    1adc:	1f 92       	push	r1
    1ade:	0f 92       	push	r0
    1ae0:	0f b6       	in	r0, 0x3f	; 63
    1ae2:	0f 92       	push	r0
    1ae4:	11 24       	eor	r1, r1
    1ae6:	2f 93       	push	r18
    1ae8:	3f 93       	push	r19
    1aea:	4f 93       	push	r20
    1aec:	5f 93       	push	r21
    1aee:	6f 93       	push	r22
    1af0:	7f 93       	push	r23
    1af2:	8f 93       	push	r24
    1af4:	9f 93       	push	r25
    1af6:	af 93       	push	r26
    1af8:	bf 93       	push	r27
    1afa:	ef 93       	push	r30
    1afc:	ff 93       	push	r31
    1afe:	df 93       	push	r29
    1b00:	cf 93       	push	r28
    1b02:	cd b7       	in	r28, 0x3d	; 61
    1b04:	de b7       	in	r29, 0x3e	; 62
	pf();
    1b06:	e0 91 1c 01 	lds	r30, 0x011C
    1b0a:	f0 91 1d 01 	lds	r31, 0x011D
    1b0e:	09 95       	icall
}
    1b10:	cf 91       	pop	r28
    1b12:	df 91       	pop	r29
    1b14:	ff 91       	pop	r31
    1b16:	ef 91       	pop	r30
    1b18:	bf 91       	pop	r27
    1b1a:	af 91       	pop	r26
    1b1c:	9f 91       	pop	r25
    1b1e:	8f 91       	pop	r24
    1b20:	7f 91       	pop	r23
    1b22:	6f 91       	pop	r22
    1b24:	5f 91       	pop	r21
    1b26:	4f 91       	pop	r20
    1b28:	3f 91       	pop	r19
    1b2a:	2f 91       	pop	r18
    1b2c:	0f 90       	pop	r0
    1b2e:	0f be       	out	0x3f, r0	; 63
    1b30:	0f 90       	pop	r0
    1b32:	1f 90       	pop	r1
    1b34:	18 95       	reti

00001b36 <TIMER02_VCallback>:
void TIMER02_VCallback(void(*x)(void))
{
    1b36:	df 93       	push	r29
    1b38:	cf 93       	push	r28
    1b3a:	00 d0       	rcall	.+0      	; 0x1b3c <TIMER02_VCallback+0x6>
    1b3c:	cd b7       	in	r28, 0x3d	; 61
    1b3e:	de b7       	in	r29, 0x3e	; 62
    1b40:	9a 83       	std	Y+2, r25	; 0x02
    1b42:	89 83       	std	Y+1, r24	; 0x01
	pf=x;
    1b44:	89 81       	ldd	r24, Y+1	; 0x01
    1b46:	9a 81       	ldd	r25, Y+2	; 0x02
    1b48:	90 93 1d 01 	sts	0x011D, r25
    1b4c:	80 93 1c 01 	sts	0x011C, r24
}
    1b50:	0f 90       	pop	r0
    1b52:	0f 90       	pop	r0
    1b54:	cf 91       	pop	r28
    1b56:	df 91       	pop	r29
    1b58:	08 95       	ret

00001b5a <Timer0_Init>:

volatile void((*pf)(void));

//initialization  include mode&prescaler&o/p compare enabled or not
void Timer0_Init( Timer0Mode_type mode,Timer0Scaler_type scaler ,OC0Mode_type oc_mode)
{
    1b5a:	df 93       	push	r29
    1b5c:	cf 93       	push	r28
    1b5e:	cd b7       	in	r28, 0x3d	; 61
    1b60:	de b7       	in	r29, 0x3e	; 62
    1b62:	27 97       	sbiw	r28, 0x07	; 7
    1b64:	0f b6       	in	r0, 0x3f	; 63
    1b66:	f8 94       	cli
    1b68:	de bf       	out	0x3e, r29	; 62
    1b6a:	0f be       	out	0x3f, r0	; 63
    1b6c:	cd bf       	out	0x3d, r28	; 61
    1b6e:	89 83       	std	Y+1, r24	; 0x01
    1b70:	6a 83       	std	Y+2, r22	; 0x02
    1b72:	4b 83       	std	Y+3, r20	; 0x03
	switch (mode)
    1b74:	89 81       	ldd	r24, Y+1	; 0x01
    1b76:	28 2f       	mov	r18, r24
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	3f 83       	std	Y+7, r19	; 0x07
    1b7c:	2e 83       	std	Y+6, r18	; 0x06
    1b7e:	8e 81       	ldd	r24, Y+6	; 0x06
    1b80:	9f 81       	ldd	r25, Y+7	; 0x07
    1b82:	81 30       	cpi	r24, 0x01	; 1
    1b84:	91 05       	cpc	r25, r1
    1b86:	21 f1       	breq	.+72     	; 0x1bd0 <Timer0_Init+0x76>
    1b88:	2e 81       	ldd	r18, Y+6	; 0x06
    1b8a:	3f 81       	ldd	r19, Y+7	; 0x07
    1b8c:	22 30       	cpi	r18, 0x02	; 2
    1b8e:	31 05       	cpc	r19, r1
    1b90:	2c f4       	brge	.+10     	; 0x1b9c <Timer0_Init+0x42>
    1b92:	8e 81       	ldd	r24, Y+6	; 0x06
    1b94:	9f 81       	ldd	r25, Y+7	; 0x07
    1b96:	00 97       	sbiw	r24, 0x00	; 0
    1b98:	61 f0       	breq	.+24     	; 0x1bb2 <Timer0_Init+0x58>
    1b9a:	46 c0       	rjmp	.+140    	; 0x1c28 <Timer0_Init+0xce>
    1b9c:	2e 81       	ldd	r18, Y+6	; 0x06
    1b9e:	3f 81       	ldd	r19, Y+7	; 0x07
    1ba0:	22 30       	cpi	r18, 0x02	; 2
    1ba2:	31 05       	cpc	r19, r1
    1ba4:	21 f1       	breq	.+72     	; 0x1bee <Timer0_Init+0x94>
    1ba6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ba8:	9f 81       	ldd	r25, Y+7	; 0x07
    1baa:	83 30       	cpi	r24, 0x03	; 3
    1bac:	91 05       	cpc	r25, r1
    1bae:	71 f1       	breq	.+92     	; 0x1c0c <Timer0_Init+0xb2>
    1bb0:	3b c0       	rjmp	.+118    	; 0x1c28 <Timer0_Init+0xce>
	{
		case TIMER0_NORMAL_MODE:
			CLR_BIT(TCCR0,WGM00);
    1bb2:	a3 e5       	ldi	r26, 0x53	; 83
    1bb4:	b0 e0       	ldi	r27, 0x00	; 0
    1bb6:	e3 e5       	ldi	r30, 0x53	; 83
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	80 81       	ld	r24, Z
    1bbc:	8f 7b       	andi	r24, 0xBF	; 191
    1bbe:	8c 93       	st	X, r24
			CLR_BIT(TCCR0,WGM01);
    1bc0:	a3 e5       	ldi	r26, 0x53	; 83
    1bc2:	b0 e0       	ldi	r27, 0x00	; 0
    1bc4:	e3 e5       	ldi	r30, 0x53	; 83
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	80 81       	ld	r24, Z
    1bca:	87 7f       	andi	r24, 0xF7	; 247
    1bcc:	8c 93       	st	X, r24
    1bce:	2c c0       	rjmp	.+88     	; 0x1c28 <Timer0_Init+0xce>
		break;
		case TIMER0_PHASECORRECT_MODE:
		SET_BIT(TCCR0,WGM00);
    1bd0:	a3 e5       	ldi	r26, 0x53	; 83
    1bd2:	b0 e0       	ldi	r27, 0x00	; 0
    1bd4:	e3 e5       	ldi	r30, 0x53	; 83
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	80 81       	ld	r24, Z
    1bda:	80 64       	ori	r24, 0x40	; 64
    1bdc:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,WGM01);
    1bde:	a3 e5       	ldi	r26, 0x53	; 83
    1be0:	b0 e0       	ldi	r27, 0x00	; 0
    1be2:	e3 e5       	ldi	r30, 0x53	; 83
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
    1be8:	87 7f       	andi	r24, 0xF7	; 247
    1bea:	8c 93       	st	X, r24
    1bec:	1d c0       	rjmp	.+58     	; 0x1c28 <Timer0_Init+0xce>
		break;
		case TIMER0_CTC_MODE:
			CLR_BIT(TCCR0,WGM00);
    1bee:	a3 e5       	ldi	r26, 0x53	; 83
    1bf0:	b0 e0       	ldi	r27, 0x00	; 0
    1bf2:	e3 e5       	ldi	r30, 0x53	; 83
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 81       	ld	r24, Z
    1bf8:	8f 7b       	andi	r24, 0xBF	; 191
    1bfa:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM01);
    1bfc:	a3 e5       	ldi	r26, 0x53	; 83
    1bfe:	b0 e0       	ldi	r27, 0x00	; 0
    1c00:	e3 e5       	ldi	r30, 0x53	; 83
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	88 60       	ori	r24, 0x08	; 8
    1c08:	8c 93       	st	X, r24
    1c0a:	0e c0       	rjmp	.+28     	; 0x1c28 <Timer0_Init+0xce>
		break;
		case TIMER0_FASTPWM_MODE:
		SET_BIT(TCCR0,WGM00);
    1c0c:	a3 e5       	ldi	r26, 0x53	; 83
    1c0e:	b0 e0       	ldi	r27, 0x00	; 0
    1c10:	e3 e5       	ldi	r30, 0x53	; 83
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	80 81       	ld	r24, Z
    1c16:	80 64       	ori	r24, 0x40	; 64
    1c18:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM01);
    1c1a:	a3 e5       	ldi	r26, 0x53	; 83
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	e3 e5       	ldi	r30, 0x53	; 83
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	88 60       	ori	r24, 0x08	; 8
    1c26:	8c 93       	st	X, r24
		break;
	}
//1st 3bits determines the prescaller
	TCCR0&=0XF8;
    1c28:	a3 e5       	ldi	r26, 0x53	; 83
    1c2a:	b0 e0       	ldi	r27, 0x00	; 0
    1c2c:	e3 e5       	ldi	r30, 0x53	; 83
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	80 81       	ld	r24, Z
    1c32:	88 7f       	andi	r24, 0xF8	; 248
    1c34:	8c 93       	st	X, r24
	TCCR0|=scaler;
    1c36:	a3 e5       	ldi	r26, 0x53	; 83
    1c38:	b0 e0       	ldi	r27, 0x00	; 0
    1c3a:	e3 e5       	ldi	r30, 0x53	; 83
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	90 81       	ld	r25, Z
    1c40:	8a 81       	ldd	r24, Y+2	; 0x02
    1c42:	89 2b       	or	r24, r25
    1c44:	8c 93       	st	X, r24

	switch (oc_mode)
    1c46:	8b 81       	ldd	r24, Y+3	; 0x03
    1c48:	28 2f       	mov	r18, r24
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	3d 83       	std	Y+5, r19	; 0x05
    1c4e:	2c 83       	std	Y+4, r18	; 0x04
    1c50:	8c 81       	ldd	r24, Y+4	; 0x04
    1c52:	9d 81       	ldd	r25, Y+5	; 0x05
    1c54:	81 30       	cpi	r24, 0x01	; 1
    1c56:	91 05       	cpc	r25, r1
    1c58:	21 f1       	breq	.+72     	; 0x1ca2 <Timer0_Init+0x148>
    1c5a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c5c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c5e:	22 30       	cpi	r18, 0x02	; 2
    1c60:	31 05       	cpc	r19, r1
    1c62:	2c f4       	brge	.+10     	; 0x1c6e <Timer0_Init+0x114>
    1c64:	8c 81       	ldd	r24, Y+4	; 0x04
    1c66:	9d 81       	ldd	r25, Y+5	; 0x05
    1c68:	00 97       	sbiw	r24, 0x00	; 0
    1c6a:	61 f0       	breq	.+24     	; 0x1c84 <Timer0_Init+0x12a>
    1c6c:	46 c0       	rjmp	.+140    	; 0x1cfa <Timer0_Init+0x1a0>
    1c6e:	2c 81       	ldd	r18, Y+4	; 0x04
    1c70:	3d 81       	ldd	r19, Y+5	; 0x05
    1c72:	22 30       	cpi	r18, 0x02	; 2
    1c74:	31 05       	cpc	r19, r1
    1c76:	21 f1       	breq	.+72     	; 0x1cc0 <Timer0_Init+0x166>
    1c78:	8c 81       	ldd	r24, Y+4	; 0x04
    1c7a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c7c:	83 30       	cpi	r24, 0x03	; 3
    1c7e:	91 05       	cpc	r25, r1
    1c80:	71 f1       	breq	.+92     	; 0x1cde <Timer0_Init+0x184>
    1c82:	3b c0       	rjmp	.+118    	; 0x1cfa <Timer0_Init+0x1a0>
		{
			case OCO_DISCONNECTED://normal mode
				CLR_BIT(TCCR0,COM00);
    1c84:	a3 e5       	ldi	r26, 0x53	; 83
    1c86:	b0 e0       	ldi	r27, 0x00	; 0
    1c88:	e3 e5       	ldi	r30, 0x53	; 83
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	80 81       	ld	r24, Z
    1c8e:	8f 7e       	andi	r24, 0xEF	; 239
    1c90:	8c 93       	st	X, r24
				CLR_BIT(TCCR0,COM01);
    1c92:	a3 e5       	ldi	r26, 0x53	; 83
    1c94:	b0 e0       	ldi	r27, 0x00	; 0
    1c96:	e3 e5       	ldi	r30, 0x53	; 83
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	80 81       	ld	r24, Z
    1c9c:	8f 7d       	andi	r24, 0xDF	; 223
    1c9e:	8c 93       	st	X, r24
    1ca0:	2c c0       	rjmp	.+88     	; 0x1cfa <Timer0_Init+0x1a0>
			break;
			//in this case i get pwm with const duty cycle and (variable frequency>>depending on oco value)
			case OCO_TOGGLE://ctc mode
			SET_BIT(TCCR0,COM00);
    1ca2:	a3 e5       	ldi	r26, 0x53	; 83
    1ca4:	b0 e0       	ldi	r27, 0x00	; 0
    1ca6:	e3 e5       	ldi	r30, 0x53	; 83
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	80 81       	ld	r24, Z
    1cac:	80 61       	ori	r24, 0x10	; 16
    1cae:	8c 93       	st	X, r24
			CLR_BIT(TCCR0,COM01);
    1cb0:	a3 e5       	ldi	r26, 0x53	; 83
    1cb2:	b0 e0       	ldi	r27, 0x00	; 0
    1cb4:	e3 e5       	ldi	r30, 0x53	; 83
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	80 81       	ld	r24, Z
    1cba:	8f 7d       	andi	r24, 0xDF	; 223
    1cbc:	8c 93       	st	X, r24
    1cbe:	1d c0       	rjmp	.+58     	; 0x1cfa <Timer0_Init+0x1a0>
			break;
			case OCO_NON_INVERTING://ctc mode
				CLR_BIT(TCCR0,COM00);
    1cc0:	a3 e5       	ldi	r26, 0x53	; 83
    1cc2:	b0 e0       	ldi	r27, 0x00	; 0
    1cc4:	e3 e5       	ldi	r30, 0x53	; 83
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	80 81       	ld	r24, Z
    1cca:	8f 7e       	andi	r24, 0xEF	; 239
    1ccc:	8c 93       	st	X, r24
			SET_BIT(TCCR0,COM01);
    1cce:	a3 e5       	ldi	r26, 0x53	; 83
    1cd0:	b0 e0       	ldi	r27, 0x00	; 0
    1cd2:	e3 e5       	ldi	r30, 0x53	; 83
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	80 62       	ori	r24, 0x20	; 32
    1cda:	8c 93       	st	X, r24
    1cdc:	0e c0       	rjmp	.+28     	; 0x1cfa <Timer0_Init+0x1a0>
			break;
			case OCO_INVERTING://ctc mode
			SET_BIT(TCCR0,COM00);
    1cde:	a3 e5       	ldi	r26, 0x53	; 83
    1ce0:	b0 e0       	ldi	r27, 0x00	; 0
    1ce2:	e3 e5       	ldi	r30, 0x53	; 83
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	80 81       	ld	r24, Z
    1ce8:	80 61       	ori	r24, 0x10	; 16
    1cea:	8c 93       	st	X, r24
			SET_BIT(TCCR0,COM01);
    1cec:	a3 e5       	ldi	r26, 0x53	; 83
    1cee:	b0 e0       	ldi	r27, 0x00	; 0
    1cf0:	e3 e5       	ldi	r30, 0x53	; 83
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	80 81       	ld	r24, Z
    1cf6:	80 62       	ori	r24, 0x20	; 32
    1cf8:	8c 93       	st	X, r24
			break;
		}


	}
    1cfa:	27 96       	adiw	r28, 0x07	; 7
    1cfc:	0f b6       	in	r0, 0x3f	; 63
    1cfe:	f8 94       	cli
    1d00:	de bf       	out	0x3e, r29	; 62
    1d02:	0f be       	out	0x3f, r0	; 63
    1d04:	cd bf       	out	0x3d, r28	; 61
    1d06:	cf 91       	pop	r28
    1d08:	df 91       	pop	r29
    1d0a:	08 95       	ret

00001d0c <Timer0_Disable>:
void Timer0_Disable(void)
{
    1d0c:	df 93       	push	r29
    1d0e:	cf 93       	push	r28
    1d10:	cd b7       	in	r28, 0x3d	; 61
    1d12:	de b7       	in	r29, 0x3e	; 62
//	CLR_BIT(TCCR0,CS02);
//	CLR_BIT(TCCR0,CS01);
//	CLR_BIT(TCCR0,CSOO);
	TCCR0 =0;
    1d14:	e3 e5       	ldi	r30, 0x53	; 83
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	10 82       	st	Z, r1
	TCNT0 = 0;
    1d1a:	e2 e5       	ldi	r30, 0x52	; 82
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	10 82       	st	Z, r1
	CLR_BIT(TIMSK,OCIE0);
    1d20:	a9 e5       	ldi	r26, 0x59	; 89
    1d22:	b0 e0       	ldi	r27, 0x00	; 0
    1d24:	e9 e5       	ldi	r30, 0x59	; 89
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	80 81       	ld	r24, Z
    1d2a:	8d 7f       	andi	r24, 0xFD	; 253
    1d2c:	8c 93       	st	X, r24
	CLR_BIT(TIMSK,TOIE0);
    1d2e:	a9 e5       	ldi	r26, 0x59	; 89
    1d30:	b0 e0       	ldi	r27, 0x00	; 0
    1d32:	e9 e5       	ldi	r30, 0x59	; 89
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	80 81       	ld	r24, Z
    1d38:	8e 7f       	andi	r24, 0xFE	; 254
    1d3a:	8c 93       	st	X, r24


}
    1d3c:	cf 91       	pop	r28
    1d3e:	df 91       	pop	r29
    1d40:	08 95       	ret

00001d42 <Timer0_OV_InterruptEnable>:
//Enable overflow interrupt in case of NORMAL MODE
void Timer0_OV_InterruptEnable(void)
{
    1d42:	df 93       	push	r29
    1d44:	cf 93       	push	r28
    1d46:	cd b7       	in	r28, 0x3d	; 61
    1d48:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TOIE0);
    1d4a:	a9 e5       	ldi	r26, 0x59	; 89
    1d4c:	b0 e0       	ldi	r27, 0x00	; 0
    1d4e:	e9 e5       	ldi	r30, 0x59	; 89
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	80 81       	ld	r24, Z
    1d54:	81 60       	ori	r24, 0x01	; 1
    1d56:	8c 93       	st	X, r24
}
    1d58:	cf 91       	pop	r28
    1d5a:	df 91       	pop	r29
    1d5c:	08 95       	ret

00001d5e <Timer0_OV_InterruptDisable>:
//Disable overflow interrupt in case of NORMAL MODE
void Timer0_OV_InterruptDisable(void)
{
    1d5e:	df 93       	push	r29
    1d60:	cf 93       	push	r28
    1d62:	cd b7       	in	r28, 0x3d	; 61
    1d64:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TOIE0);
    1d66:	a9 e5       	ldi	r26, 0x59	; 89
    1d68:	b0 e0       	ldi	r27, 0x00	; 0
    1d6a:	e9 e5       	ldi	r30, 0x59	; 89
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	80 81       	ld	r24, Z
    1d70:	8e 7f       	andi	r24, 0xFE	; 254
    1d72:	8c 93       	st	X, r24
}
    1d74:	cf 91       	pop	r28
    1d76:	df 91       	pop	r29
    1d78:	08 95       	ret

00001d7a <Timer0_OC_InterruptEnable>:
//Enable output interrupt in case of NORMAL MODE
void Timer0_OC_InterruptEnable(void)
{
    1d7a:	df 93       	push	r29
    1d7c:	cf 93       	push	r28
    1d7e:	cd b7       	in	r28, 0x3d	; 61
    1d80:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,OCIE0);
    1d82:	a9 e5       	ldi	r26, 0x59	; 89
    1d84:	b0 e0       	ldi	r27, 0x00	; 0
    1d86:	e9 e5       	ldi	r30, 0x59	; 89
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	80 81       	ld	r24, Z
    1d8c:	82 60       	ori	r24, 0x02	; 2
    1d8e:	8c 93       	st	X, r24
}
    1d90:	cf 91       	pop	r28
    1d92:	df 91       	pop	r29
    1d94:	08 95       	ret

00001d96 <Timer0_OC_InterruptDisable>:
//Disable overflow interrupt in case of NORMAL MODE
void Timer0_OC_InterruptDisable(void)
{
    1d96:	df 93       	push	r29
    1d98:	cf 93       	push	r28
    1d9a:	cd b7       	in	r28, 0x3d	; 61
    1d9c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,OCIE0);
    1d9e:	a9 e5       	ldi	r26, 0x59	; 89
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	e9 e5       	ldi	r30, 0x59	; 89
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	8d 7f       	andi	r24, 0xFD	; 253
    1daa:	8c 93       	st	X, r24
}
    1dac:	cf 91       	pop	r28
    1dae:	df 91       	pop	r29
    1db0:	08 95       	ret

00001db2 <__vector_11>:
void __vector_11() __attribute__((signal,used));//TIMER0 OVF
void __vector_11()
{
    1db2:	1f 92       	push	r1
    1db4:	0f 92       	push	r0
    1db6:	0f b6       	in	r0, 0x3f	; 63
    1db8:	0f 92       	push	r0
    1dba:	11 24       	eor	r1, r1
    1dbc:	2f 93       	push	r18
    1dbe:	3f 93       	push	r19
    1dc0:	4f 93       	push	r20
    1dc2:	5f 93       	push	r21
    1dc4:	6f 93       	push	r22
    1dc6:	7f 93       	push	r23
    1dc8:	8f 93       	push	r24
    1dca:	9f 93       	push	r25
    1dcc:	af 93       	push	r26
    1dce:	bf 93       	push	r27
    1dd0:	ef 93       	push	r30
    1dd2:	ff 93       	push	r31
    1dd4:	df 93       	push	r29
    1dd6:	cf 93       	push	r28
    1dd8:	cd b7       	in	r28, 0x3d	; 61
    1dda:	de b7       	in	r29, 0x3e	; 62
	pf();
    1ddc:	e0 91 1c 01 	lds	r30, 0x011C
    1de0:	f0 91 1d 01 	lds	r31, 0x011D
    1de4:	09 95       	icall
}
    1de6:	cf 91       	pop	r28
    1de8:	df 91       	pop	r29
    1dea:	ff 91       	pop	r31
    1dec:	ef 91       	pop	r30
    1dee:	bf 91       	pop	r27
    1df0:	af 91       	pop	r26
    1df2:	9f 91       	pop	r25
    1df4:	8f 91       	pop	r24
    1df6:	7f 91       	pop	r23
    1df8:	6f 91       	pop	r22
    1dfa:	5f 91       	pop	r21
    1dfc:	4f 91       	pop	r20
    1dfe:	3f 91       	pop	r19
    1e00:	2f 91       	pop	r18
    1e02:	0f 90       	pop	r0
    1e04:	0f be       	out	0x3f, r0	; 63
    1e06:	0f 90       	pop	r0
    1e08:	1f 90       	pop	r1
    1e0a:	18 95       	reti

00001e0c <TIMER00_VCallback>:
void TIMER00_VCallback(void(*x)(void))
{
    1e0c:	df 93       	push	r29
    1e0e:	cf 93       	push	r28
    1e10:	00 d0       	rcall	.+0      	; 0x1e12 <TIMER00_VCallback+0x6>
    1e12:	cd b7       	in	r28, 0x3d	; 61
    1e14:	de b7       	in	r29, 0x3e	; 62
    1e16:	9a 83       	std	Y+2, r25	; 0x02
    1e18:	89 83       	std	Y+1, r24	; 0x01
	pf=x;
    1e1a:	89 81       	ldd	r24, Y+1	; 0x01
    1e1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e1e:	90 93 1d 01 	sts	0x011D, r25
    1e22:	80 93 1c 01 	sts	0x011C, r24
}
    1e26:	0f 90       	pop	r0
    1e28:	0f 90       	pop	r0
    1e2a:	cf 91       	pop	r28
    1e2c:	df 91       	pop	r29
    1e2e:	08 95       	ret

00001e30 <Buzzer_ON>:

#include "SW_Timer.h"
#include "header.h"

void Buzzer_ON(void)
{
    1e30:	df 93       	push	r29
    1e32:	cf 93       	push	r28
    1e34:	cd b7       	in	r28, 0x3d	; 61
    1e36:	de b7       	in	r29, 0x3e	; 62
	Timer2_Init( TIMER2_PHASECORRECT_MODE,TIMER2_SCALER_1 ,OC2_NON_INVERTING);
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	61 e0       	ldi	r22, 0x01	; 1
    1e3c:	42 e0       	ldi	r20, 0x02	; 2
    1e3e:	0e 94 42 0c 	call	0x1884	; 0x1884 <Timer2_Init>
	OCR2=127;
    1e42:	e3 e4       	ldi	r30, 0x43	; 67
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	8f e7       	ldi	r24, 0x7F	; 127
    1e48:	80 83       	st	Z, r24
}
    1e4a:	cf 91       	pop	r28
    1e4c:	df 91       	pop	r29
    1e4e:	08 95       	ret

00001e50 <Buzzerr_OFF>:

void Buzzerr_OFF(void)
{
    1e50:	df 93       	push	r29
    1e52:	cf 93       	push	r28
    1e54:	cd b7       	in	r28, 0x3d	; 61
    1e56:	de b7       	in	r29, 0x3e	; 62
	Timer2_Disable();
    1e58:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <Timer2_Disable>
	DIO_enumSetPinValue(DIO_U8_PORT_D, DIO_U8_PIN7, DIO_U8_LOW);
    1e5c:	83 e0       	ldi	r24, 0x03	; 3
    1e5e:	67 e0       	ldi	r22, 0x07	; 7
    1e60:	40 e0       	ldi	r20, 0x00	; 0
    1e62:	0e 94 70 07 	call	0xee0	; 0xee0 <DIO_enumSetPinValue>
}
    1e66:	cf 91       	pop	r28
    1e68:	df 91       	pop	r29
    1e6a:	08 95       	ret

00001e6c <Heater_OFF>:

void Heater_OFF(void)
{
    1e6c:	df 93       	push	r29
    1e6e:	cf 93       	push	r28
    1e70:	cd b7       	in	r28, 0x3d	; 61
    1e72:	de b7       	in	r29, 0x3e	; 62
	Timer0_Disable();
    1e74:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <Timer0_Disable>
	DIO_enumSetPinValue(DIO_U8_PORT_B,DIO_U8_PIN3 , DIO_U8_LOW);
    1e78:	81 e0       	ldi	r24, 0x01	; 1
    1e7a:	63 e0       	ldi	r22, 0x03	; 3
    1e7c:	40 e0       	ldi	r20, 0x00	; 0
    1e7e:	0e 94 70 07 	call	0xee0	; 0xee0 <DIO_enumSetPinValue>
}
    1e82:	cf 91       	pop	r28
    1e84:	df 91       	pop	r29
    1e86:	08 95       	ret

00001e88 <Heater_ON>:
void Heater_ON(void)
{
    1e88:	df 93       	push	r29
    1e8a:	cf 93       	push	r28
    1e8c:	00 d0       	rcall	.+0      	; 0x1e8e <Heater_ON+0x6>
    1e8e:	0f 92       	push	r0
    1e90:	cd b7       	in	r28, 0x3d	; 61
    1e92:	de b7       	in	r29, 0x3e	; 62
	u8 key_Level;
	LCD_enuSendCMD(LCD_CLEAR_SCREEN);
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	0e 94 d5 10 	call	0x21aa	; 0x21aa <LCD_enuSendCMD>
	LCD_voidGoToPosition(1,1);
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	61 e0       	ldi	r22, 0x01	; 1
    1e9e:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <LCD_voidGoToPosition>
	LCD_vidWriteString("2-POWER LEVEL");
    1ea2:	80 e8       	ldi	r24, 0x80	; 128
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	0e 94 2f 11 	call	0x225e	; 0x225e <LCD_vidWriteString>
	LCD_voidGoToPosition(2,1);
    1eaa:	82 e0       	ldi	r24, 0x02	; 2
    1eac:	61 e0       	ldi	r22, 0x01	; 1
    1eae:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <LCD_voidGoToPosition>
	LCD_vidWriteString("1LOW 2Med 3High");
    1eb2:	8e e8       	ldi	r24, 0x8E	; 142
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	0e 94 2f 11 	call	0x225e	; 0x225e <LCD_vidWriteString>
    1eba:	04 c0       	rjmp	.+8      	; 0x1ec4 <Heater_ON+0x3c>
	while(!key_Level)
	{
		key_Level=Keypad_u8Keypress(DIO_U8_PORT_C);
    1ebc:	82 e0       	ldi	r24, 0x02	; 2
    1ebe:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <Keypad_u8Keypress>
    1ec2:	89 83       	std	Y+1, r24	; 0x01
	LCD_enuSendCMD(LCD_CLEAR_SCREEN);
	LCD_voidGoToPosition(1,1);
	LCD_vidWriteString("2-POWER LEVEL");
	LCD_voidGoToPosition(2,1);
	LCD_vidWriteString("1LOW 2Med 3High");
	while(!key_Level)
    1ec4:	89 81       	ldd	r24, Y+1	; 0x01
    1ec6:	88 23       	and	r24, r24
    1ec8:	c9 f3       	breq	.-14     	; 0x1ebc <Heater_ON+0x34>
	{
		key_Level=Keypad_u8Keypress(DIO_U8_PORT_C);
	}
	switch(key_Level)
    1eca:	89 81       	ldd	r24, Y+1	; 0x01
    1ecc:	28 2f       	mov	r18, r24
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	3b 83       	std	Y+3, r19	; 0x03
    1ed2:	2a 83       	std	Y+2, r18	; 0x02
    1ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ed8:	82 33       	cpi	r24, 0x32	; 50
    1eda:	91 05       	cpc	r25, r1
    1edc:	69 f0       	breq	.+26     	; 0x1ef8 <Heater_ON+0x70>
    1ede:	2a 81       	ldd	r18, Y+2	; 0x02
    1ee0:	3b 81       	ldd	r19, Y+3	; 0x03
    1ee2:	23 33       	cpi	r18, 0x33	; 51
    1ee4:	31 05       	cpc	r19, r1
    1ee6:	59 f0       	breq	.+22     	; 0x1efe <Heater_ON+0x76>
    1ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eea:	9b 81       	ldd	r25, Y+3	; 0x03
    1eec:	81 33       	cpi	r24, 0x31	; 49
    1eee:	91 05       	cpc	r25, r1
    1ef0:	41 f4       	brne	.+16     	; 0x1f02 <Heater_ON+0x7a>
	{
	case'1':
		//SELECT POWER LEVEL TO TURN ON THE HEATER
	{
		POWER_LOW();
    1ef2:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <POWER_LOW>
    1ef6:	05 c0       	rjmp	.+10     	; 0x1f02 <Heater_ON+0x7a>
		break;
	}
	case'2':
		//SELECT POWER LEVEL TO TURN ON THE HEATER
	{
		POWER_Meduim();
    1ef8:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <POWER_Meduim>
    1efc:	02 c0       	rjmp	.+4      	; 0x1f02 <Heater_ON+0x7a>
		break;
	}
	case'3':
		//SELECT POWER LEVEL TO TURN ON THE HEATER
	{
		POWER_High();
    1efe:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <POWER_High>
		break;
	}
	}
}
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	0f 90       	pop	r0
    1f08:	cf 91       	pop	r28
    1f0a:	df 91       	pop	r29
    1f0c:	08 95       	ret

00001f0e <POWER_LOW>:
void POWER_LOW(void)
{
    1f0e:	df 93       	push	r29
    1f10:	cf 93       	push	r28
    1f12:	cd b7       	in	r28, 0x3d	; 61
    1f14:	de b7       	in	r29, 0x3e	; 62
	Timer0_Init( TIMER0_FASTPWM_MODE,TIMER0_SCALER_1 ,OCO_NON_INVERTING);
    1f16:	83 e0       	ldi	r24, 0x03	; 3
    1f18:	61 e0       	ldi	r22, 0x01	; 1
    1f1a:	42 e0       	ldi	r20, 0x02	; 2
    1f1c:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <Timer0_Init>
	OCR0=50;
    1f20:	ec e5       	ldi	r30, 0x5C	; 92
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	82 e3       	ldi	r24, 0x32	; 50
    1f26:	80 83       	st	Z, r24
}
    1f28:	cf 91       	pop	r28
    1f2a:	df 91       	pop	r29
    1f2c:	08 95       	ret

00001f2e <POWER_Meduim>:
void POWER_Meduim(void)
{
    1f2e:	df 93       	push	r29
    1f30:	cf 93       	push	r28
    1f32:	cd b7       	in	r28, 0x3d	; 61
    1f34:	de b7       	in	r29, 0x3e	; 62
	Timer0_Init( TIMER0_FASTPWM_MODE,TIMER0_SCALER_1 ,OCO_NON_INVERTING);
    1f36:	83 e0       	ldi	r24, 0x03	; 3
    1f38:	61 e0       	ldi	r22, 0x01	; 1
    1f3a:	42 e0       	ldi	r20, 0x02	; 2
    1f3c:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <Timer0_Init>
	OCR0=127;
    1f40:	ec e5       	ldi	r30, 0x5C	; 92
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	8f e7       	ldi	r24, 0x7F	; 127
    1f46:	80 83       	st	Z, r24
}
    1f48:	cf 91       	pop	r28
    1f4a:	df 91       	pop	r29
    1f4c:	08 95       	ret

00001f4e <POWER_High>:
void POWER_High(void)
{
    1f4e:	df 93       	push	r29
    1f50:	cf 93       	push	r28
    1f52:	cd b7       	in	r28, 0x3d	; 61
    1f54:	de b7       	in	r29, 0x3e	; 62
	Timer0_Init( TIMER0_FASTPWM_MODE,TIMER0_SCALER_1 ,OCO_NON_INVERTING);
    1f56:	83 e0       	ldi	r24, 0x03	; 3
    1f58:	61 e0       	ldi	r22, 0x01	; 1
    1f5a:	42 e0       	ldi	r20, 0x02	; 2
    1f5c:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <Timer0_Init>
	OCR0=200;
    1f60:	ec e5       	ldi	r30, 0x5C	; 92
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	88 ec       	ldi	r24, 0xC8	; 200
    1f66:	80 83       	st	Z, r24
}
    1f68:	cf 91       	pop	r28
    1f6a:	df 91       	pop	r29
    1f6c:	08 95       	ret

00001f6e <keypad_init>:
		{'1','2','3','-'},
		{'*','0','=','+'},
};

void keypad_init( u8 PortID )
{
    1f6e:	df 93       	push	r29
    1f70:	cf 93       	push	r28
    1f72:	0f 92       	push	r0
    1f74:	cd b7       	in	r28, 0x3d	; 61
    1f76:	de b7       	in	r29, 0x3e	; 62
    1f78:	89 83       	std	Y+1, r24	; 0x01
	DIO_enumSetPortDirection(PortID,0xf0);   // 4pin input -4pin output
    1f7a:	89 81       	ldd	r24, Y+1	; 0x01
    1f7c:	60 ef       	ldi	r22, 0xF0	; 240
    1f7e:	0e 94 3f 06 	call	0xc7e	; 0xc7e <DIO_enumSetPortDirection>
	DIO_enumSetPortValue(PortID,0xff);       // port high
    1f82:	89 81       	ldd	r24, Y+1	; 0x01
    1f84:	6f ef       	ldi	r22, 0xFF	; 255
    1f86:	0e 94 23 07 	call	0xe46	; 0xe46 <DIO_enumSetPortValue>
}
    1f8a:	0f 90       	pop	r0
    1f8c:	cf 91       	pop	r28
    1f8e:	df 91       	pop	r29
    1f90:	08 95       	ret

00001f92 <Keypad_u8Keypress>:
u8 Keypad_u8Keypress( u8 PortID)
{
    1f92:	df 93       	push	r29
    1f94:	cf 93       	push	r28
    1f96:	cd b7       	in	r28, 0x3d	; 61
    1f98:	de b7       	in	r29, 0x3e	; 62
    1f9a:	62 97       	sbiw	r28, 0x12	; 18
    1f9c:	0f b6       	in	r0, 0x3f	; 63
    1f9e:	f8 94       	cli
    1fa0:	de bf       	out	0x3e, r29	; 62
    1fa2:	0f be       	out	0x3f, r0	; 63
    1fa4:	cd bf       	out	0x3d, r28	; 61
    1fa6:	8a 8b       	std	Y+18, r24	; 0x12
	u8 col=0;
    1fa8:	19 8a       	std	Y+17, r1	; 0x11
	u8 row=0;
    1faa:	18 8a       	std	Y+16, r1	; 0x10
	u8 Local_u8KeyResult=0;
    1fac:	1f 86       	std	Y+15, r1	; 0x0f
	for(col=4;col<8;col++)
    1fae:	84 e0       	ldi	r24, 0x04	; 4
    1fb0:	89 8b       	std	Y+17, r24	; 0x11
    1fb2:	aa c0       	rjmp	.+340    	; 0x2108 <Keypad_u8Keypress+0x176>
	{
		DIO_enumSetPinValue(PortID,col,DIO_U8_LOW);        //to create 0 in the pattern
    1fb4:	8a 89       	ldd	r24, Y+18	; 0x12
    1fb6:	69 89       	ldd	r22, Y+17	; 0x11
    1fb8:	40 e0       	ldi	r20, 0x00	; 0
    1fba:	0e 94 70 07 	call	0xee0	; 0xee0 <DIO_enumSetPinValue>
		for (row=0;row<4;row++)                            // loop through rows to find which key is pressed
    1fbe:	18 8a       	std	Y+16, r1	; 0x10
    1fc0:	97 c0       	rjmp	.+302    	; 0x20f0 <Keypad_u8Keypress+0x15e>
		{
			if(!(DIO_enumGetPinValue(PortID,row)))         // check rows how set zero /if( (DIO_enumGetPinValue(PortID,row)==0)
    1fc2:	8a 89       	ldd	r24, Y+18	; 0x12
    1fc4:	68 89       	ldd	r22, Y+16	; 0x10
    1fc6:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enumGetPinValue>
    1fca:	88 23       	and	r24, r24
    1fcc:	09 f0       	breq	.+2      	; 0x1fd0 <Keypad_u8Keypress+0x3e>
    1fce:	8d c0       	rjmp	.+282    	; 0x20ea <Keypad_u8Keypress+0x158>
			{
				while(!DIO_enumGetPinValue(PortID,row));   // polling while pressing the button /while(DIO_enumGetPinValue(PortID,row)==0);
    1fd0:	8a 89       	ldd	r24, Y+18	; 0x12
    1fd2:	68 89       	ldd	r22, Y+16	; 0x10
    1fd4:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enumGetPinValue>
    1fd8:	88 23       	and	r24, r24
    1fda:	d1 f3       	breq	.-12     	; 0x1fd0 <Keypad_u8Keypress+0x3e>
				Local_u8KeyResult = arr_Keypad[row][col-4];      // equaling the pattern to the value equavilant in the array(-4)
    1fdc:	88 89       	ldd	r24, Y+16	; 0x10
    1fde:	48 2f       	mov	r20, r24
    1fe0:	50 e0       	ldi	r21, 0x00	; 0
    1fe2:	89 89       	ldd	r24, Y+17	; 0x11
    1fe4:	88 2f       	mov	r24, r24
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	9c 01       	movw	r18, r24
    1fea:	24 50       	subi	r18, 0x04	; 4
    1fec:	30 40       	sbci	r19, 0x00	; 0
    1fee:	ca 01       	movw	r24, r20
    1ff0:	88 0f       	add	r24, r24
    1ff2:	99 1f       	adc	r25, r25
    1ff4:	88 0f       	add	r24, r24
    1ff6:	99 1f       	adc	r25, r25
    1ff8:	82 0f       	add	r24, r18
    1ffa:	93 1f       	adc	r25, r19
    1ffc:	fc 01       	movw	r30, r24
    1ffe:	e3 50       	subi	r30, 0x03	; 3
    2000:	ff 4f       	sbci	r31, 0xFF	; 255
    2002:	80 81       	ld	r24, Z
    2004:	8f 87       	std	Y+15, r24	; 0x0f
    2006:	80 e0       	ldi	r24, 0x00	; 0
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	a0 e2       	ldi	r26, 0x20	; 32
    200c:	b1 e4       	ldi	r27, 0x41	; 65
    200e:	8b 87       	std	Y+11, r24	; 0x0b
    2010:	9c 87       	std	Y+12, r25	; 0x0c
    2012:	ad 87       	std	Y+13, r26	; 0x0d
    2014:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2016:	6b 85       	ldd	r22, Y+11	; 0x0b
    2018:	7c 85       	ldd	r23, Y+12	; 0x0c
    201a:	8d 85       	ldd	r24, Y+13	; 0x0d
    201c:	9e 85       	ldd	r25, Y+14	; 0x0e
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	4a ef       	ldi	r20, 0xFA	; 250
    2024:	54 e4       	ldi	r21, 0x44	; 68
    2026:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    202a:	dc 01       	movw	r26, r24
    202c:	cb 01       	movw	r24, r22
    202e:	8f 83       	std	Y+7, r24	; 0x07
    2030:	98 87       	std	Y+8, r25	; 0x08
    2032:	a9 87       	std	Y+9, r26	; 0x09
    2034:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2036:	6f 81       	ldd	r22, Y+7	; 0x07
    2038:	78 85       	ldd	r23, Y+8	; 0x08
    203a:	89 85       	ldd	r24, Y+9	; 0x09
    203c:	9a 85       	ldd	r25, Y+10	; 0x0a
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	40 e8       	ldi	r20, 0x80	; 128
    2044:	5f e3       	ldi	r21, 0x3F	; 63
    2046:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    204a:	88 23       	and	r24, r24
    204c:	2c f4       	brge	.+10     	; 0x2058 <Keypad_u8Keypress+0xc6>
		__ticks = 1;
    204e:	81 e0       	ldi	r24, 0x01	; 1
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	9e 83       	std	Y+6, r25	; 0x06
    2054:	8d 83       	std	Y+5, r24	; 0x05
    2056:	3f c0       	rjmp	.+126    	; 0x20d6 <Keypad_u8Keypress+0x144>
	else if (__tmp > 65535)
    2058:	6f 81       	ldd	r22, Y+7	; 0x07
    205a:	78 85       	ldd	r23, Y+8	; 0x08
    205c:	89 85       	ldd	r24, Y+9	; 0x09
    205e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2060:	20 e0       	ldi	r18, 0x00	; 0
    2062:	3f ef       	ldi	r19, 0xFF	; 255
    2064:	4f e7       	ldi	r20, 0x7F	; 127
    2066:	57 e4       	ldi	r21, 0x47	; 71
    2068:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    206c:	18 16       	cp	r1, r24
    206e:	4c f5       	brge	.+82     	; 0x20c2 <Keypad_u8Keypress+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2070:	6b 85       	ldd	r22, Y+11	; 0x0b
    2072:	7c 85       	ldd	r23, Y+12	; 0x0c
    2074:	8d 85       	ldd	r24, Y+13	; 0x0d
    2076:	9e 85       	ldd	r25, Y+14	; 0x0e
    2078:	20 e0       	ldi	r18, 0x00	; 0
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	40 e2       	ldi	r20, 0x20	; 32
    207e:	51 e4       	ldi	r21, 0x41	; 65
    2080:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2084:	dc 01       	movw	r26, r24
    2086:	cb 01       	movw	r24, r22
    2088:	bc 01       	movw	r22, r24
    208a:	cd 01       	movw	r24, r26
    208c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	9e 83       	std	Y+6, r25	; 0x06
    2096:	8d 83       	std	Y+5, r24	; 0x05
    2098:	0f c0       	rjmp	.+30     	; 0x20b8 <Keypad_u8Keypress+0x126>
    209a:	88 ec       	ldi	r24, 0xC8	; 200
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	9c 83       	std	Y+4, r25	; 0x04
    20a0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20a2:	8b 81       	ldd	r24, Y+3	; 0x03
    20a4:	9c 81       	ldd	r25, Y+4	; 0x04
    20a6:	01 97       	sbiw	r24, 0x01	; 1
    20a8:	f1 f7       	brne	.-4      	; 0x20a6 <Keypad_u8Keypress+0x114>
    20aa:	9c 83       	std	Y+4, r25	; 0x04
    20ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ae:	8d 81       	ldd	r24, Y+5	; 0x05
    20b0:	9e 81       	ldd	r25, Y+6	; 0x06
    20b2:	01 97       	sbiw	r24, 0x01	; 1
    20b4:	9e 83       	std	Y+6, r25	; 0x06
    20b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20b8:	8d 81       	ldd	r24, Y+5	; 0x05
    20ba:	9e 81       	ldd	r25, Y+6	; 0x06
    20bc:	00 97       	sbiw	r24, 0x00	; 0
    20be:	69 f7       	brne	.-38     	; 0x209a <Keypad_u8Keypress+0x108>
    20c0:	14 c0       	rjmp	.+40     	; 0x20ea <Keypad_u8Keypress+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20c2:	6f 81       	ldd	r22, Y+7	; 0x07
    20c4:	78 85       	ldd	r23, Y+8	; 0x08
    20c6:	89 85       	ldd	r24, Y+9	; 0x09
    20c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ce:	dc 01       	movw	r26, r24
    20d0:	cb 01       	movw	r24, r22
    20d2:	9e 83       	std	Y+6, r25	; 0x06
    20d4:	8d 83       	std	Y+5, r24	; 0x05
    20d6:	8d 81       	ldd	r24, Y+5	; 0x05
    20d8:	9e 81       	ldd	r25, Y+6	; 0x06
    20da:	9a 83       	std	Y+2, r25	; 0x02
    20dc:	89 83       	std	Y+1, r24	; 0x01
    20de:	89 81       	ldd	r24, Y+1	; 0x01
    20e0:	9a 81       	ldd	r25, Y+2	; 0x02
    20e2:	01 97       	sbiw	r24, 0x01	; 1
    20e4:	f1 f7       	brne	.-4      	; 0x20e2 <Keypad_u8Keypress+0x150>
    20e6:	9a 83       	std	Y+2, r25	; 0x02
    20e8:	89 83       	std	Y+1, r24	; 0x01
	u8 row=0;
	u8 Local_u8KeyResult=0;
	for(col=4;col<8;col++)
	{
		DIO_enumSetPinValue(PortID,col,DIO_U8_LOW);        //to create 0 in the pattern
		for (row=0;row<4;row++)                            // loop through rows to find which key is pressed
    20ea:	88 89       	ldd	r24, Y+16	; 0x10
    20ec:	8f 5f       	subi	r24, 0xFF	; 255
    20ee:	88 8b       	std	Y+16, r24	; 0x10
    20f0:	88 89       	ldd	r24, Y+16	; 0x10
    20f2:	84 30       	cpi	r24, 0x04	; 4
    20f4:	08 f4       	brcc	.+2      	; 0x20f8 <Keypad_u8Keypress+0x166>
    20f6:	65 cf       	rjmp	.-310    	; 0x1fc2 <Keypad_u8Keypress+0x30>
				Local_u8KeyResult = arr_Keypad[row][col-4];      // equaling the pattern to the value equavilant in the array(-4)

				_delay_ms(10); // to overcome any bouncing
			}
        }
		DIO_enumSetPinValue(PortID,col,DIO_U8_HIGH);
    20f8:	8a 89       	ldd	r24, Y+18	; 0x12
    20fa:	69 89       	ldd	r22, Y+17	; 0x11
    20fc:	41 e0       	ldi	r20, 0x01	; 1
    20fe:	0e 94 70 07 	call	0xee0	; 0xee0 <DIO_enumSetPinValue>
u8 Keypad_u8Keypress( u8 PortID)
{
	u8 col=0;
	u8 row=0;
	u8 Local_u8KeyResult=0;
	for(col=4;col<8;col++)
    2102:	89 89       	ldd	r24, Y+17	; 0x11
    2104:	8f 5f       	subi	r24, 0xFF	; 255
    2106:	89 8b       	std	Y+17, r24	; 0x11
    2108:	89 89       	ldd	r24, Y+17	; 0x11
    210a:	88 30       	cpi	r24, 0x08	; 8
    210c:	08 f4       	brcc	.+2      	; 0x2110 <Keypad_u8Keypress+0x17e>
    210e:	52 cf       	rjmp	.-348    	; 0x1fb4 <Keypad_u8Keypress+0x22>
				_delay_ms(10); // to overcome any bouncing
			}
        }
		DIO_enumSetPinValue(PortID,col,DIO_U8_HIGH);
	}
	return Local_u8KeyResult;
    2110:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2112:	62 96       	adiw	r28, 0x12	; 18
    2114:	0f b6       	in	r0, 0x3f	; 63
    2116:	f8 94       	cli
    2118:	de bf       	out	0x3e, r29	; 62
    211a:	0f be       	out	0x3f, r0	; 63
    211c:	cd bf       	out	0x3d, r28	; 61
    211e:	cf 91       	pop	r28
    2120:	df 91       	pop	r29
    2122:	08 95       	ret

00002124 <LCD_enuInit>:
#include "lcd_priv.h"
#include "lcd_conf.h"

#define LCD_8MODE  _8_BITS
ErrorStatus    LCD_enuInit(void)
{
    2124:	df 93       	push	r29
    2126:	cf 93       	push	r28
    2128:	0f 92       	push	r0
    212a:	cd b7       	in	r28, 0x3d	; 61
    212c:	de b7       	in	r29, 0x3e	; 62
	ErrorStatus error =ES_NOK;
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	89 83       	std	Y+1, r24	; 0x01
	Delay_ms(15);
    2132:	6f e0       	ldi	r22, 0x0F	; 15
    2134:	70 e0       	ldi	r23, 0x00	; 0
    2136:	80 e0       	ldi	r24, 0x00	; 0
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	0e 94 a3 05 	call	0xb46	; 0xb46 <Delay_ms>

#if  LCD_8MODE == _8_BITS

	LCD_enuSendCMD(0x80);
    213e:	80 e8       	ldi	r24, 0x80	; 128
    2140:	0e 94 d5 10 	call	0x21aa	; 0x21aa <LCD_enuSendCMD>
	Delay_ms(15);
    2144:	6f e0       	ldi	r22, 0x0F	; 15
    2146:	70 e0       	ldi	r23, 0x00	; 0
    2148:	80 e0       	ldi	r24, 0x00	; 0
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	0e 94 a3 05 	call	0xb46	; 0xb46 <Delay_ms>

	LCD_enuSendCMD(0x38);
    2150:	88 e3       	ldi	r24, 0x38	; 56
    2152:	0e 94 d5 10 	call	0x21aa	; 0x21aa <LCD_enuSendCMD>

	Delay_ms(1);
    2156:	61 e0       	ldi	r22, 0x01	; 1
    2158:	70 e0       	ldi	r23, 0x00	; 0
    215a:	80 e0       	ldi	r24, 0x00	; 0
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	0e 94 a3 05 	call	0xb46	; 0xb46 <Delay_ms>

	LCD_enuSendCMD(0x0C);
    2162:	8c e0       	ldi	r24, 0x0C	; 12
    2164:	0e 94 d5 10 	call	0x21aa	; 0x21aa <LCD_enuSendCMD>

	Delay_ms(1);
    2168:	61 e0       	ldi	r22, 0x01	; 1
    216a:	70 e0       	ldi	r23, 0x00	; 0
    216c:	80 e0       	ldi	r24, 0x00	; 0
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	0e 94 a3 05 	call	0xb46	; 0xb46 <Delay_ms>

	LCD_enuSendCMD(0x01);
    2174:	81 e0       	ldi	r24, 0x01	; 1
    2176:	0e 94 d5 10 	call	0x21aa	; 0x21aa <LCD_enuSendCMD>

	Delay_ms(2);
    217a:	62 e0       	ldi	r22, 0x02	; 2
    217c:	70 e0       	ldi	r23, 0x00	; 0
    217e:	80 e0       	ldi	r24, 0x00	; 0
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	0e 94 a3 05 	call	0xb46	; 0xb46 <Delay_ms>

	LCD_enuSendCMD(0x06);
    2186:	86 e0       	ldi	r24, 0x06	; 6
    2188:	0e 94 d5 10 	call	0x21aa	; 0x21aa <LCD_enuSendCMD>

	Delay_ms(1);
    218c:	61 e0       	ldi	r22, 0x01	; 1
    218e:	70 e0       	ldi	r23, 0x00	; 0
    2190:	80 e0       	ldi	r24, 0x00	; 0
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	0e 94 a3 05 	call	0xb46	; 0xb46 <Delay_ms>
	LCD_enuSendCMD(0x14);
    2198:	84 e1       	ldi	r24, 0x14	; 20
    219a:	0e 94 d5 10 	call	0x21aa	; 0x21aa <LCD_enuSendCMD>

	error = ES_OK;
    219e:	19 82       	std	Y+1, r1	; 0x01

	error = ES_OK;
#else
#error  "Wrong LCD MODE"
#endif
	return error;
    21a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    21a2:	0f 90       	pop	r0
    21a4:	cf 91       	pop	r28
    21a6:	df 91       	pop	r29
    21a8:	08 95       	ret

000021aa <LCD_enuSendCMD>:
ErrorStatus    LCD_enuSendCMD(u8 copy_u8CMD)
{
    21aa:	df 93       	push	r29
    21ac:	cf 93       	push	r28
    21ae:	00 d0       	rcall	.+0      	; 0x21b0 <LCD_enuSendCMD+0x6>
    21b0:	cd b7       	in	r28, 0x3d	; 61
    21b2:	de b7       	in	r29, 0x3e	; 62
    21b4:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus error= ES_NOK;
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	89 83       	std	Y+1, r24	; 0x01

	DIO_enumSetPinValue(LCD_CONTROL,RS_PIN,DIO_U8_LOW);
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	60 e0       	ldi	r22, 0x00	; 0
    21be:	40 e0       	ldi	r20, 0x00	; 0
    21c0:	0e 94 70 07 	call	0xee0	; 0xee0 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(LCD_CONTROL,RW_PIN,DIO_U8_LOW);
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	61 e0       	ldi	r22, 0x01	; 1
    21c8:	40 e0       	ldi	r20, 0x00	; 0
    21ca:	0e 94 70 07 	call	0xee0	; 0xee0 <DIO_enumSetPinValue>

	DIO_enumSetPortValue(LCD_DATA,copy_u8CMD);
    21ce:	80 e0       	ldi	r24, 0x00	; 0
    21d0:	6a 81       	ldd	r22, Y+2	; 0x02
    21d2:	0e 94 23 07 	call	0xe46	; 0xe46 <DIO_enumSetPortValue>

	DIO_enumSetPinValue(LCD_CONTROL,EN_PIN,DIO_U8_HIGH);
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	64 e0       	ldi	r22, 0x04	; 4
    21da:	41 e0       	ldi	r20, 0x01	; 1
    21dc:	0e 94 70 07 	call	0xee0	; 0xee0 <DIO_enumSetPinValue>
	Delay_ms(2);
    21e0:	62 e0       	ldi	r22, 0x02	; 2
    21e2:	70 e0       	ldi	r23, 0x00	; 0
    21e4:	80 e0       	ldi	r24, 0x00	; 0
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	0e 94 a3 05 	call	0xb46	; 0xb46 <Delay_ms>
	DIO_enumSetPinValue(LCD_CONTROL,EN_PIN,DIO_U8_LOW);
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	64 e0       	ldi	r22, 0x04	; 4
    21f0:	40 e0       	ldi	r20, 0x00	; 0
    21f2:	0e 94 70 07 	call	0xee0	; 0xee0 <DIO_enumSetPinValue>
	error=ES_OK;
    21f6:	19 82       	std	Y+1, r1	; 0x01
	//_delay_ms(100);
	return error;
    21f8:	89 81       	ldd	r24, Y+1	; 0x01

}
    21fa:	0f 90       	pop	r0
    21fc:	0f 90       	pop	r0
    21fe:	cf 91       	pop	r28
    2200:	df 91       	pop	r29
    2202:	08 95       	ret

00002204 <LCD_enuSendData>:
ErrorStatus    LCD_enuSendData(u8 copy_u8Data)
{
    2204:	df 93       	push	r29
    2206:	cf 93       	push	r28
    2208:	00 d0       	rcall	.+0      	; 0x220a <LCD_enuSendData+0x6>
    220a:	cd b7       	in	r28, 0x3d	; 61
    220c:	de b7       	in	r29, 0x3e	; 62
    220e:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus error= ES_NOK;
    2210:	81 e0       	ldi	r24, 0x01	; 1
    2212:	89 83       	std	Y+1, r24	; 0x01
	DIO_enumSetPinValue(LCD_CONTROL,RS_PIN,DIO_U8_HIGH);
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	60 e0       	ldi	r22, 0x00	; 0
    2218:	41 e0       	ldi	r20, 0x01	; 1
    221a:	0e 94 70 07 	call	0xee0	; 0xee0 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(LCD_CONTROL,RW_PIN,DIO_U8_LOW);
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	61 e0       	ldi	r22, 0x01	; 1
    2222:	40 e0       	ldi	r20, 0x00	; 0
    2224:	0e 94 70 07 	call	0xee0	; 0xee0 <DIO_enumSetPinValue>

	DIO_enumSetPortValue(LCD_DATA,copy_u8Data);
    2228:	80 e0       	ldi	r24, 0x00	; 0
    222a:	6a 81       	ldd	r22, Y+2	; 0x02
    222c:	0e 94 23 07 	call	0xe46	; 0xe46 <DIO_enumSetPortValue>

	DIO_enumSetPinValue(LCD_CONTROL,EN_PIN,DIO_U8_HIGH);
    2230:	81 e0       	ldi	r24, 0x01	; 1
    2232:	64 e0       	ldi	r22, 0x04	; 4
    2234:	41 e0       	ldi	r20, 0x01	; 1
    2236:	0e 94 70 07 	call	0xee0	; 0xee0 <DIO_enumSetPinValue>
	Delay_ms(2);
    223a:	62 e0       	ldi	r22, 0x02	; 2
    223c:	70 e0       	ldi	r23, 0x00	; 0
    223e:	80 e0       	ldi	r24, 0x00	; 0
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	0e 94 a3 05 	call	0xb46	; 0xb46 <Delay_ms>
	DIO_enumSetPinValue(LCD_CONTROL,EN_PIN,DIO_U8_LOW);
    2246:	81 e0       	ldi	r24, 0x01	; 1
    2248:	64 e0       	ldi	r22, 0x04	; 4
    224a:	40 e0       	ldi	r20, 0x00	; 0
    224c:	0e 94 70 07 	call	0xee0	; 0xee0 <DIO_enumSetPinValue>
	error=ES_OK;
    2250:	19 82       	std	Y+1, r1	; 0x01
	//_delay_ms(100);
	return error;
    2252:	89 81       	ldd	r24, Y+1	; 0x01


}
    2254:	0f 90       	pop	r0
    2256:	0f 90       	pop	r0
    2258:	cf 91       	pop	r28
    225a:	df 91       	pop	r29
    225c:	08 95       	ret

0000225e <LCD_vidWriteString>:
void LCD_vidWriteString (u8* Au8_String)
{
    225e:	df 93       	push	r29
    2260:	cf 93       	push	r28
    2262:	00 d0       	rcall	.+0      	; 0x2264 <LCD_vidWriteString+0x6>
    2264:	0f 92       	push	r0
    2266:	cd b7       	in	r28, 0x3d	; 61
    2268:	de b7       	in	r29, 0x3e	; 62
    226a:	9b 83       	std	Y+3, r25	; 0x03
    226c:	8a 83       	std	Y+2, r24	; 0x02
	u8 index = 0;
    226e:	19 82       	std	Y+1, r1	; 0x01
    2270:	0e c0       	rjmp	.+28     	; 0x228e <LCD_vidWriteString+0x30>
	{
		//if(Au8_String[index]<'0')
		//{
		//continue;
		//}
		LCD_enuSendData (Au8_String[index]);
    2272:	89 81       	ldd	r24, Y+1	; 0x01
    2274:	28 2f       	mov	r18, r24
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	8a 81       	ldd	r24, Y+2	; 0x02
    227a:	9b 81       	ldd	r25, Y+3	; 0x03
    227c:	fc 01       	movw	r30, r24
    227e:	e2 0f       	add	r30, r18
    2280:	f3 1f       	adc	r31, r19
    2282:	80 81       	ld	r24, Z
    2284:	0e 94 02 11 	call	0x2204	; 0x2204 <LCD_enuSendData>
		index++;
    2288:	89 81       	ldd	r24, Y+1	; 0x01
    228a:	8f 5f       	subi	r24, 0xFF	; 255
    228c:	89 83       	std	Y+1, r24	; 0x01

}
void LCD_vidWriteString (u8* Au8_String)
{
	u8 index = 0;
	while (Au8_String[index] != '\0')
    228e:	89 81       	ldd	r24, Y+1	; 0x01
    2290:	28 2f       	mov	r18, r24
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	8a 81       	ldd	r24, Y+2	; 0x02
    2296:	9b 81       	ldd	r25, Y+3	; 0x03
    2298:	fc 01       	movw	r30, r24
    229a:	e2 0f       	add	r30, r18
    229c:	f3 1f       	adc	r31, r19
    229e:	80 81       	ld	r24, Z
    22a0:	88 23       	and	r24, r24
    22a2:	39 f7       	brne	.-50     	; 0x2272 <LCD_vidWriteString+0x14>
		//}
		LCD_enuSendData (Au8_String[index]);
		index++;

	}
}
    22a4:	0f 90       	pop	r0
    22a6:	0f 90       	pop	r0
    22a8:	0f 90       	pop	r0
    22aa:	cf 91       	pop	r28
    22ac:	df 91       	pop	r29
    22ae:	08 95       	ret

000022b0 <Go_to_PosWriteStr>:
/*      Descriotion       : This Function  Used To Write string in position          */
/*      Inputs            : Position,Line and String                                 */
/*      outputs           :  Void                                                    */
/*************************************************************************************/
void Go_to_PosWriteStr(u8 position,u8 line,u8* Au8_String)
{
    22b0:	df 93       	push	r29
    22b2:	cf 93       	push	r28
    22b4:	00 d0       	rcall	.+0      	; 0x22b6 <Go_to_PosWriteStr+0x6>
    22b6:	00 d0       	rcall	.+0      	; 0x22b8 <Go_to_PosWriteStr+0x8>
    22b8:	0f 92       	push	r0
    22ba:	cd b7       	in	r28, 0x3d	; 61
    22bc:	de b7       	in	r29, 0x3e	; 62
    22be:	8a 83       	std	Y+2, r24	; 0x02
    22c0:	6b 83       	std	Y+3, r22	; 0x03
    22c2:	5d 83       	std	Y+5, r21	; 0x05
    22c4:	4c 83       	std	Y+4, r20	; 0x04
	u8 index=0;// counter of count num of char in the string
    22c6:	19 82       	std	Y+1, r1	; 0x01
	if (line== 0&&position<=16)
    22c8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ca:	88 23       	and	r24, r24
    22cc:	41 f5       	brne	.+80     	; 0x231e <Go_to_PosWriteStr+0x6e>
    22ce:	8a 81       	ldd	r24, Y+2	; 0x02
    22d0:	81 31       	cpi	r24, 0x11	; 17
    22d2:	28 f5       	brcc	.+74     	; 0x231e <Go_to_PosWriteStr+0x6e>
	{
		LCD_enuSendCMD (0x80+position);
    22d4:	8a 81       	ldd	r24, Y+2	; 0x02
    22d6:	80 58       	subi	r24, 0x80	; 128
    22d8:	0e 94 d5 10 	call	0x21aa	; 0x21aa <LCD_enuSendCMD>
    22dc:	14 c0       	rjmp	.+40     	; 0x2306 <Go_to_PosWriteStr+0x56>
		while (Au8_String[index] != '\0')
		{
			LCD_enuSendData (Au8_String[index]);
    22de:	89 81       	ldd	r24, Y+1	; 0x01
    22e0:	28 2f       	mov	r18, r24
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	8c 81       	ldd	r24, Y+4	; 0x04
    22e6:	9d 81       	ldd	r25, Y+5	; 0x05
    22e8:	fc 01       	movw	r30, r24
    22ea:	e2 0f       	add	r30, r18
    22ec:	f3 1f       	adc	r31, r19
    22ee:	80 81       	ld	r24, Z
    22f0:	0e 94 02 11 	call	0x2204	; 0x2204 <LCD_enuSendData>
			index++;
    22f4:	89 81       	ldd	r24, Y+1	; 0x01
    22f6:	8f 5f       	subi	r24, 0xFF	; 255
    22f8:	89 83       	std	Y+1, r24	; 0x01
			Delay_ms(5);
    22fa:	65 e0       	ldi	r22, 0x05	; 5
    22fc:	70 e0       	ldi	r23, 0x00	; 0
    22fe:	80 e0       	ldi	r24, 0x00	; 0
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	0e 94 a3 05 	call	0xb46	; 0xb46 <Delay_ms>
{
	u8 index=0;// counter of count num of char in the string
	if (line== 0&&position<=16)
	{
		LCD_enuSendCMD (0x80+position);
		while (Au8_String[index] != '\0')
    2306:	89 81       	ldd	r24, Y+1	; 0x01
    2308:	28 2f       	mov	r18, r24
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	8c 81       	ldd	r24, Y+4	; 0x04
    230e:	9d 81       	ldd	r25, Y+5	; 0x05
    2310:	fc 01       	movw	r30, r24
    2312:	e2 0f       	add	r30, r18
    2314:	f3 1f       	adc	r31, r19
    2316:	80 81       	ld	r24, Z
    2318:	88 23       	and	r24, r24
    231a:	09 f7       	brne	.-62     	; 0x22de <Go_to_PosWriteStr+0x2e>
    231c:	2a c0       	rjmp	.+84     	; 0x2372 <Go_to_PosWriteStr+0xc2>
			LCD_enuSendData (Au8_String[index]);
			index++;
			Delay_ms(5);
		}
	}
	else if (line==1&&position<=15)
    231e:	8b 81       	ldd	r24, Y+3	; 0x03
    2320:	81 30       	cpi	r24, 0x01	; 1
    2322:	39 f5       	brne	.+78     	; 0x2372 <Go_to_PosWriteStr+0xc2>
    2324:	8a 81       	ldd	r24, Y+2	; 0x02
    2326:	80 31       	cpi	r24, 0x10	; 16
    2328:	20 f5       	brcc	.+72     	; 0x2372 <Go_to_PosWriteStr+0xc2>
	{
		LCD_enuSendCMD (0xc0+position);
    232a:	8a 81       	ldd	r24, Y+2	; 0x02
    232c:	80 54       	subi	r24, 0x40	; 64
    232e:	0e 94 d5 10 	call	0x21aa	; 0x21aa <LCD_enuSendCMD>
    2332:	14 c0       	rjmp	.+40     	; 0x235c <Go_to_PosWriteStr+0xac>
		while (Au8_String[index] != '\0')
		{
			LCD_enuSendData (Au8_String[index]);
    2334:	89 81       	ldd	r24, Y+1	; 0x01
    2336:	28 2f       	mov	r18, r24
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	8c 81       	ldd	r24, Y+4	; 0x04
    233c:	9d 81       	ldd	r25, Y+5	; 0x05
    233e:	fc 01       	movw	r30, r24
    2340:	e2 0f       	add	r30, r18
    2342:	f3 1f       	adc	r31, r19
    2344:	80 81       	ld	r24, Z
    2346:	0e 94 02 11 	call	0x2204	; 0x2204 <LCD_enuSendData>
			index++;
    234a:	89 81       	ldd	r24, Y+1	; 0x01
    234c:	8f 5f       	subi	r24, 0xFF	; 255
    234e:	89 83       	std	Y+1, r24	; 0x01
			Delay_ms(5);
    2350:	65 e0       	ldi	r22, 0x05	; 5
    2352:	70 e0       	ldi	r23, 0x00	; 0
    2354:	80 e0       	ldi	r24, 0x00	; 0
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	0e 94 a3 05 	call	0xb46	; 0xb46 <Delay_ms>
		}
	}
	else if (line==1&&position<=15)
	{
		LCD_enuSendCMD (0xc0+position);
		while (Au8_String[index] != '\0')
    235c:	89 81       	ldd	r24, Y+1	; 0x01
    235e:	28 2f       	mov	r18, r24
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	8c 81       	ldd	r24, Y+4	; 0x04
    2364:	9d 81       	ldd	r25, Y+5	; 0x05
    2366:	fc 01       	movw	r30, r24
    2368:	e2 0f       	add	r30, r18
    236a:	f3 1f       	adc	r31, r19
    236c:	80 81       	ld	r24, Z
    236e:	88 23       	and	r24, r24
    2370:	09 f7       	brne	.-62     	; 0x2334 <Go_to_PosWriteStr+0x84>
			LCD_enuSendData (Au8_String[index]);
			index++;
			Delay_ms(5);
		}
	}
}
    2372:	0f 90       	pop	r0
    2374:	0f 90       	pop	r0
    2376:	0f 90       	pop	r0
    2378:	0f 90       	pop	r0
    237a:	0f 90       	pop	r0
    237c:	cf 91       	pop	r28
    237e:	df 91       	pop	r29
    2380:	08 95       	ret

00002382 <lcd_gotox_y>:
/*void lcd_clear_screen()
{
	LCD_enuSendCMD(LCD_CLEAR_SCREEN);
	}*/
void lcd_gotox_y( u8 line,u8 position)
{
    2382:	df 93       	push	r29
    2384:	cf 93       	push	r28
    2386:	00 d0       	rcall	.+0      	; 0x2388 <lcd_gotox_y+0x6>
    2388:	cd b7       	in	r28, 0x3d	; 61
    238a:	de b7       	in	r29, 0x3e	; 62
    238c:	89 83       	std	Y+1, r24	; 0x01
    238e:	6a 83       	std	Y+2, r22	; 0x02
	if(line==0)
    2390:	89 81       	ldd	r24, Y+1	; 0x01
    2392:	88 23       	and	r24, r24
    2394:	41 f4       	brne	.+16     	; 0x23a6 <lcd_gotox_y+0x24>
	{
		if(position<=15&&position>=0)
    2396:	8a 81       	ldd	r24, Y+2	; 0x02
    2398:	80 31       	cpi	r24, 0x10	; 16
    239a:	78 f4       	brcc	.+30     	; 0x23ba <lcd_gotox_y+0x38>

			LCD_enuSendCMD (0x80+position);
    239c:	8a 81       	ldd	r24, Y+2	; 0x02
    239e:	80 58       	subi	r24, 0x80	; 128
    23a0:	0e 94 d5 10 	call	0x21aa	; 0x21aa <LCD_enuSendCMD>
    23a4:	0a c0       	rjmp	.+20     	; 0x23ba <lcd_gotox_y+0x38>

	}
	else if(line==1)
    23a6:	89 81       	ldd	r24, Y+1	; 0x01
    23a8:	81 30       	cpi	r24, 0x01	; 1
    23aa:	39 f4       	brne	.+14     	; 0x23ba <lcd_gotox_y+0x38>
	{
		if(position<=15&&position>=0)
    23ac:	8a 81       	ldd	r24, Y+2	; 0x02
    23ae:	80 31       	cpi	r24, 0x10	; 16
    23b0:	20 f4       	brcc	.+8      	; 0x23ba <lcd_gotox_y+0x38>

			LCD_enuSendCMD (0xc0+position);
    23b2:	8a 81       	ldd	r24, Y+2	; 0x02
    23b4:	80 54       	subi	r24, 0x40	; 64
    23b6:	0e 94 d5 10 	call	0x21aa	; 0x21aa <LCD_enuSendCMD>

	}
}
    23ba:	0f 90       	pop	r0
    23bc:	0f 90       	pop	r0
    23be:	cf 91       	pop	r28
    23c0:	df 91       	pop	r29
    23c2:	08 95       	ret

000023c4 <LCD_voidGoToPosition>:
void LCD_voidGoToPosition (u8 Copy_u8Row , u8 Copy_u8Col)
{
    23c4:	df 93       	push	r29
    23c6:	cf 93       	push	r28
    23c8:	00 d0       	rcall	.+0      	; 0x23ca <LCD_voidGoToPosition+0x6>
    23ca:	00 d0       	rcall	.+0      	; 0x23cc <LCD_voidGoToPosition+0x8>
    23cc:	cd b7       	in	r28, 0x3d	; 61
    23ce:	de b7       	in	r29, 0x3e	; 62
    23d0:	8b 83       	std	Y+3, r24	; 0x03
    23d2:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8RowLocation [] = {0x80 , 0xc0};
    23d4:	80 e8       	ldi	r24, 0x80	; 128
    23d6:	89 83       	std	Y+1, r24	; 0x01
    23d8:	80 ec       	ldi	r24, 0xC0	; 192
    23da:	8a 83       	std	Y+2, r24	; 0x02

	LCD_enuSendCMD (Local_u8RowLocation [Copy_u8Row-1]+(Copy_u8Col-1));
    23dc:	8b 81       	ldd	r24, Y+3	; 0x03
    23de:	88 2f       	mov	r24, r24
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	9c 01       	movw	r18, r24
    23e4:	21 50       	subi	r18, 0x01	; 1
    23e6:	30 40       	sbci	r19, 0x00	; 0
    23e8:	ce 01       	movw	r24, r28
    23ea:	01 96       	adiw	r24, 0x01	; 1
    23ec:	fc 01       	movw	r30, r24
    23ee:	e2 0f       	add	r30, r18
    23f0:	f3 1f       	adc	r31, r19
    23f2:	90 81       	ld	r25, Z
    23f4:	8c 81       	ldd	r24, Y+4	; 0x04
    23f6:	89 0f       	add	r24, r25
    23f8:	81 50       	subi	r24, 0x01	; 1
    23fa:	0e 94 d5 10 	call	0x21aa	; 0x21aa <LCD_enuSendCMD>
}
    23fe:	0f 90       	pop	r0
    2400:	0f 90       	pop	r0
    2402:	0f 90       	pop	r0
    2404:	0f 90       	pop	r0
    2406:	cf 91       	pop	r28
    2408:	df 91       	pop	r29
    240a:	08 95       	ret

0000240c <SinwaveWriteStr>:
/*      Descriotion       : This Function  Used To Write string in Sine Wave         */
/*      Inputs            :  String                                                  */
/*      outputs           :  Void                                                    */
/*************************************************************************************/
void SinwaveWriteStr(u8* Au8_String)
{
    240c:	df 93       	push	r29
    240e:	cf 93       	push	r28
    2410:	00 d0       	rcall	.+0      	; 0x2412 <SinwaveWriteStr+0x6>
    2412:	00 d0       	rcall	.+0      	; 0x2414 <SinwaveWriteStr+0x8>
    2414:	cd b7       	in	r28, 0x3d	; 61
    2416:	de b7       	in	r29, 0x3e	; 62
    2418:	9c 83       	std	Y+4, r25	; 0x04
    241a:	8b 83       	std	Y+3, r24	; 0x03
	u8 index = 0,flag=0; // counter of count num of char in the string
    241c:	1a 82       	std	Y+2, r1	; 0x02
    241e:	19 82       	std	Y+1, r1	; 0x01
    2420:	35 c0       	rjmp	.+106    	; 0x248c <SinwaveWriteStr+0x80>

	while (Au8_String[index] )
	{
		if(!flag){
    2422:	89 81       	ldd	r24, Y+1	; 0x01
    2424:	88 23       	and	r24, r24
    2426:	39 f4       	brne	.+14     	; 0x2436 <SinwaveWriteStr+0x2a>
			LCD_enuSendCMD(0x80 + index);
    2428:	8a 81       	ldd	r24, Y+2	; 0x02
    242a:	80 58       	subi	r24, 0x80	; 128
    242c:	0e 94 d5 10 	call	0x21aa	; 0x21aa <LCD_enuSendCMD>
			flag=1;
    2430:	81 e0       	ldi	r24, 0x01	; 1
    2432:	89 83       	std	Y+1, r24	; 0x01
    2434:	1d c0       	rjmp	.+58     	; 0x2470 <SinwaveWriteStr+0x64>
		}
		else if (flag){
    2436:	89 81       	ldd	r24, Y+1	; 0x01
    2438:	88 23       	and	r24, r24
    243a:	d1 f0       	breq	.+52     	; 0x2470 <SinwaveWriteStr+0x64>
			LCD_enuSendCMD(0xc0 + index);
    243c:	8a 81       	ldd	r24, Y+2	; 0x02
    243e:	80 54       	subi	r24, 0x40	; 64
    2440:	0e 94 d5 10 	call	0x21aa	; 0x21aa <LCD_enuSendCMD>
			flag=0;
    2444:	19 82       	std	Y+1, r1	; 0x01
    2446:	14 c0       	rjmp	.+40     	; 0x2470 <SinwaveWriteStr+0x64>

		}
		while (Au8_String[index] !=' ' ) {

			LCD_enuSendData(Au8_String[index]);
    2448:	8a 81       	ldd	r24, Y+2	; 0x02
    244a:	28 2f       	mov	r18, r24
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	8b 81       	ldd	r24, Y+3	; 0x03
    2450:	9c 81       	ldd	r25, Y+4	; 0x04
    2452:	fc 01       	movw	r30, r24
    2454:	e2 0f       	add	r30, r18
    2456:	f3 1f       	adc	r31, r19
    2458:	80 81       	ld	r24, Z
    245a:	0e 94 02 11 	call	0x2204	; 0x2204 <LCD_enuSendData>
			index++;
    245e:	8a 81       	ldd	r24, Y+2	; 0x02
    2460:	8f 5f       	subi	r24, 0xFF	; 255
    2462:	8a 83       	std	Y+2, r24	; 0x02
			Delay_ms(5);
    2464:	65 e0       	ldi	r22, 0x05	; 5
    2466:	70 e0       	ldi	r23, 0x00	; 0
    2468:	80 e0       	ldi	r24, 0x00	; 0
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	0e 94 a3 05 	call	0xb46	; 0xb46 <Delay_ms>
		else if (flag){
			LCD_enuSendCMD(0xc0 + index);
			flag=0;

		}
		while (Au8_String[index] !=' ' ) {
    2470:	8a 81       	ldd	r24, Y+2	; 0x02
    2472:	28 2f       	mov	r18, r24
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	8b 81       	ldd	r24, Y+3	; 0x03
    2478:	9c 81       	ldd	r25, Y+4	; 0x04
    247a:	fc 01       	movw	r30, r24
    247c:	e2 0f       	add	r30, r18
    247e:	f3 1f       	adc	r31, r19
    2480:	80 81       	ld	r24, Z
    2482:	80 32       	cpi	r24, 0x20	; 32
    2484:	09 f7       	brne	.-62     	; 0x2448 <SinwaveWriteStr+0x3c>

			LCD_enuSendData(Au8_String[index]);
			index++;
			Delay_ms(5);
		}
		index++; //declaring space from index and compare index to the max size we can write in 2 rows
    2486:	8a 81       	ldd	r24, Y+2	; 0x02
    2488:	8f 5f       	subi	r24, 0xFF	; 255
    248a:	8a 83       	std	Y+2, r24	; 0x02
/*************************************************************************************/
void SinwaveWriteStr(u8* Au8_String)
{
	u8 index = 0,flag=0; // counter of count num of char in the string

	while (Au8_String[index] )
    248c:	8a 81       	ldd	r24, Y+2	; 0x02
    248e:	28 2f       	mov	r18, r24
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	8b 81       	ldd	r24, Y+3	; 0x03
    2494:	9c 81       	ldd	r25, Y+4	; 0x04
    2496:	fc 01       	movw	r30, r24
    2498:	e2 0f       	add	r30, r18
    249a:	f3 1f       	adc	r31, r19
    249c:	80 81       	ld	r24, Z
    249e:	88 23       	and	r24, r24
    24a0:	09 f0       	breq	.+2      	; 0x24a4 <SinwaveWriteStr+0x98>
    24a2:	bf cf       	rjmp	.-130    	; 0x2422 <SinwaveWriteStr+0x16>
		}
		index++; //declaring space from index and compare index to the max size we can write in 2 rows
	}


}
    24a4:	0f 90       	pop	r0
    24a6:	0f 90       	pop	r0
    24a8:	0f 90       	pop	r0
    24aa:	0f 90       	pop	r0
    24ac:	cf 91       	pop	r28
    24ae:	df 91       	pop	r29
    24b0:	08 95       	ret

000024b2 <tostring>:
void tostring(char str[], u32 num)
{
    24b2:	df 93       	push	r29
    24b4:	cf 93       	push	r28
    24b6:	cd b7       	in	r28, 0x3d	; 61
    24b8:	de b7       	in	r29, 0x3e	; 62
    24ba:	66 97       	sbiw	r28, 0x16	; 22
    24bc:	0f b6       	in	r0, 0x3f	; 63
    24be:	f8 94       	cli
    24c0:	de bf       	out	0x3e, r29	; 62
    24c2:	0f be       	out	0x3f, r0	; 63
    24c4:	cd bf       	out	0x3d, r28	; 61
    24c6:	9a 8b       	std	Y+18, r25	; 0x12
    24c8:	89 8b       	std	Y+17, r24	; 0x11
    24ca:	4b 8b       	std	Y+19, r20	; 0x13
    24cc:	5c 8b       	std	Y+20, r21	; 0x14
    24ce:	6d 8b       	std	Y+21, r22	; 0x15
    24d0:	7e 8b       	std	Y+22, r23	; 0x16
    u32 i, rem, len = 0, n;
    24d2:	1d 82       	std	Y+5, r1	; 0x05
    24d4:	1e 82       	std	Y+6, r1	; 0x06
    24d6:	1f 82       	std	Y+7, r1	; 0x07
    24d8:	18 86       	std	Y+8, r1	; 0x08

    n = num;
    24da:	8b 89       	ldd	r24, Y+19	; 0x13
    24dc:	9c 89       	ldd	r25, Y+20	; 0x14
    24de:	ad 89       	ldd	r26, Y+21	; 0x15
    24e0:	be 89       	ldd	r27, Y+22	; 0x16
    24e2:	89 83       	std	Y+1, r24	; 0x01
    24e4:	9a 83       	std	Y+2, r25	; 0x02
    24e6:	ab 83       	std	Y+3, r26	; 0x03
    24e8:	bc 83       	std	Y+4, r27	; 0x04
    if(num==0)
    24ea:	8b 89       	ldd	r24, Y+19	; 0x13
    24ec:	9c 89       	ldd	r25, Y+20	; 0x14
    24ee:	ad 89       	ldd	r26, Y+21	; 0x15
    24f0:	be 89       	ldd	r27, Y+22	; 0x16
    24f2:	00 97       	sbiw	r24, 0x00	; 0
    24f4:	a1 05       	cpc	r26, r1
    24f6:	b1 05       	cpc	r27, r1
    24f8:	39 f5       	brne	.+78     	; 0x2548 <tostring+0x96>
    {str[0]='0';
    24fa:	e9 89       	ldd	r30, Y+17	; 0x11
    24fc:	fa 89       	ldd	r31, Y+18	; 0x12
    24fe:	80 e3       	ldi	r24, 0x30	; 48
    2500:	80 83       	st	Z, r24
    str[1]='\0';
    2502:	89 89       	ldd	r24, Y+17	; 0x11
    2504:	9a 89       	ldd	r25, Y+18	; 0x12
    2506:	fc 01       	movw	r30, r24
    2508:	31 96       	adiw	r30, 0x01	; 1
    250a:	10 82       	st	Z, r1
    250c:	80 c0       	rjmp	.+256    	; 0x260e <tostring+0x15c>
     return ; }
    while (n != 0)
    {
        len++;
    250e:	8d 81       	ldd	r24, Y+5	; 0x05
    2510:	9e 81       	ldd	r25, Y+6	; 0x06
    2512:	af 81       	ldd	r26, Y+7	; 0x07
    2514:	b8 85       	ldd	r27, Y+8	; 0x08
    2516:	01 96       	adiw	r24, 0x01	; 1
    2518:	a1 1d       	adc	r26, r1
    251a:	b1 1d       	adc	r27, r1
    251c:	8d 83       	std	Y+5, r24	; 0x05
    251e:	9e 83       	std	Y+6, r25	; 0x06
    2520:	af 83       	std	Y+7, r26	; 0x07
    2522:	b8 87       	std	Y+8, r27	; 0x08
        n /= 10;
    2524:	89 81       	ldd	r24, Y+1	; 0x01
    2526:	9a 81       	ldd	r25, Y+2	; 0x02
    2528:	ab 81       	ldd	r26, Y+3	; 0x03
    252a:	bc 81       	ldd	r27, Y+4	; 0x04
    252c:	2a e0       	ldi	r18, 0x0A	; 10
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	40 e0       	ldi	r20, 0x00	; 0
    2532:	50 e0       	ldi	r21, 0x00	; 0
    2534:	bc 01       	movw	r22, r24
    2536:	cd 01       	movw	r24, r26
    2538:	0e 94 38 16 	call	0x2c70	; 0x2c70 <__udivmodsi4>
    253c:	da 01       	movw	r26, r20
    253e:	c9 01       	movw	r24, r18
    2540:	89 83       	std	Y+1, r24	; 0x01
    2542:	9a 83       	std	Y+2, r25	; 0x02
    2544:	ab 83       	std	Y+3, r26	; 0x03
    2546:	bc 83       	std	Y+4, r27	; 0x04
    n = num;
    if(num==0)
    {str[0]='0';
    str[1]='\0';
     return ; }
    while (n != 0)
    2548:	89 81       	ldd	r24, Y+1	; 0x01
    254a:	9a 81       	ldd	r25, Y+2	; 0x02
    254c:	ab 81       	ldd	r26, Y+3	; 0x03
    254e:	bc 81       	ldd	r27, Y+4	; 0x04
    2550:	00 97       	sbiw	r24, 0x00	; 0
    2552:	a1 05       	cpc	r26, r1
    2554:	b1 05       	cpc	r27, r1
    2556:	d9 f6       	brne	.-74     	; 0x250e <tostring+0x5c>
    {
        len++;
        n /= 10;
    }
    for (i = 0; i < len; i++)
    2558:	1d 86       	std	Y+13, r1	; 0x0d
    255a:	1e 86       	std	Y+14, r1	; 0x0e
    255c:	1f 86       	std	Y+15, r1	; 0x0f
    255e:	18 8a       	std	Y+16, r1	; 0x10
    2560:	40 c0       	rjmp	.+128    	; 0x25e2 <tostring+0x130>
    {
        rem = num % 10;
    2562:	8b 89       	ldd	r24, Y+19	; 0x13
    2564:	9c 89       	ldd	r25, Y+20	; 0x14
    2566:	ad 89       	ldd	r26, Y+21	; 0x15
    2568:	be 89       	ldd	r27, Y+22	; 0x16
    256a:	2a e0       	ldi	r18, 0x0A	; 10
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	40 e0       	ldi	r20, 0x00	; 0
    2570:	50 e0       	ldi	r21, 0x00	; 0
    2572:	bc 01       	movw	r22, r24
    2574:	cd 01       	movw	r24, r26
    2576:	0e 94 38 16 	call	0x2c70	; 0x2c70 <__udivmodsi4>
    257a:	dc 01       	movw	r26, r24
    257c:	cb 01       	movw	r24, r22
    257e:	89 87       	std	Y+9, r24	; 0x09
    2580:	9a 87       	std	Y+10, r25	; 0x0a
    2582:	ab 87       	std	Y+11, r26	; 0x0b
    2584:	bc 87       	std	Y+12, r27	; 0x0c
        num = num / 10;
    2586:	8b 89       	ldd	r24, Y+19	; 0x13
    2588:	9c 89       	ldd	r25, Y+20	; 0x14
    258a:	ad 89       	ldd	r26, Y+21	; 0x15
    258c:	be 89       	ldd	r27, Y+22	; 0x16
    258e:	2a e0       	ldi	r18, 0x0A	; 10
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	40 e0       	ldi	r20, 0x00	; 0
    2594:	50 e0       	ldi	r21, 0x00	; 0
    2596:	bc 01       	movw	r22, r24
    2598:	cd 01       	movw	r24, r26
    259a:	0e 94 38 16 	call	0x2c70	; 0x2c70 <__udivmodsi4>
    259e:	da 01       	movw	r26, r20
    25a0:	c9 01       	movw	r24, r18
    25a2:	8b 8b       	std	Y+19, r24	; 0x13
    25a4:	9c 8b       	std	Y+20, r25	; 0x14
    25a6:	ad 8b       	std	Y+21, r26	; 0x15
    25a8:	be 8b       	std	Y+22, r27	; 0x16
        str[len - (i + 1)] = rem + '0';
    25aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    25ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ae:	9c 01       	movw	r18, r24
    25b0:	20 95       	com	r18
    25b2:	30 95       	com	r19
    25b4:	8d 81       	ldd	r24, Y+5	; 0x05
    25b6:	9e 81       	ldd	r25, Y+6	; 0x06
    25b8:	28 0f       	add	r18, r24
    25ba:	39 1f       	adc	r19, r25
    25bc:	89 89       	ldd	r24, Y+17	; 0x11
    25be:	9a 89       	ldd	r25, Y+18	; 0x12
    25c0:	fc 01       	movw	r30, r24
    25c2:	e2 0f       	add	r30, r18
    25c4:	f3 1f       	adc	r31, r19
    25c6:	89 85       	ldd	r24, Y+9	; 0x09
    25c8:	80 5d       	subi	r24, 0xD0	; 208
    25ca:	80 83       	st	Z, r24
    while (n != 0)
    {
        len++;
        n /= 10;
    }
    for (i = 0; i < len; i++)
    25cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    25ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    25d0:	af 85       	ldd	r26, Y+15	; 0x0f
    25d2:	b8 89       	ldd	r27, Y+16	; 0x10
    25d4:	01 96       	adiw	r24, 0x01	; 1
    25d6:	a1 1d       	adc	r26, r1
    25d8:	b1 1d       	adc	r27, r1
    25da:	8d 87       	std	Y+13, r24	; 0x0d
    25dc:	9e 87       	std	Y+14, r25	; 0x0e
    25de:	af 87       	std	Y+15, r26	; 0x0f
    25e0:	b8 8b       	std	Y+16, r27	; 0x10
    25e2:	2d 85       	ldd	r18, Y+13	; 0x0d
    25e4:	3e 85       	ldd	r19, Y+14	; 0x0e
    25e6:	4f 85       	ldd	r20, Y+15	; 0x0f
    25e8:	58 89       	ldd	r21, Y+16	; 0x10
    25ea:	8d 81       	ldd	r24, Y+5	; 0x05
    25ec:	9e 81       	ldd	r25, Y+6	; 0x06
    25ee:	af 81       	ldd	r26, Y+7	; 0x07
    25f0:	b8 85       	ldd	r27, Y+8	; 0x08
    25f2:	28 17       	cp	r18, r24
    25f4:	39 07       	cpc	r19, r25
    25f6:	4a 07       	cpc	r20, r26
    25f8:	5b 07       	cpc	r21, r27
    25fa:	08 f4       	brcc	.+2      	; 0x25fe <tostring+0x14c>
    25fc:	b2 cf       	rjmp	.-156    	; 0x2562 <tostring+0xb0>
    {
        rem = num % 10;
        num = num / 10;
        str[len - (i + 1)] = rem + '0';
    }
    str[len] = '\0';
    25fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2600:	9e 81       	ldd	r25, Y+6	; 0x06
    2602:	29 89       	ldd	r18, Y+17	; 0x11
    2604:	3a 89       	ldd	r19, Y+18	; 0x12
    2606:	f9 01       	movw	r30, r18
    2608:	e8 0f       	add	r30, r24
    260a:	f9 1f       	adc	r31, r25
    260c:	10 82       	st	Z, r1
}
    260e:	66 96       	adiw	r28, 0x16	; 22
    2610:	0f b6       	in	r0, 0x3f	; 63
    2612:	f8 94       	cli
    2614:	de bf       	out	0x3e, r29	; 62
    2616:	0f be       	out	0x3f, r0	; 63
    2618:	cd bf       	out	0x3d, r28	; 61
    261a:	cf 91       	pop	r28
    261c:	df 91       	pop	r29
    261e:	08 95       	ret

00002620 <LCD_Num>:

void LCD_Num(int num)
{
    2620:	df 93       	push	r29
    2622:	cf 93       	push	r28
    2624:	cd b7       	in	r28, 0x3d	; 61
    2626:	de b7       	in	r29, 0x3e	; 62
    2628:	62 97       	sbiw	r28, 0x12	; 18
    262a:	0f b6       	in	r0, 0x3f	; 63
    262c:	f8 94       	cli
    262e:	de bf       	out	0x3e, r29	; 62
    2630:	0f be       	out	0x3f, r0	; 63
    2632:	cd bf       	out	0x3d, r28	; 61
    2634:	9a 8b       	std	Y+18, r25	; 0x12
    2636:	89 8b       	std	Y+17, r24	; 0x11
	u8 arr[16]={0};
    2638:	80 e1       	ldi	r24, 0x10	; 16
    263a:	fe 01       	movw	r30, r28
    263c:	31 96       	adiw	r30, 0x01	; 1
    263e:	df 01       	movw	r26, r30
    2640:	98 2f       	mov	r25, r24
    2642:	1d 92       	st	X+, r1
    2644:	9a 95       	dec	r25
    2646:	e9 f7       	brne	.-6      	; 0x2642 <LCD_Num+0x22>
	tostring(arr,num);
    2648:	89 89       	ldd	r24, Y+17	; 0x11
    264a:	9a 89       	ldd	r25, Y+18	; 0x12
    264c:	9c 01       	movw	r18, r24
    264e:	44 27       	eor	r20, r20
    2650:	37 fd       	sbrc	r19, 7
    2652:	40 95       	com	r20
    2654:	54 2f       	mov	r21, r20
    2656:	ce 01       	movw	r24, r28
    2658:	01 96       	adiw	r24, 0x01	; 1
    265a:	ba 01       	movw	r22, r20
    265c:	a9 01       	movw	r20, r18
    265e:	0e 94 59 12 	call	0x24b2	; 0x24b2 <tostring>
	LCD_vidWriteString(arr);
    2662:	ce 01       	movw	r24, r28
    2664:	01 96       	adiw	r24, 0x01	; 1
    2666:	0e 94 2f 11 	call	0x225e	; 0x225e <LCD_vidWriteString>

//   int buff[16]; /* String to hold the ascii result */
//   itoa(buff ,num,10); /* 10 for decimal */
//   LCD_vidWriteString(buff);

}
    266a:	62 96       	adiw	r28, 0x12	; 18
    266c:	0f b6       	in	r0, 0x3f	; 63
    266e:	f8 94       	cli
    2670:	de bf       	out	0x3e, r29	; 62
    2672:	0f be       	out	0x3f, r0	; 63
    2674:	cd bf       	out	0x3d, r28	; 61
    2676:	cf 91       	pop	r28
    2678:	df 91       	pop	r29
    267a:	08 95       	ret

0000267c <main>:
/* switch weight ---> pin1(portD) */
/* heater ---> pin3(portB), buzzer ---> pin7(portD) */			/* timer */
/* motor ---> pin5,6 (portB), led---> pin7(portB) */

int main(void)
{
    267c:	df 93       	push	r29
    267e:	cf 93       	push	r28
    2680:	cd b7       	in	r28, 0x3d	; 61
    2682:	de b7       	in	r29, 0x3e	; 62
	/* init for function */
	Init_Funs();
    2684:	0e 94 00 14 	call	0x2800	; 0x2800 <Init_Funs>
	while(1)
	{
		Microwave_Reg();
    2688:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <Microwave_Reg>
    268c:	fd cf       	rjmp	.-6      	; 0x2688 <main+0xc>

0000268e <DC_Motor_Init>:
#include "DIO_interface.h"

#include "motor.h"

void DC_Motor_Init(void)
{
    268e:	df 93       	push	r29
    2690:	cf 93       	push	r28
    2692:	cd b7       	in	r28, 0x3d	; 61
    2694:	de b7       	in	r29, 0x3e	; 62
	DIO_enumSetPinDirection(DC_MOTOR_PORT, DC_MOTOR_PIN1 , DIO_U8_OUTPUT);
    2696:	81 e0       	ldi	r24, 0x01	; 1
    2698:	65 e0       	ldi	r22, 0x05	; 5
    269a:	41 e0       	ldi	r20, 0x01	; 1
    269c:	0e 94 8c 06 	call	0xd18	; 0xd18 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection(DC_MOTOR_PORT, DC_MOTOR_PIN2 , DIO_U8_OUTPUT);
    26a0:	81 e0       	ldi	r24, 0x01	; 1
    26a2:	66 e0       	ldi	r22, 0x06	; 6
    26a4:	41 e0       	ldi	r20, 0x01	; 1
    26a6:	0e 94 8c 06 	call	0xd18	; 0xd18 <DIO_enumSetPinDirection>

	DIO_enumSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN1 , DIO_U8_LOW);
    26aa:	81 e0       	ldi	r24, 0x01	; 1
    26ac:	65 e0       	ldi	r22, 0x05	; 5
    26ae:	40 e0       	ldi	r20, 0x00	; 0
    26b0:	0e 94 70 07 	call	0xee0	; 0xee0 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN2 , DIO_U8_LOW);
    26b4:	81 e0       	ldi	r24, 0x01	; 1
    26b6:	66 e0       	ldi	r22, 0x06	; 6
    26b8:	40 e0       	ldi	r20, 0x00	; 0
    26ba:	0e 94 70 07 	call	0xee0	; 0xee0 <DIO_enumSetPinValue>

}
    26be:	cf 91       	pop	r28
    26c0:	df 91       	pop	r29
    26c2:	08 95       	ret

000026c4 <DC_Motor_ForwardDir>:

void DC_Motor_ForwardDir(void)
{
    26c4:	df 93       	push	r29
    26c6:	cf 93       	push	r28
    26c8:	cd b7       	in	r28, 0x3d	; 61
    26ca:	de b7       	in	r29, 0x3e	; 62
	DIO_enumSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN1 , DIO_U8_HIGH);
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	65 e0       	ldi	r22, 0x05	; 5
    26d0:	41 e0       	ldi	r20, 0x01	; 1
    26d2:	0e 94 70 07 	call	0xee0	; 0xee0 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN2 , DIO_U8_LOW);
    26d6:	81 e0       	ldi	r24, 0x01	; 1
    26d8:	66 e0       	ldi	r22, 0x06	; 6
    26da:	40 e0       	ldi	r20, 0x00	; 0
    26dc:	0e 94 70 07 	call	0xee0	; 0xee0 <DIO_enumSetPinValue>
}
    26e0:	cf 91       	pop	r28
    26e2:	df 91       	pop	r29
    26e4:	08 95       	ret

000026e6 <DC_Motor_BackwardDir>:
void DC_Motor_BackwardDir(void)
{
    26e6:	df 93       	push	r29
    26e8:	cf 93       	push	r28
    26ea:	cd b7       	in	r28, 0x3d	; 61
    26ec:	de b7       	in	r29, 0x3e	; 62
	DIO_enumSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN1 , DIO_U8_LOW);
    26ee:	81 e0       	ldi	r24, 0x01	; 1
    26f0:	65 e0       	ldi	r22, 0x05	; 5
    26f2:	40 e0       	ldi	r20, 0x00	; 0
    26f4:	0e 94 70 07 	call	0xee0	; 0xee0 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN2 , DIO_U8_HIGH);
    26f8:	81 e0       	ldi	r24, 0x01	; 1
    26fa:	66 e0       	ldi	r22, 0x06	; 6
    26fc:	41 e0       	ldi	r20, 0x01	; 1
    26fe:	0e 94 70 07 	call	0xee0	; 0xee0 <DIO_enumSetPinValue>
}
    2702:	cf 91       	pop	r28
    2704:	df 91       	pop	r29
    2706:	08 95       	ret

00002708 <DC_Motor_Stop>:
void DC_Motor_Stop(void)
{
    2708:	df 93       	push	r29
    270a:	cf 93       	push	r28
    270c:	cd b7       	in	r28, 0x3d	; 61
    270e:	de b7       	in	r29, 0x3e	; 62
	DIO_enumSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN1 , DIO_U8_LOW);
    2710:	81 e0       	ldi	r24, 0x01	; 1
    2712:	65 e0       	ldi	r22, 0x05	; 5
    2714:	40 e0       	ldi	r20, 0x00	; 0
    2716:	0e 94 70 07 	call	0xee0	; 0xee0 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN2 , DIO_U8_LOW);
    271a:	81 e0       	ldi	r24, 0x01	; 1
    271c:	66 e0       	ldi	r22, 0x06	; 6
    271e:	40 e0       	ldi	r20, 0x00	; 0
    2720:	0e 94 70 07 	call	0xee0	; 0xee0 <DIO_enumSetPinValue>
}
    2724:	cf 91       	pop	r28
    2726:	df 91       	pop	r29
    2728:	08 95       	ret

0000272a <Microwave_Option>:
void EXTI0_DoorISR(void);
void EXTI1_StopISR(void);
extern u8 Stop_Flag ;

void Microwave_Option(void)
{
    272a:	df 93       	push	r29
    272c:	cf 93       	push	r28
    272e:	cd b7       	in	r28, 0x3d	; 61
    2730:	de b7       	in	r29, 0x3e	; 62
	lcd_gotox_y(0,1);
    2732:	80 e0       	ldi	r24, 0x00	; 0
    2734:	61 e0       	ldi	r22, 0x01	; 1
    2736:	0e 94 c1 11 	call	0x2382	; 0x2382 <lcd_gotox_y>
	LCD_vidWriteString("1-TIME");
    273a:	8e e9       	ldi	r24, 0x9E	; 158
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	0e 94 2f 11 	call	0x225e	; 0x225e <LCD_vidWriteString>
	lcd_gotox_y(1,1);
    2742:	81 e0       	ldi	r24, 0x01	; 1
    2744:	61 e0       	ldi	r22, 0x01	; 1
    2746:	0e 94 c1 11 	call	0x2382	; 0x2382 <lcd_gotox_y>
	LCD_vidWriteString("*CLEAR");
    274a:	85 ea       	ldi	r24, 0xA5	; 165
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	0e 94 2f 11 	call	0x225e	; 0x225e <LCD_vidWriteString>
	lcd_gotox_y(1,8);
    2752:	81 e0       	ldi	r24, 0x01	; 1
    2754:	68 e0       	ldi	r22, 0x08	; 8
    2756:	0e 94 c1 11 	call	0x2382	; 0x2382 <lcd_gotox_y>
	LCD_vidWriteString("=OK");
    275a:	8c ea       	ldi	r24, 0xAC	; 172
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	0e 94 2f 11 	call	0x225e	; 0x225e <LCD_vidWriteString>

}
    2762:	cf 91       	pop	r28
    2764:	df 91       	pop	r29
    2766:	08 95       	ret

00002768 <Microwave_ON>:

/******************************** on mode ****************************************************/
void Microwave_ON(void)
{
    2768:	df 93       	push	r29
    276a:	cf 93       	push	r28
    276c:	0f 92       	push	r0
    276e:	cd b7       	in	r28, 0x3d	; 61
    2770:	de b7       	in	r29, 0x3e	; 62
	u8 Time_Finish = 0;
    2772:	19 82       	std	Y+1, r1	; 0x01
    2774:	1a c0       	rjmp	.+52     	; 0x27aa <Microwave_ON+0x42>
	while(Stop_Flag == 0)
	{
		//Heater_ON
		Heater_ON();
    2776:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <Heater_ON>
		LCD_enuSendCMD(LCD_CLEAR_SCREEN);
    277a:	81 e0       	ldi	r24, 0x01	; 1
    277c:	0e 94 d5 10 	call	0x21aa	; 0x21aa <LCD_enuSendCMD>
		LCD_vidWriteString("Waiting");
    2780:	80 eb       	ldi	r24, 0xB0	; 176
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	0e 94 2f 11 	call	0x225e	; 0x225e <LCD_vidWriteString>
		/* the motor is on, led on */
		DC_Motor_ForwardDir();
    2788:	0e 94 62 13 	call	0x26c4	; 0x26c4 <DC_Motor_ForwardDir>
		DIO_enumSetPinValue(DIO_U8_PORT_B, DIO_U8_PIN7, DIO_U8_HIGH);
    278c:	81 e0       	ldi	r24, 0x01	; 1
    278e:	67 e0       	ldi	r22, 0x07	; 7
    2790:	41 e0       	ldi	r20, 0x01	; 1
    2792:	0e 94 70 07 	call	0xee0	; 0xee0 <DIO_enumSetPinValue>
		/* show the time on LCD and counting down */
		Microwave_CountingDown();
    2796:	0e 94 1d 0c 	call	0x183a	; 0x183a <Microwave_CountingDown>

		Time_Finish = Microwave_CheckTimeFinish();
    279a:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <Microwave_CheckTimeFinish>
    279e:	89 83       	std	Y+1, r24	; 0x01
		if(Time_Finish == 1)
    27a0:	89 81       	ldd	r24, Y+1	; 0x01
    27a2:	81 30       	cpi	r24, 0x01	; 1
    27a4:	11 f4       	brne	.+4      	; 0x27aa <Microwave_ON+0x42>
		{
			Microwave_OFF();
    27a6:	0e 94 dd 13 	call	0x27ba	; 0x27ba <Microwave_OFF>

/******************************** on mode ****************************************************/
void Microwave_ON(void)
{
	u8 Time_Finish = 0;
	while(Stop_Flag == 0)
    27aa:	80 91 17 01 	lds	r24, 0x0117
    27ae:	88 23       	and	r24, r24
    27b0:	11 f3       	breq	.-60     	; 0x2776 <Microwave_ON+0xe>
		{
			Microwave_OFF();
		}

	}
}
    27b2:	0f 90       	pop	r0
    27b4:	cf 91       	pop	r28
    27b6:	df 91       	pop	r29
    27b8:	08 95       	ret

000027ba <Microwave_OFF>:
/*********************************************** off mode ********************************************/
void Microwave_OFF(void)
{
    27ba:	df 93       	push	r29
    27bc:	cf 93       	push	r28
    27be:	cd b7       	in	r28, 0x3d	; 61
    27c0:	de b7       	in	r29, 0x3e	; 62
	/* Motor off, led off */
	DC_Motor_Stop();
    27c2:	0e 94 84 13 	call	0x2708	; 0x2708 <DC_Motor_Stop>
	DIO_enumSetPinValue(DIO_U8_PORT_B, DIO_U8_PIN7, DIO_U8_LOW);
    27c6:	81 e0       	ldi	r24, 0x01	; 1
    27c8:	67 e0       	ldi	r22, 0x07	; 7
    27ca:	40 e0       	ldi	r20, 0x00	; 0
    27cc:	0e 94 70 07 	call	0xee0	; 0xee0 <DIO_enumSetPinValue>
	//heater off, buzzer on
	Heater_OFF();
    27d0:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <Heater_OFF>
	Buzzer_ON();
    27d4:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <Buzzer_ON>
	LCD_enuSendCMD(LCD_CLEAR_SCREEN);
    27d8:	81 e0       	ldi	r24, 0x01	; 1
    27da:	0e 94 d5 10 	call	0x21aa	; 0x21aa <LCD_enuSendCMD>
	//	Microwave_Stop();
	Microwave_ResetTime();
    27de:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <Microwave_ResetTime>
	LCD_vidWriteString("Food is Ready");
    27e2:	88 eb       	ldi	r24, 0xB8	; 184
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	0e 94 2f 11 	call	0x225e	; 0x225e <LCD_vidWriteString>
	Delay_ms(1000);
    27ea:	68 ee       	ldi	r22, 0xE8	; 232
    27ec:	73 e0       	ldi	r23, 0x03	; 3
    27ee:	80 e0       	ldi	r24, 0x00	; 0
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	0e 94 a3 05 	call	0xb46	; 0xb46 <Delay_ms>
	Buzzerr_OFF();
    27f6:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <Buzzerr_OFF>
}
    27fa:	cf 91       	pop	r28
    27fc:	df 91       	pop	r29
    27fe:	08 95       	ret

00002800 <Init_Funs>:

/********************************************** Initializing func. ***********************************************/
void Init_Funs(void)
{
    2800:	df 93       	push	r29
    2802:	cf 93       	push	r28
    2804:	cd b7       	in	r28, 0x3d	; 61
    2806:	de b7       	in	r29, 0x3e	; 62
    2808:	6c 97       	sbiw	r28, 0x1c	; 28
    280a:	0f b6       	in	r0, 0x3f	; 63
    280c:	f8 94       	cli
    280e:	de bf       	out	0x3e, r29	; 62
    2810:	0f be       	out	0x3f, r0	; 63
    2812:	cd bf       	out	0x3d, r28	; 61
	/*Pins config*/
	DIO_enumSetPinDirection(DIO_U8_PORT_D, DIO_U8_PIN1, DIO_U8_INPUT);	//switch for Weight
    2814:	83 e0       	ldi	r24, 0x03	; 3
    2816:	61 e0       	ldi	r22, 0x01	; 1
    2818:	40 e0       	ldi	r20, 0x00	; 0
    281a:	0e 94 8c 06 	call	0xd18	; 0xd18 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection(DIO_U8_PORT_B, DIO_U8_PIN7, DIO_U8_OUTPUT);	//pin for LED
    281e:	81 e0       	ldi	r24, 0x01	; 1
    2820:	67 e0       	ldi	r22, 0x07	; 7
    2822:	41 e0       	ldi	r20, 0x01	; 1
    2824:	0e 94 8c 06 	call	0xd18	; 0xd18 <DIO_enumSetPinDirection>
	/* switchs for interrupt*/
	DIO_enumSetPinDirection(DIO_U8_PORT_D, DIO_U8_PIN2, DIO_U8_INPUT);	//switch for Door
    2828:	83 e0       	ldi	r24, 0x03	; 3
    282a:	62 e0       	ldi	r22, 0x02	; 2
    282c:	40 e0       	ldi	r20, 0x00	; 0
    282e:	0e 94 8c 06 	call	0xd18	; 0xd18 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection(DIO_U8_PORT_D, DIO_U8_PIN3, DIO_U8_INPUT);	//switch for Stop
    2832:	83 e0       	ldi	r24, 0x03	; 3
    2834:	63 e0       	ldi	r22, 0x03	; 3
    2836:	40 e0       	ldi	r20, 0x00	; 0
    2838:	0e 94 8c 06 	call	0xd18	; 0xd18 <DIO_enumSetPinDirection>

	/* LCD pins config*/
	DIO_enumSetPinDirection(DIO_U8_PORT_B,DIO_U8_PIN0,DIO_U8_OUTPUT);
    283c:	81 e0       	ldi	r24, 0x01	; 1
    283e:	60 e0       	ldi	r22, 0x00	; 0
    2840:	41 e0       	ldi	r20, 0x01	; 1
    2842:	0e 94 8c 06 	call	0xd18	; 0xd18 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection(DIO_U8_PORT_B,DIO_U8_PIN1,DIO_U8_OUTPUT);
    2846:	81 e0       	ldi	r24, 0x01	; 1
    2848:	61 e0       	ldi	r22, 0x01	; 1
    284a:	41 e0       	ldi	r20, 0x01	; 1
    284c:	0e 94 8c 06 	call	0xd18	; 0xd18 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection(DIO_U8_PORT_B,DIO_U8_PIN4,DIO_U8_OUTPUT);
    2850:	81 e0       	ldi	r24, 0x01	; 1
    2852:	64 e0       	ldi	r22, 0x04	; 4
    2854:	41 e0       	ldi	r20, 0x01	; 1
    2856:	0e 94 8c 06 	call	0xd18	; 0xd18 <DIO_enumSetPinDirection>
	DIO_enumSetPortDirection(DIO_U8_PORT_A,0xff);
    285a:	80 e0       	ldi	r24, 0x00	; 0
    285c:	6f ef       	ldi	r22, 0xFF	; 255
    285e:	0e 94 3f 06 	call	0xc7e	; 0xc7e <DIO_enumSetPortDirection>

	DIO_enumSetPinDirection(DIO_U8_PORT_B,DIO_U8_PIN3 , DIO_U8_OUTPUT); //OC0
    2862:	81 e0       	ldi	r24, 0x01	; 1
    2864:	63 e0       	ldi	r22, 0x03	; 3
    2866:	41 e0       	ldi	r20, 0x01	; 1
    2868:	0e 94 8c 06 	call	0xd18	; 0xd18 <DIO_enumSetPinDirection>

	/**********************Timer_2 Init**********************/
	DIO_enumSetPinDirection(DIO_U8_PORT_D,DIO_U8_PIN7 , DIO_U8_OUTPUT); //OC2
    286c:	83 e0       	ldi	r24, 0x03	; 3
    286e:	67 e0       	ldi	r22, 0x07	; 7
    2870:	41 e0       	ldi	r20, 0x01	; 1
    2872:	0e 94 8c 06 	call	0xd18	; 0xd18 <DIO_enumSetPinDirection>

	/* function init*/
	EXTI0_enumInit();		// for Door switch
    2876:	0e 94 08 09 	call	0x1210	; 0x1210 <EXTI0_enumInit>
	EXTI1_enumInit();		// for Stop switch
    287a:	0e 94 8e 09 	call	0x131c	; 0x131c <EXTI1_enumInit>

	LCD_enuInit();
    287e:	0e 94 92 10 	call	0x2124	; 0x2124 <LCD_enuInit>
	keypad_init(DIO_U8_PORT_C);
    2882:	82 e0       	ldi	r24, 0x02	; 2
    2884:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <keypad_init>
	DC_Motor_Init();
    2888:	0e 94 47 13 	call	0x268e	; 0x268e <DC_Motor_Init>

	LCD_enuSendCMD(0x01);
    288c:	81 e0       	ldi	r24, 0x01	; 1
    288e:	0e 94 d5 10 	call	0x21aa	; 0x21aa <LCD_enuSendCMD>
	lcd_gotox_y(0,1);
    2892:	80 e0       	ldi	r24, 0x00	; 0
    2894:	61 e0       	ldi	r22, 0x01	; 1
    2896:	0e 94 c1 11 	call	0x2382	; 0x2382 <lcd_gotox_y>
	LCD_vidWriteString("WELCOME");
    289a:	86 ec       	ldi	r24, 0xC6	; 198
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	0e 94 2f 11 	call	0x225e	; 0x225e <LCD_vidWriteString>
    28a2:	80 e0       	ldi	r24, 0x00	; 0
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	a8 ec       	ldi	r26, 0xC8	; 200
    28a8:	b2 e4       	ldi	r27, 0x42	; 66
    28aa:	89 8f       	std	Y+25, r24	; 0x19
    28ac:	9a 8f       	std	Y+26, r25	; 0x1a
    28ae:	ab 8f       	std	Y+27, r26	; 0x1b
    28b0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28b2:	69 8d       	ldd	r22, Y+25	; 0x19
    28b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28ba:	20 e0       	ldi	r18, 0x00	; 0
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	4a ef       	ldi	r20, 0xFA	; 250
    28c0:	54 e4       	ldi	r21, 0x44	; 68
    28c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c6:	dc 01       	movw	r26, r24
    28c8:	cb 01       	movw	r24, r22
    28ca:	8d 8b       	std	Y+21, r24	; 0x15
    28cc:	9e 8b       	std	Y+22, r25	; 0x16
    28ce:	af 8b       	std	Y+23, r26	; 0x17
    28d0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28d2:	6d 89       	ldd	r22, Y+21	; 0x15
    28d4:	7e 89       	ldd	r23, Y+22	; 0x16
    28d6:	8f 89       	ldd	r24, Y+23	; 0x17
    28d8:	98 8d       	ldd	r25, Y+24	; 0x18
    28da:	20 e0       	ldi	r18, 0x00	; 0
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	40 e8       	ldi	r20, 0x80	; 128
    28e0:	5f e3       	ldi	r21, 0x3F	; 63
    28e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28e6:	88 23       	and	r24, r24
    28e8:	2c f4       	brge	.+10     	; 0x28f4 <Init_Funs+0xf4>
		__ticks = 1;
    28ea:	81 e0       	ldi	r24, 0x01	; 1
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	9c 8b       	std	Y+20, r25	; 0x14
    28f0:	8b 8b       	std	Y+19, r24	; 0x13
    28f2:	3f c0       	rjmp	.+126    	; 0x2972 <Init_Funs+0x172>
	else if (__tmp > 65535)
    28f4:	6d 89       	ldd	r22, Y+21	; 0x15
    28f6:	7e 89       	ldd	r23, Y+22	; 0x16
    28f8:	8f 89       	ldd	r24, Y+23	; 0x17
    28fa:	98 8d       	ldd	r25, Y+24	; 0x18
    28fc:	20 e0       	ldi	r18, 0x00	; 0
    28fe:	3f ef       	ldi	r19, 0xFF	; 255
    2900:	4f e7       	ldi	r20, 0x7F	; 127
    2902:	57 e4       	ldi	r21, 0x47	; 71
    2904:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2908:	18 16       	cp	r1, r24
    290a:	4c f5       	brge	.+82     	; 0x295e <Init_Funs+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    290c:	69 8d       	ldd	r22, Y+25	; 0x19
    290e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2910:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2912:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2914:	20 e0       	ldi	r18, 0x00	; 0
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	40 e2       	ldi	r20, 0x20	; 32
    291a:	51 e4       	ldi	r21, 0x41	; 65
    291c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2920:	dc 01       	movw	r26, r24
    2922:	cb 01       	movw	r24, r22
    2924:	bc 01       	movw	r22, r24
    2926:	cd 01       	movw	r24, r26
    2928:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    292c:	dc 01       	movw	r26, r24
    292e:	cb 01       	movw	r24, r22
    2930:	9c 8b       	std	Y+20, r25	; 0x14
    2932:	8b 8b       	std	Y+19, r24	; 0x13
    2934:	0f c0       	rjmp	.+30     	; 0x2954 <Init_Funs+0x154>
    2936:	88 ec       	ldi	r24, 0xC8	; 200
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	9a 8b       	std	Y+18, r25	; 0x12
    293c:	89 8b       	std	Y+17, r24	; 0x11
    293e:	89 89       	ldd	r24, Y+17	; 0x11
    2940:	9a 89       	ldd	r25, Y+18	; 0x12
    2942:	01 97       	sbiw	r24, 0x01	; 1
    2944:	f1 f7       	brne	.-4      	; 0x2942 <Init_Funs+0x142>
    2946:	9a 8b       	std	Y+18, r25	; 0x12
    2948:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    294a:	8b 89       	ldd	r24, Y+19	; 0x13
    294c:	9c 89       	ldd	r25, Y+20	; 0x14
    294e:	01 97       	sbiw	r24, 0x01	; 1
    2950:	9c 8b       	std	Y+20, r25	; 0x14
    2952:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2954:	8b 89       	ldd	r24, Y+19	; 0x13
    2956:	9c 89       	ldd	r25, Y+20	; 0x14
    2958:	00 97       	sbiw	r24, 0x00	; 0
    295a:	69 f7       	brne	.-38     	; 0x2936 <Init_Funs+0x136>
    295c:	14 c0       	rjmp	.+40     	; 0x2986 <Init_Funs+0x186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    295e:	6d 89       	ldd	r22, Y+21	; 0x15
    2960:	7e 89       	ldd	r23, Y+22	; 0x16
    2962:	8f 89       	ldd	r24, Y+23	; 0x17
    2964:	98 8d       	ldd	r25, Y+24	; 0x18
    2966:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    296a:	dc 01       	movw	r26, r24
    296c:	cb 01       	movw	r24, r22
    296e:	9c 8b       	std	Y+20, r25	; 0x14
    2970:	8b 8b       	std	Y+19, r24	; 0x13
    2972:	8b 89       	ldd	r24, Y+19	; 0x13
    2974:	9c 89       	ldd	r25, Y+20	; 0x14
    2976:	98 8b       	std	Y+16, r25	; 0x10
    2978:	8f 87       	std	Y+15, r24	; 0x0f
    297a:	8f 85       	ldd	r24, Y+15	; 0x0f
    297c:	98 89       	ldd	r25, Y+16	; 0x10
    297e:	01 97       	sbiw	r24, 0x01	; 1
    2980:	f1 f7       	brne	.-4      	; 0x297e <Init_Funs+0x17e>
    2982:	98 8b       	std	Y+16, r25	; 0x10
    2984:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	LCD_enuSendCMD(0x01);
    2986:	81 e0       	ldi	r24, 0x01	; 1
    2988:	0e 94 d5 10 	call	0x21aa	; 0x21aa <LCD_enuSendCMD>
	lcd_gotox_y(0,1);
    298c:	80 e0       	ldi	r24, 0x00	; 0
    298e:	61 e0       	ldi	r22, 0x01	; 1
    2990:	0e 94 c1 11 	call	0x2382	; 0x2382 <lcd_gotox_y>
	LCD_vidWriteString("Choose Option");
    2994:	8e ec       	ldi	r24, 0xCE	; 206
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	0e 94 2f 11 	call	0x225e	; 0x225e <LCD_vidWriteString>
    299c:	80 e0       	ldi	r24, 0x00	; 0
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	a8 ec       	ldi	r26, 0xC8	; 200
    29a2:	b2 e4       	ldi	r27, 0x42	; 66
    29a4:	8b 87       	std	Y+11, r24	; 0x0b
    29a6:	9c 87       	std	Y+12, r25	; 0x0c
    29a8:	ad 87       	std	Y+13, r26	; 0x0d
    29aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    29ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    29b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    29b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    29b4:	20 e0       	ldi	r18, 0x00	; 0
    29b6:	30 e0       	ldi	r19, 0x00	; 0
    29b8:	4a ef       	ldi	r20, 0xFA	; 250
    29ba:	54 e4       	ldi	r21, 0x44	; 68
    29bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c0:	dc 01       	movw	r26, r24
    29c2:	cb 01       	movw	r24, r22
    29c4:	8f 83       	std	Y+7, r24	; 0x07
    29c6:	98 87       	std	Y+8, r25	; 0x08
    29c8:	a9 87       	std	Y+9, r26	; 0x09
    29ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29cc:	6f 81       	ldd	r22, Y+7	; 0x07
    29ce:	78 85       	ldd	r23, Y+8	; 0x08
    29d0:	89 85       	ldd	r24, Y+9	; 0x09
    29d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d4:	20 e0       	ldi	r18, 0x00	; 0
    29d6:	30 e0       	ldi	r19, 0x00	; 0
    29d8:	40 e8       	ldi	r20, 0x80	; 128
    29da:	5f e3       	ldi	r21, 0x3F	; 63
    29dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29e0:	88 23       	and	r24, r24
    29e2:	2c f4       	brge	.+10     	; 0x29ee <Init_Funs+0x1ee>
		__ticks = 1;
    29e4:	81 e0       	ldi	r24, 0x01	; 1
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	9e 83       	std	Y+6, r25	; 0x06
    29ea:	8d 83       	std	Y+5, r24	; 0x05
    29ec:	3f c0       	rjmp	.+126    	; 0x2a6c <Init_Funs+0x26c>
	else if (__tmp > 65535)
    29ee:	6f 81       	ldd	r22, Y+7	; 0x07
    29f0:	78 85       	ldd	r23, Y+8	; 0x08
    29f2:	89 85       	ldd	r24, Y+9	; 0x09
    29f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f6:	20 e0       	ldi	r18, 0x00	; 0
    29f8:	3f ef       	ldi	r19, 0xFF	; 255
    29fa:	4f e7       	ldi	r20, 0x7F	; 127
    29fc:	57 e4       	ldi	r21, 0x47	; 71
    29fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a02:	18 16       	cp	r1, r24
    2a04:	4c f5       	brge	.+82     	; 0x2a58 <Init_Funs+0x258>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a06:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a08:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a0e:	20 e0       	ldi	r18, 0x00	; 0
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	40 e2       	ldi	r20, 0x20	; 32
    2a14:	51 e4       	ldi	r21, 0x41	; 65
    2a16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a1a:	dc 01       	movw	r26, r24
    2a1c:	cb 01       	movw	r24, r22
    2a1e:	bc 01       	movw	r22, r24
    2a20:	cd 01       	movw	r24, r26
    2a22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a26:	dc 01       	movw	r26, r24
    2a28:	cb 01       	movw	r24, r22
    2a2a:	9e 83       	std	Y+6, r25	; 0x06
    2a2c:	8d 83       	std	Y+5, r24	; 0x05
    2a2e:	0f c0       	rjmp	.+30     	; 0x2a4e <Init_Funs+0x24e>
    2a30:	88 ec       	ldi	r24, 0xC8	; 200
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	9c 83       	std	Y+4, r25	; 0x04
    2a36:	8b 83       	std	Y+3, r24	; 0x03
    2a38:	8b 81       	ldd	r24, Y+3	; 0x03
    2a3a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a3c:	01 97       	sbiw	r24, 0x01	; 1
    2a3e:	f1 f7       	brne	.-4      	; 0x2a3c <Init_Funs+0x23c>
    2a40:	9c 83       	std	Y+4, r25	; 0x04
    2a42:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a44:	8d 81       	ldd	r24, Y+5	; 0x05
    2a46:	9e 81       	ldd	r25, Y+6	; 0x06
    2a48:	01 97       	sbiw	r24, 0x01	; 1
    2a4a:	9e 83       	std	Y+6, r25	; 0x06
    2a4c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a4e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a50:	9e 81       	ldd	r25, Y+6	; 0x06
    2a52:	00 97       	sbiw	r24, 0x00	; 0
    2a54:	69 f7       	brne	.-38     	; 0x2a30 <Init_Funs+0x230>
    2a56:	14 c0       	rjmp	.+40     	; 0x2a80 <Init_Funs+0x280>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a58:	6f 81       	ldd	r22, Y+7	; 0x07
    2a5a:	78 85       	ldd	r23, Y+8	; 0x08
    2a5c:	89 85       	ldd	r24, Y+9	; 0x09
    2a5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a64:	dc 01       	movw	r26, r24
    2a66:	cb 01       	movw	r24, r22
    2a68:	9e 83       	std	Y+6, r25	; 0x06
    2a6a:	8d 83       	std	Y+5, r24	; 0x05
    2a6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a70:	9a 83       	std	Y+2, r25	; 0x02
    2a72:	89 83       	std	Y+1, r24	; 0x01
    2a74:	89 81       	ldd	r24, Y+1	; 0x01
    2a76:	9a 81       	ldd	r25, Y+2	; 0x02
    2a78:	01 97       	sbiw	r24, 0x01	; 1
    2a7a:	f1 f7       	brne	.-4      	; 0x2a78 <Init_Funs+0x278>
    2a7c:	9a 83       	std	Y+2, r25	; 0x02
    2a7e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
	LCD_enuSendCMD(0x01);
    2a80:	81 e0       	ldi	r24, 0x01	; 1
    2a82:	0e 94 d5 10 	call	0x21aa	; 0x21aa <LCD_enuSendCMD>
	Microwave_Option();
    2a86:	0e 94 95 13 	call	0x272a	; 0x272a <Microwave_Option>

}
    2a8a:	6c 96       	adiw	r28, 0x1c	; 28
    2a8c:	0f b6       	in	r0, 0x3f	; 63
    2a8e:	f8 94       	cli
    2a90:	de bf       	out	0x3e, r29	; 62
    2a92:	0f be       	out	0x3f, r0	; 63
    2a94:	cd bf       	out	0x3d, r28	; 61
    2a96:	cf 91       	pop	r28
    2a98:	df 91       	pop	r29
    2a9a:	08 95       	ret

00002a9c <Microwave_Reg>:

void Microwave_Reg(void)
{
    2a9c:	df 93       	push	r29
    2a9e:	cf 93       	push	r28
    2aa0:	00 d0       	rcall	.+0      	; 0x2aa2 <Microwave_Reg+0x6>
    2aa2:	0f 92       	push	r0
    2aa4:	cd b7       	in	r28, 0x3d	; 61
    2aa6:	de b7       	in	r29, 0x3e	; 62
    2aa8:	04 c0       	rjmp	.+8      	; 0x2ab2 <Microwave_Reg+0x16>
	u8 key1;
	while(!key1)
	{
		key1=Keypad_u8Keypress(DIO_U8_PORT_C);
    2aaa:	82 e0       	ldi	r24, 0x02	; 2
    2aac:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <Keypad_u8Keypress>
    2ab0:	89 83       	std	Y+1, r24	; 0x01
}

void Microwave_Reg(void)
{
	u8 key1;
	while(!key1)
    2ab2:	89 81       	ldd	r24, Y+1	; 0x01
    2ab4:	88 23       	and	r24, r24
    2ab6:	c9 f3       	breq	.-14     	; 0x2aaa <Microwave_Reg+0xe>
	{
		key1=Keypad_u8Keypress(DIO_U8_PORT_C);
	}
	switch (key1)
    2ab8:	89 81       	ldd	r24, Y+1	; 0x01
    2aba:	28 2f       	mov	r18, r24
    2abc:	30 e0       	ldi	r19, 0x00	; 0
    2abe:	3b 83       	std	Y+3, r19	; 0x03
    2ac0:	2a 83       	std	Y+2, r18	; 0x02
    2ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ac6:	81 33       	cpi	r24, 0x31	; 49
    2ac8:	91 05       	cpc	r25, r1
    2aca:	59 f0       	breq	.+22     	; 0x2ae2 <Microwave_Reg+0x46>
    2acc:	2a 81       	ldd	r18, Y+2	; 0x02
    2ace:	3b 81       	ldd	r19, Y+3	; 0x03
    2ad0:	2d 33       	cpi	r18, 0x3D	; 61
    2ad2:	31 05       	cpc	r19, r1
    2ad4:	d1 f0       	breq	.+52     	; 0x2b0a <Microwave_Reg+0x6e>
    2ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad8:	9b 81       	ldd	r25, Y+3	; 0x03
    2ada:	8a 32       	cpi	r24, 0x2A	; 42
    2adc:	91 05       	cpc	r25, r1
    2ade:	59 f0       	breq	.+22     	; 0x2af6 <Microwave_Reg+0x5a>
    2ae0:	16 c0       	rjmp	.+44     	; 0x2b0e <Microwave_Reg+0x72>
	{
	case'1':
	{
		Microwave_ResetTime();
    2ae2:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <Microwave_ResetTime>
		Microwave_RequestTime();
    2ae6:	0e 94 34 0b 	call	0x1668	; 0x1668 <Microwave_RequestTime>
		LCD_enuSendCMD(LCD_CLEAR_SCREEN);
    2aea:	81 e0       	ldi	r24, 0x01	; 1
    2aec:	0e 94 d5 10 	call	0x21aa	; 0x21aa <LCD_enuSendCMD>
		Microwave_Option();
    2af0:	0e 94 95 13 	call	0x272a	; 0x272a <Microwave_Option>
    2af4:	0c c0       	rjmp	.+24     	; 0x2b0e <Microwave_Reg+0x72>
		break;
	}
	case'*':
	{
		Microwave_ResetTime();
    2af6:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <Microwave_ResetTime>
		Microwave_RequestTime();
    2afa:	0e 94 34 0b 	call	0x1668	; 0x1668 <Microwave_RequestTime>
		LCD_enuSendCMD(LCD_CLEAR_SCREEN);
    2afe:	81 e0       	ldi	r24, 0x01	; 1
    2b00:	0e 94 d5 10 	call	0x21aa	; 0x21aa <LCD_enuSendCMD>
		Microwave_Option();
    2b04:	0e 94 95 13 	call	0x272a	; 0x272a <Microwave_Option>
    2b08:	02 c0       	rjmp	.+4      	; 0x2b0e <Microwave_Reg+0x72>
		break;
	}
	case '=':
	{
		Simple_Mirowave();
    2b0a:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <Simple_Mirowave>
		break;
	}
	}
}
    2b0e:	0f 90       	pop	r0
    2b10:	0f 90       	pop	r0
    2b12:	0f 90       	pop	r0
    2b14:	cf 91       	pop	r28
    2b16:	df 91       	pop	r29
    2b18:	08 95       	ret

00002b1a <Simple_Mirowave>:
/********************************************** Microwave Modes *************************************************/
void Simple_Mirowave(void)
{
    2b1a:	df 93       	push	r29
    2b1c:	cf 93       	push	r28
    2b1e:	00 d0       	rcall	.+0      	; 0x2b20 <Simple_Mirowave+0x6>
    2b20:	00 d0       	rcall	.+0      	; 0x2b22 <Simple_Mirowave+0x8>
    2b22:	cd b7       	in	r28, 0x3d	; 61
    2b24:	de b7       	in	r29, 0x3e	; 62
	u8 state_Door=0, state_weight=0, state_Stop=0;
    2b26:	1c 82       	std	Y+4, r1	; 0x04
    2b28:	1b 82       	std	Y+3, r1	; 0x03
    2b2a:	1a 82       	std	Y+2, r1	; 0x02
	u8 Time_Finish ;
	LCD_enuSendCMD(LCD_CLEAR_SCREEN);
    2b2c:	81 e0       	ldi	r24, 0x01	; 1
    2b2e:	0e 94 d5 10 	call	0x21aa	; 0x21aa <LCD_enuSendCMD>

	EXTI0_enumEnable();
    2b32:	0e 94 29 09 	call	0x1252	; 0x1252 <EXTI0_enumEnable>
	EXTI0_enumSetCallBack(EXTI0_DoorISR);
    2b36:	85 ed       	ldi	r24, 0xD5	; 213
    2b38:	95 e1       	ldi	r25, 0x15	; 21
    2b3a:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <EXTI0_enumSetCallBack>

	EXTI1_enumEnable();
    2b3e:	0e 94 b0 09 	call	0x1360	; 0x1360 <EXTI1_enumEnable>
	EXTI1_enumSetCallBack(EXTI1_StopISR);
    2b42:	81 ef       	ldi	r24, 0xF1	; 241
    2b44:	95 e1       	ldi	r25, 0x15	; 21
    2b46:	0e 94 d6 09 	call	0x13ac	; 0x13ac <EXTI1_enumSetCallBack>

	state_Door = DIO_enumGetPinValue(DIO_U8_PORT_D, DIO_U8_PIN2);
    2b4a:	83 e0       	ldi	r24, 0x03	; 3
    2b4c:	62 e0       	ldi	r22, 0x02	; 2
    2b4e:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enumGetPinValue>
    2b52:	8c 83       	std	Y+4, r24	; 0x04
	state_weight = DIO_enumGetPinValue(DIO_U8_PORT_D, DIO_U8_PIN1);
    2b54:	83 e0       	ldi	r24, 0x03	; 3
    2b56:	61 e0       	ldi	r22, 0x01	; 1
    2b58:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enumGetPinValue>
    2b5c:	8b 83       	std	Y+3, r24	; 0x03
	state_Stop	= DIO_enumGetPinValue(DIO_U8_PORT_D, DIO_U8_PIN3);
    2b5e:	83 e0       	ldi	r24, 0x03	; 3
    2b60:	63 e0       	ldi	r22, 0x03	; 3
    2b62:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enumGetPinValue>
    2b66:	8a 83       	std	Y+2, r24	; 0x02


	/******************************************** Microwave modes ****************************************************/
	Time_Finish = Microwave_CheckTimeFinish();
    2b68:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <Microwave_CheckTimeFinish>
    2b6c:	89 83       	std	Y+1, r24	; 0x01
	if( (state_Door == 0) && (state_weight == 0) && (Time_Finish == 0) )
    2b6e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b70:	88 23       	and	r24, r24
    2b72:	49 f4       	brne	.+18     	; 0x2b86 <Simple_Mirowave+0x6c>
    2b74:	8b 81       	ldd	r24, Y+3	; 0x03
    2b76:	88 23       	and	r24, r24
    2b78:	31 f4       	brne	.+12     	; 0x2b86 <Simple_Mirowave+0x6c>
    2b7a:	89 81       	ldd	r24, Y+1	; 0x01
    2b7c:	88 23       	and	r24, r24
    2b7e:	19 f4       	brne	.+6      	; 0x2b86 <Simple_Mirowave+0x6c>
	{
		Microwave_ON();
    2b80:	0e 94 b4 13 	call	0x2768	; 0x2768 <Microwave_ON>
    2b84:	0b c0       	rjmp	.+22     	; 0x2b9c <Simple_Mirowave+0x82>
	}

	else if((state_Door == 1) && (state_weight == 1) && (Time_Finish == 1))
    2b86:	8c 81       	ldd	r24, Y+4	; 0x04
    2b88:	81 30       	cpi	r24, 0x01	; 1
    2b8a:	41 f4       	brne	.+16     	; 0x2b9c <Simple_Mirowave+0x82>
    2b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b8e:	81 30       	cpi	r24, 0x01	; 1
    2b90:	29 f4       	brne	.+10     	; 0x2b9c <Simple_Mirowave+0x82>
    2b92:	89 81       	ldd	r24, Y+1	; 0x01
    2b94:	81 30       	cpi	r24, 0x01	; 1
    2b96:	11 f4       	brne	.+4      	; 0x2b9c <Simple_Mirowave+0x82>
	{
		Microwave_OFF();
    2b98:	0e 94 dd 13 	call	0x27ba	; 0x27ba <Microwave_OFF>
	}
	else
	{
		// nothing
	}
}
    2b9c:	0f 90       	pop	r0
    2b9e:	0f 90       	pop	r0
    2ba0:	0f 90       	pop	r0
    2ba2:	0f 90       	pop	r0
    2ba4:	cf 91       	pop	r28
    2ba6:	df 91       	pop	r29
    2ba8:	08 95       	ret

00002baa <EXTI0_DoorISR>:

/********************************************** ISR func. ****************************************/

void EXTI0_DoorISR(void)
{
    2baa:	df 93       	push	r29
    2bac:	cf 93       	push	r28
    2bae:	cd b7       	in	r28, 0x3d	; 61
    2bb0:	de b7       	in	r29, 0x3e	; 62
	// if the door open before the microwave finish, this will cause the interrupt
	// motor off, led off
	DC_Motor_Stop();
    2bb2:	0e 94 84 13 	call	0x2708	; 0x2708 <DC_Motor_Stop>
	DIO_enumSetPinValue(DIO_U8_PORT_B, DIO_U8_PIN7, DIO_U8_LOW);
    2bb6:	81 e0       	ldi	r24, 0x01	; 1
    2bb8:	67 e0       	ldi	r22, 0x07	; 7
    2bba:	40 e0       	ldi	r20, 0x00	; 0
    2bbc:	0e 94 70 07 	call	0xee0	; 0xee0 <DIO_enumSetPinValue>
	// LCD will display "door is opened"
	LCD_enuSendCMD(LCD_CLEAR_SCREEN);
    2bc0:	81 e0       	ldi	r24, 0x01	; 1
    2bc2:	0e 94 d5 10 	call	0x21aa	; 0x21aa <LCD_enuSendCMD>
	LCD_vidWriteString("Door is opened");
    2bc6:	8c ed       	ldi	r24, 0xDC	; 220
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	0e 94 2f 11 	call	0x225e	; 0x225e <LCD_vidWriteString>
	//buzzer on, heater off
	Buzzer_ON();
    2bce:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <Buzzer_ON>
	Heater_OFF();
    2bd2:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <Heater_OFF>

	Stop_Flag=1;
    2bd6:	81 e0       	ldi	r24, 0x01	; 1
    2bd8:	80 93 17 01 	sts	0x0117, r24
}
    2bdc:	cf 91       	pop	r28
    2bde:	df 91       	pop	r29
    2be0:	08 95       	ret

00002be2 <EXTI1_StopISR>:

void EXTI1_StopISR(void)
{
    2be2:	df 93       	push	r29
    2be4:	cf 93       	push	r28
    2be6:	cd b7       	in	r28, 0x3d	; 61
    2be8:	de b7       	in	r29, 0x3e	; 62
	/* Motor off, led on */
	DC_Motor_Stop();
    2bea:	0e 94 84 13 	call	0x2708	; 0x2708 <DC_Motor_Stop>
	DIO_enumSetPinValue(DIO_U8_PORT_B, DIO_U8_PIN7, DIO_U8_HIGH);
    2bee:	81 e0       	ldi	r24, 0x01	; 1
    2bf0:	67 e0       	ldi	r22, 0x07	; 7
    2bf2:	41 e0       	ldi	r20, 0x01	; 1
    2bf4:	0e 94 70 07 	call	0xee0	; 0xee0 <DIO_enumSetPinValue>
	//heater off
	Heater_OFF();
    2bf8:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <Heater_OFF>
	// lcd will display the remaining time
	LCD_enuSendCMD(LCD_CLEAR_SCREEN);
    2bfc:	81 e0       	ldi	r24, 0x01	; 1
    2bfe:	0e 94 d5 10 	call	0x21aa	; 0x21aa <LCD_enuSendCMD>
	LCD_vidWriteString("STOP MODE");
    2c02:	8b ee       	ldi	r24, 0xEB	; 235
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	0e 94 2f 11 	call	0x225e	; 0x225e <LCD_vidWriteString>
	Stop_Flag=1;
    2c0a:	81 e0       	ldi	r24, 0x01	; 1
    2c0c:	80 93 17 01 	sts	0x0117, r24
	Microwave_DisplayTime();
    2c10:	0e 94 cd 0b 	call	0x179a	; 0x179a <Microwave_DisplayTime>
}
    2c14:	cf 91       	pop	r28
    2c16:	df 91       	pop	r29
    2c18:	08 95       	ret

00002c1a <__mulsi3>:
    2c1a:	62 9f       	mul	r22, r18
    2c1c:	d0 01       	movw	r26, r0
    2c1e:	73 9f       	mul	r23, r19
    2c20:	f0 01       	movw	r30, r0
    2c22:	82 9f       	mul	r24, r18
    2c24:	e0 0d       	add	r30, r0
    2c26:	f1 1d       	adc	r31, r1
    2c28:	64 9f       	mul	r22, r20
    2c2a:	e0 0d       	add	r30, r0
    2c2c:	f1 1d       	adc	r31, r1
    2c2e:	92 9f       	mul	r25, r18
    2c30:	f0 0d       	add	r31, r0
    2c32:	83 9f       	mul	r24, r19
    2c34:	f0 0d       	add	r31, r0
    2c36:	74 9f       	mul	r23, r20
    2c38:	f0 0d       	add	r31, r0
    2c3a:	65 9f       	mul	r22, r21
    2c3c:	f0 0d       	add	r31, r0
    2c3e:	99 27       	eor	r25, r25
    2c40:	72 9f       	mul	r23, r18
    2c42:	b0 0d       	add	r27, r0
    2c44:	e1 1d       	adc	r30, r1
    2c46:	f9 1f       	adc	r31, r25
    2c48:	63 9f       	mul	r22, r19
    2c4a:	b0 0d       	add	r27, r0
    2c4c:	e1 1d       	adc	r30, r1
    2c4e:	f9 1f       	adc	r31, r25
    2c50:	bd 01       	movw	r22, r26
    2c52:	cf 01       	movw	r24, r30
    2c54:	11 24       	eor	r1, r1
    2c56:	08 95       	ret

00002c58 <__udivmodqi4>:
    2c58:	99 1b       	sub	r25, r25
    2c5a:	79 e0       	ldi	r23, 0x09	; 9
    2c5c:	04 c0       	rjmp	.+8      	; 0x2c66 <__udivmodqi4_ep>

00002c5e <__udivmodqi4_loop>:
    2c5e:	99 1f       	adc	r25, r25
    2c60:	96 17       	cp	r25, r22
    2c62:	08 f0       	brcs	.+2      	; 0x2c66 <__udivmodqi4_ep>
    2c64:	96 1b       	sub	r25, r22

00002c66 <__udivmodqi4_ep>:
    2c66:	88 1f       	adc	r24, r24
    2c68:	7a 95       	dec	r23
    2c6a:	c9 f7       	brne	.-14     	; 0x2c5e <__udivmodqi4_loop>
    2c6c:	80 95       	com	r24
    2c6e:	08 95       	ret

00002c70 <__udivmodsi4>:
    2c70:	a1 e2       	ldi	r26, 0x21	; 33
    2c72:	1a 2e       	mov	r1, r26
    2c74:	aa 1b       	sub	r26, r26
    2c76:	bb 1b       	sub	r27, r27
    2c78:	fd 01       	movw	r30, r26
    2c7a:	0d c0       	rjmp	.+26     	; 0x2c96 <__udivmodsi4_ep>

00002c7c <__udivmodsi4_loop>:
    2c7c:	aa 1f       	adc	r26, r26
    2c7e:	bb 1f       	adc	r27, r27
    2c80:	ee 1f       	adc	r30, r30
    2c82:	ff 1f       	adc	r31, r31
    2c84:	a2 17       	cp	r26, r18
    2c86:	b3 07       	cpc	r27, r19
    2c88:	e4 07       	cpc	r30, r20
    2c8a:	f5 07       	cpc	r31, r21
    2c8c:	20 f0       	brcs	.+8      	; 0x2c96 <__udivmodsi4_ep>
    2c8e:	a2 1b       	sub	r26, r18
    2c90:	b3 0b       	sbc	r27, r19
    2c92:	e4 0b       	sbc	r30, r20
    2c94:	f5 0b       	sbc	r31, r21

00002c96 <__udivmodsi4_ep>:
    2c96:	66 1f       	adc	r22, r22
    2c98:	77 1f       	adc	r23, r23
    2c9a:	88 1f       	adc	r24, r24
    2c9c:	99 1f       	adc	r25, r25
    2c9e:	1a 94       	dec	r1
    2ca0:	69 f7       	brne	.-38     	; 0x2c7c <__udivmodsi4_loop>
    2ca2:	60 95       	com	r22
    2ca4:	70 95       	com	r23
    2ca6:	80 95       	com	r24
    2ca8:	90 95       	com	r25
    2caa:	9b 01       	movw	r18, r22
    2cac:	ac 01       	movw	r20, r24
    2cae:	bd 01       	movw	r22, r26
    2cb0:	cf 01       	movw	r24, r30
    2cb2:	08 95       	ret

00002cb4 <__prologue_saves__>:
    2cb4:	2f 92       	push	r2
    2cb6:	3f 92       	push	r3
    2cb8:	4f 92       	push	r4
    2cba:	5f 92       	push	r5
    2cbc:	6f 92       	push	r6
    2cbe:	7f 92       	push	r7
    2cc0:	8f 92       	push	r8
    2cc2:	9f 92       	push	r9
    2cc4:	af 92       	push	r10
    2cc6:	bf 92       	push	r11
    2cc8:	cf 92       	push	r12
    2cca:	df 92       	push	r13
    2ccc:	ef 92       	push	r14
    2cce:	ff 92       	push	r15
    2cd0:	0f 93       	push	r16
    2cd2:	1f 93       	push	r17
    2cd4:	cf 93       	push	r28
    2cd6:	df 93       	push	r29
    2cd8:	cd b7       	in	r28, 0x3d	; 61
    2cda:	de b7       	in	r29, 0x3e	; 62
    2cdc:	ca 1b       	sub	r28, r26
    2cde:	db 0b       	sbc	r29, r27
    2ce0:	0f b6       	in	r0, 0x3f	; 63
    2ce2:	f8 94       	cli
    2ce4:	de bf       	out	0x3e, r29	; 62
    2ce6:	0f be       	out	0x3f, r0	; 63
    2ce8:	cd bf       	out	0x3d, r28	; 61
    2cea:	09 94       	ijmp

00002cec <__epilogue_restores__>:
    2cec:	2a 88       	ldd	r2, Y+18	; 0x12
    2cee:	39 88       	ldd	r3, Y+17	; 0x11
    2cf0:	48 88       	ldd	r4, Y+16	; 0x10
    2cf2:	5f 84       	ldd	r5, Y+15	; 0x0f
    2cf4:	6e 84       	ldd	r6, Y+14	; 0x0e
    2cf6:	7d 84       	ldd	r7, Y+13	; 0x0d
    2cf8:	8c 84       	ldd	r8, Y+12	; 0x0c
    2cfa:	9b 84       	ldd	r9, Y+11	; 0x0b
    2cfc:	aa 84       	ldd	r10, Y+10	; 0x0a
    2cfe:	b9 84       	ldd	r11, Y+9	; 0x09
    2d00:	c8 84       	ldd	r12, Y+8	; 0x08
    2d02:	df 80       	ldd	r13, Y+7	; 0x07
    2d04:	ee 80       	ldd	r14, Y+6	; 0x06
    2d06:	fd 80       	ldd	r15, Y+5	; 0x05
    2d08:	0c 81       	ldd	r16, Y+4	; 0x04
    2d0a:	1b 81       	ldd	r17, Y+3	; 0x03
    2d0c:	aa 81       	ldd	r26, Y+2	; 0x02
    2d0e:	b9 81       	ldd	r27, Y+1	; 0x01
    2d10:	ce 0f       	add	r28, r30
    2d12:	d1 1d       	adc	r29, r1
    2d14:	0f b6       	in	r0, 0x3f	; 63
    2d16:	f8 94       	cli
    2d18:	de bf       	out	0x3e, r29	; 62
    2d1a:	0f be       	out	0x3f, r0	; 63
    2d1c:	cd bf       	out	0x3d, r28	; 61
    2d1e:	ed 01       	movw	r28, r26
    2d20:	08 95       	ret

00002d22 <_exit>:
    2d22:	f8 94       	cli

00002d24 <__stop_program>:
    2d24:	ff cf       	rjmp	.-2      	; 0x2d24 <__stop_program>
